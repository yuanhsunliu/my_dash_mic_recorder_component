{
  "src/lib/components/Animate.react.js": {
    "description": "Animate is a wrapper for the <animate> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/animate",
    "displayName": "Animate",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "accumulate": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"none\"",
              "computed": false
            },
            {
              "value": "\"sum\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The accumulate attribute controls whether or not an animation\n is cumulative.It is frequently useful for repeated animations\n to build upon the previous results, accumulating with\n each iteration. This attribute said to the animation if\n the value is added to the previous animated attribute's\n value on each iteration.You can use this attribute with\n the following SVG elements:Specifies that each repeat\n iteration after the first builds upon the last value of\n the previous iteration.Specifies that repeat iterations\n are not cumulative.This attribute is ignored if the target\n attribute value does not support addition, or if the animation\n element does not repeat.This attribute will be ignored\n if the animation function is specified with only the to\n attribute.Last modified: May 13, 2022, by MDN contributors"
      },
      "additive": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"replace\"",
              "computed": false
            },
            {
              "value": "\"sum\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The additive attribute controls whether or not an animation is\n additive.It is frequently useful to define animation as\n an offset or delta to an attribute's value, rather than\n as absolute values.You can use this attribute with the\n following SVG elements:Specifies that the animation will\n add to the underlying value of the attribute and other\n lower priority animations.Specifies that the animation\n will override the underlying value of the attribute and\n other lower priority animations. This is the default,\n however the behavior is also affected by the animation\n value attributes by and to, as described in SMIL Animation:\n How from, to and by attributes affect additive behavior.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "attributeName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The attributeName attribute indicates the name of the CSS property\n or attribute of the target element that is going to be\n changed during an animation.You can use this attribute\n with the following SVG elements:This value indicates the\n name of the CSS property or attribute of the target element\n to be animated.Last modified: May 13, 2022, by MDN contributors"
      },
      "attributeType": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The attributeType attribute\n specifies the namespace in which the target attribute\n and its associated values are defined.You can use this\n attribute with the following SVG elements:This value specifies\n that the value of attributeName is the name of a CSS property\n defined as animatable.This value specifies that the value\n of attributeName is the name of an XML attribute defined\n as animatable in the default XML namespace for the target\n element.This value specifies that the implementation should\n match the attributeName to an attribute for the target\n element. User agents first search through the list of\n CSS properties for a matching property name, and if none\n is found, search the default XML namespace for the element.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "begin": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The begin attribute defines when an animation should begin or\n when an element should be discarded.The attribute value\n is a semicolon separated list of values. The interpretation\n of a list of start times is detailed in the SMIL specification\n in \"Evaluation of begin and end time lists\". Each individual\n value can be one of the following : <offset-value>, <syncbase-value>,\n <event-value>, <repeat-value>, <accessKey-value>, <wallclock-sync-value>\n or the keyword indefinite.You can use this attribute with\n the following SVG elements:For <animate>, <animateColor>,\n <animateMotion>, <animateTransform>, and <set>, begin\n defines when the element should begin, i.e. become active.The\n <begin-value-list> is a semicolon-separated list of values.\n Each value can be one of the following:This value defines\n a clock-value that represents a point in time relative\n to the beginning of the SVG document (usually the load\n or DOMContentLoaded event). Negative values are valid.This\n value defines a syncbase and an optional offset from that\n syncbase. The element's animation start time is defined\n relative to the begin or active end of another animation.A\n valid syncbase-value consists of an ID reference to another\n animation element followed by a dot and either begin or\n end to identify whether to synchronize with the beginning\n or active end of the referenced animation element. An\n optional offset value as defined in <offset-value> can\n be appended.This value defines an event and an optional\n offset that determines the time at which the element's\n animation should begin. The animation start time is defined\n relative to the time that the specified event is fired.A\n valid event-value consists of an element ID followed by\n a dot and one of the supported events for that element.\n All valid events (not necessarily supported by all elements)\n are defined by the DOM and HTML specifications. Those\n are: focus, blur, focusin, focusout, DOMActivate, auxclick,\n click, dblclick, mousedown, mouseenter, mouseleave, mousemove,\n mouseout, mouseover, mouseup, wheel, beforeinput, input,\n keydown, keyup, compositionstart, compositionupdate, compositionend,\n load, unload, abort, error, select, resize, scroll, beginEvent,\n endEvent, and repeatEvent. An optional offset value as\n defined in <offset-value> can be appended.This value defines\n a qualified repeat event. The element animation start\n time is defined relative to the time that the repeat event\n is raised with the specified iteration value.A valid repeat\n value consists of an element ID followed by a dot and\n the function repeat() with an integer value specifying\n the number of repetitions as parameter. An optional offset\n value as defined in <offset-value> can be appended.This\n value defines an access key that should trigger the animation.\n The element animation will begin when the user presses\n the specified key.A valid accessKey-value consists of\n the function accessKey() with the character to be input\n as parameter. An optional offset value as defined in <offset-value>\n can be appended.This value defines the animation start\n time as a real-world clock time.A valid wallclock-sync-value\n consists of the function wallclock() with a time value\n as parameter. The time syntax is based upon the syntax\n defined in ISO 8601.The begin of the animation will be\n determined by a beginElement() method call or a hyperlink\n targeted to the element.For <discard>, begin defines when\n the target element will be discarded.The <discard> element\n has an implicit simple duration of indefinite. As soon\n as the element's active duration starts, the element identified\n by the href attribute is discarded. The behavior is the\n same as if Node.removeChild() were called on the parent\n of the target element with the target element as parameter.After\n removal of the target element, the <discard> element is\n no longer useful, therefore it is also discarded after\n the target element's removal. If the href attribute has\n an invalid URL reference (e.g. the target element did\n not exist), the <discard> element itself is still removed\n after the activation.Seeking backwards in the timeline\n doesn't re-insert the discarded elements. So, authors\n are encouraged to set the playbackorder attribute to forwardonly\n when using the <discard> element.The <discard> element\n itself can be discarded prior to its activation, in which\n case it will never trigger the removal of its own target\n element.The definition of <begin-value-list> is the same\n as for the other animation elements.begin-1-offset.svgbegin-2-syncbase.svgbegin-3-event.svgbegin-4-repeat.svgThis\n example is embed in an iFrame. If you want to activate\n the key events, you have to click on it first.begin-5-accesskey.svgLast\n modified: Jul 12, 2022, by MDN contributors"
      },
      "by": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The by attribute specifies a relative offset value for an attribute\n that will be modified during an animation.The starting\n value for the attribute is either indicated by specifying\n it as value for the attribute given in the attributeName\n or the from attribute.You can use this attribute with\n the following SVG elements:The exact value type for this\n attribute depends on the value of the attribute that will\n be animated.When a list of values is defined via the values\n attribute, the by attribute is ignored.BCD tables only\n load in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "calcMode": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The calcMode attribute specifies the interpolation mode for the\n animation.The default mode is linear, however if the attribute\n does not support linear interpolation (e.g. for strings),\n the calcMode attribute is ignored and discrete interpolation\n is used.You can use this attribute with the following\n SVG elements:This specifies that the animation function\n will jump from one value to the next without any interpolation.Simple\n linear interpolation between values is used to calculate\n the animation function. Except for <animateMotion>, this\n is the default value.Defines interpolation to produce\n an even pace of change across the animation. This is only\n supported for values that define a linear numeric range,\n and for which some notion of \"distance\" between points\n can be calculated (e.g. position, width, height, etc.).\n If paced is specified, any keyTimes or keySplines will\n be ignored. For <animateMotion>, this is the default value.Interpolates\n from one value in the values list to the next according\n to a time function defined by a cubic B\u00e9zier spline. The\n points of the spline are defined in the keyTimes attribute,\n and the control points for each interval are defined in\n the keySplines attribute.Last modified: May 13, 2022,\n by MDN contributors"
      },
      "colorInterpolation": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation attribute specifies the color space for\n gradient interpolations, color animations, and alpha compositing.Note:\n For filter effects, the color-interpolation-filters property\n controls which color space is used.The color-interpolation\n property chooses between color operations occurring in\n the sRGB color space or in a (light energy linear) linearized\n RGB color space. Having chosen the appropriate color space,\n component-wise linear interpolation is used.When a child\n element is blended into a background, the value of the\n color-interpolation property on the child determines the\n type of blending, not the value of the color-interpolation\n on the parent. For gradients which make use of the href\n or the deprecated xlink:href attribute to reference another\n gradient, the gradient uses the property's value from\n the gradient element which is directly referenced by the\n fill or stroke property. When animating colors, color\n interpolation is performed according to the value of the\n color-interpolation property on the element being animated.Note:\n As a presentation attribute, color-interpolation can be\n used as a CSS property.You can use this attribute with\n the following SVG elements:Indicates that the user agent\n can choose either the sRGB or linearRGB spaces for color\n interpolation. This option indicates that the author doesn't\n require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "dur": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The dur attribute indicates the simple duration of an animation.You\n can use this attribute with the following SVG elements:This\n value specifies the length of the simple duration. The\n value must be greater than 0 and can be expressed with\n hours (h), minutes (m), seconds (s) or milliseconds (ms).\n It's possible to combine those time representations to\n create some complex durations like hh:mm:ss.iii or mm:ss.iii.\n\n      This value specifies the simple duration as the intrinsic\n media duration. This is only valid for elements that define\n media.\n      (For animation elements the attribute will\n be ignored if media is specified.)\n    This value specifies\n the simple duration as indefinite.Note: the interpolation\n will not work if the simple duration is indefinite (although\n this may still be useful for <set> elements).BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: May 17, 2022, by\n MDN contributors"
      },
      "end": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The end attribute defines an end value for the animation that\n can constrain the active duration.You can use this attribute\n with the following SVG elements:The <end-value-list> is\n a semicolon-separated list of values. Each value can be\n one of the following:This value defines a clock-value\n that represents a point in time relative to the beginning\n of the SVG document (usually the load or DOMContentLoaded\n event). Negative values are valid.This value defines a\n syncbase and an optional offset from that syncbase. The\n element's animation end time is defined relative to the\n begin or active end of another animation.A valid syncbase-value\n consists of an ID reference to another animation element\n followed by a dot and either begin or end to identify\n whether to synchronize with the beginning or active end\n of the referenced animation element. An optional offset\n value as defined in <offset-value> can be appended.This\n value defines an event and an optional offset that determines\n the time at which the element's animation should end.\n The animation end time is defined relative to the time\n that the specified event is fired.A valid event-value\n consists of an element ID followed by a dot and one of\n the supported events for that element. All valid events\n (not necessarily supported by all elements) are defined\n by the DOM and HTML specifications. Those are: focus,\n blur, focusin, focusout, activate, auxclick, click, dblclick,\n mousedown, mouseenter, mouseleave, mousemove, mouseout,\n mouseover, mouseup, wheel, beforeinput, input, keydown,\n keyup, compositionstart, compositionupdate, compositionend,\n load, unload, abort, error, select, resize, scroll, beginEvent,\n endEvent, and repeatEvent . An optional offset value as\n defined in <offset-value> can be appended.This value defines\n a qualified repeat event. The element animation end time\n is defined relative to the time that the repeat event\n is raised with the specified iteration value.A valid repeat\n value consists of an element ID followed by a dot and\n the function repeat() with an integer value specifying\n the number of repetitions as parameter. An optional offset\n value as defined in <offset-value> can be appended.This\n value defines an access key that should trigger the end\n of the animation. The element animation will end when\n the user presses the specified key.A valid accessKey-value\n consists of the function accessKey() with the character\n to be input as parameter. An optional offset value as\n defined in <offset-value> can be appended.This value defines\n the animation end time as a real-world clock time.A valid\n wallclock-sync-value consists of the function wallclock()\n with a time value as parameter. The time syntax is based\n upon the syntax defined in ISO 8601.The end of the animation\n will be determined by an SVGAnimationElement.endElement()\n method call.This example is embed in an iFrame. If you\n want to activate the key events, you have to click on\n it first.Last modified: May 17, 2022, by MDN contributors"
      },
      "from": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The from attribute indicates the initial value of the attribute\n that will be modified during the animation.When used with\n the to attribute, the animation will change the modified\n attribute from the from value to the to value. When used\n with the by attribute, the animation will change the attribute\n relatively from the from value by the value specified\n in by.You can use this attribute with the following SVG\n elements:The exact value type for this attribute depends\n on the value of the attribute that will be animated.When\n a list of values is defined via the values attribute,\n the from attribute is ignored.BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "keyPoints": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The keyPoints attribute indicates the simple duration of an animation.You\n can use this attribute with the following SVG elements:This\n value defines a semicolon-separated list of floating point\n values between 0 and 1 and indicates how far along the\n motion path the object shall move at the moment in time\n specified by corresponding keyTimes value. The distance\n is calculated along the path specified by the path attribute.\n Each progress value in the list corresponds to a value\n in the keyTimes attribute list.If a list of key points\n is specified, there must be exactly as many values in\n the keyPoints list as in the keyTimes list.If there's\n a semicolon at the end of the value, optionally followed\n by white space, both the semicolon and the trailing white\n space are ignored.If there are any errors in the value\n specification (i.e. bad values, too many or too few values),\n then that's an error.BCD tables only load in the browser\n with JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "keySplines": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The keySplines attribute defines a set of B\u00e9zier curve control\n points associated with the keyTimes list, defining a cubic\n B\u00e9zier function that controls interval pacing.This attribute\n is ignored unless the calcMode attribute is set to spline.If\n there are any errors in the keySplines specification (bad\n values, too many or too few values), the animation will\n not occur.You can use this attribute with the following\n SVG elements:The attribute value is a semicolon-separated\n list of control point descriptions.Last modified: May\n 17, 2022, by MDN contributors"
      },
      "keyTimes": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The keyTimes attribute represents a list of time values used\n to control the pacing of the animation.Each time in the\n list corresponds to a value in the values attribute list,\n and defines when the value is used in the animation. Each\n time value in the keyTimes list is specified as a floating\n point value between 0 and 1 (inclusive), representing\n a proportional offset into the duration of the animation\n element.You can use this attribute with the following\n SVG elements:The value of the keyTimes attribute is a\n semicolon-separated list of values.There must be exactly\n as many values in the keyTimes list as in the values list.Each\n successive time value must be greater than or equal to\n the preceding time value.The keyTimes list semantics depends\n upon the interpolation mode:If the calcMode attribute\n is set to paced, the keyTimes attribute is ignored.If\n the duration of the animation is indefinite, any keyTimes\n specification will be ignored.Last modified: May 13, 2022,\n by MDN contributors"
      },
      "repeatCount": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The repeatCount attribute indicates the number of times an animation\n will take place.You can use this attribute with the following\n SVG elements:This value specifies the number of iterations.\n It can include partial iterations expressed as fraction\n values. A fractional value describes a portion of the\n simple duration. Values must be greater than 0.This value\n indicates that the animation will be repeated indefinitely\n (i.e. until the document ends).BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "repeatDur": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The repeatDur attribute specifies the total duration for repeating\n an animation.You can use this attribute with the following\n SVG elements:This value specifies the duration in presentation\n time to repeat the animation.This value indicates that\n the animation will be repeated indefinitely (i.e. until\n the document ends).Last modified: May 13, 2022, by MDN\n contributors"
      },
      "requiredFeatures": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The requiredFeatures attribute\n takes a list of feature strings, with the individual strings\n separated by white space. It determines whether or not\n all of the named features are supported by the browser;\n if all of them are supported, the attribute evaluates\n to true end the element is rendered; otherwise, the attribute\n evaluates to false and the current element and its children\n are skipped and thus will not be rendered. This provides\n a way to design SVG that gracefully falls back when features\n aren't available.If the attribute is not present, then\n its implicit evaluated value is true. If a null string\n or empty string value is given to attribute requiredFeatures,\n the attribute is evaluate to false.requiredFeatures is\n often used in conjunction with the <switch> element. If\n requiredFeatures is used in other situations, it represents\n a simple switch on the given element whether to render\n the element or not.To detect availability of an SVG feature\n from script, there is the (also deprecated) DOMImplementation.hasFeature()\n method.You can use this attribute with the following SVG\n elements:This is a list of feature strings, separated\n using white space. Determines whether all of the named\n features are supported by the browser. See Feature strings\n below for a list of allowed values.The following are the\n feature strings for the requiredFeatures attribute. These\n same feature strings apply to the hasFeature method call\n that is part of the SVG DOM's support for the DOMImplementation\n interface. In some cases the feature strings map directly\n to a set of attributes, properties or elements, in others\n they represent some functionality of the browser. Note\n that the format and naming for feature strings changed\n from SVG 1.0 to SVG 1.1. The SVG 1.0 feature strings are\n not listed here but can be found in the SVG Specification.\n Some browser support SVG 1.0 Feature strings for compatibility\n reasons. However, the SVG 1.0 feature strings are considered\n deprecated.At least one of the following feature is supported:At\n least one of the following feature is supported:The browser\n supports all the following features:The browser supports\n all of the DOM interfaces and methods that correspond\n to the language features for http://www.w3.org/TR/SVG11/feature#SVG-static.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-static\n plus the feature http://www.w3.org/TR/SVG11/feature#Animation.The\n browser supports all of the DOM interfaces and methods\n that correspond to the language features for http://www.w3.org/TR/SVG11/feature#SVG-animation.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-animation\n plus the following features:The browser supports all of\n the DOM interfaces and methods that correspond to the\n language features for http://www.w3.org/TR/SVG11/feature#SVG-dynamic.The\n browser supports the id, xml:base, xml:lang and xml:space\n attributesThe browser supports <svg>, <g>, <defs>, <desc>,\n <title>, <metadata>, <symbol> and <use> elements.The browser\n supports <svg>, <g>, <defs>, <desc>, <title>, <metadata>\n and <use> elements.The browser supports the enable-background\n attributeThe browser supports the <switch> element, and\n the requiredFeatures, requiredExtensions, systemLanguage\n attributesThe browser supports the <image> element.The\n browser supports the <style> element.The browser supports\n the clip and overflow attributes.The browser supports\n the <rect>, <circle>, <line>, <polyline>, <polygon>, <ellipse>\n and <path> elements.The browser supports the <text>, <tspan>,\n <tref>, <textPath>, <altGlyph>, <altGlyphDef>, <altGlyphItem>\n and <glyphRef> elements.The browser supports the <text>\n elementThe browser supports the color, fill, fill-rule,\n stroke, stroke-dasharray, stroke-dashoffset, stroke-linecap,\n stroke-linejoin, stroke-miterlimit, stroke-width, color-interpolation\n and color-rendering attributesThe browser supports the\n color, fill, fill-rule, stroke, stroke-dasharray, stroke-dashoffset,\n stroke-linecap, stroke-linejoin, stroke-miterlimit, stroke-width\n and color-rendering attributesThe browser supports the\n opacity, stroke-opacity and fill-opacity attributesThe\n browser supports the display, image-rendering, pointer-events,\n shape-rendering, text-rendering and visibility attributesThe\n browser supports the display and visibility attributesThe\n browser supports the <marker> elementThe browser supports\n the <linearGradient>, <radialGradient> and <stop> elementsThe\n browser supports the <pattern> elementThe browser supports\n the <clipPath> element and the clip-path, clip-rule attributesThe\n browser supports the <clipPath> element and the clip-path\n attributeThe browser supports the <mask> elementThe browser\n supports the <filter>, <feBlend>, <feColorMatrix>, <feComponentTransfer>,\n <feComposite>, <feConvolveMatrix>, <feDiffuseLighting>,\n <feDisplacementMap>, <feFlood>, <feGaussianBlur>, <feImage>,\n <feMerge>, <feMergeNode>, <feMorphology>, <feOffset>,\n <feSpecularLighting>, <feTile>, <feDistantLight>, <fePointLight>,\n <feSpotLight>, <feFuncR>, <feFuncG>, <feFuncB> and <feFuncA>\n elementsThe browser supports the <filter>, <feBlend>,\n <feColorMatrix>, <feComponentTransfer>, <feComposite>,\n <feFlood>, <feGaussianBlur>, <feImage>, <feMerge>, <feMergeNode>,\n <feOffset>, <feTile>, <feFuncR>, <feFuncG>, <feFuncB>\n and <feFuncA> elementsThe browser supports the onunload,\n onabort, onerror, onresize, onscroll and onzoom attributesThe\n browser supports the onfocusin, onfocusout, onactivate,\n onclick, onmousedown, onmouseup, onmouseover, onmousemove,\n onmouseout and onload attributesThe browser supports the\n onbegin, onend, onrepeat and onload attributesThe browser\n supports the <cursor> elementThe browser supports the\n <a> elementThe browser supports the xlink:type, xlink:href,\n xlink:role, xlink:arcrole, xlink:title, xlink:show and\n xlink:actuate attributesThe browser supports the <view>\n elementThe browser supports the <script> elementThe browser\n supports the <animate>, <set>, <animateMotion>, <animateTransform>,\n <animateColor> and <mpath> elementsThe browser supports\n the <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <vkern>, <font-face-src>, <font-face-uri>, <font-face-format>\n and <font-face-name> elementsThe browser supports the\n <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <font-face-src> and <font-face-name> elementsThe browser\n supports the <foreignObject> elementSee also requiredFeatures.svgBCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "restart": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The restart attribute specifies whether or not an animation can\n restart.You can use this attribute with the following\n SVG elements:This value indicates that the animation can\n be restarted at any time.This value indicates that the\n animation can only be restarted when it is not active\n (i.e. after the active end). Attempts to restart the animation\n during its active duration are ignored.This value indicates\n that the animation cannot be restarted for the time the\n document is loaded.Last modified: May 13, 2022, by MDN\n contributors"
      },
      "systemLanguage": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The systemLanguage attribute represents a list of supported language\n tags. This list is matched against the language defined\n in the user preferences.You can use this attribute with\n the following SVG elements:The value is a set of comma-separated\n tokens, each of which must be a language tag, as defined\n in RFC 5646: Tags for Identifying Languages (also known\n as BCP 47).systemLanguage is often used in conjunction\n with the <switch> element. If the attribute is used in\n other situations, then it represents a simple switch on\n the given element whether to render the element or not.Note:\n If several alternative language objects are enclosed in\n a <switch> and none of them matches, this may lead to\n situations where no content is displayed. It is thus recommended\n to include a \"catch-all\" choice at the end of such a <switch>\n which is acceptable in all cases.The attribute evaluates\n to \"true\" if one of the language tags indicated by user\n preferences is a case-insensitive match or prefix (followed\n by a \"-\") of one of the language tags given in the value\n of this parameter. Otherwise it evaluates to \"false\".Note:\n The prefix matching rule does not imply that if a user\n understands a language with a certain tag, that the user\n will also understand all languages with the tag as prefix.If\n the attribute is not present, then it implicitly evaluates\n to \"true\". If a null string or empty string value is given,\n the attribute evaluates to \"false\".The prefix rule allows\n the use of prefix tags if this is the case.Multiple languages\n may be listed for content that is intended for multiple\n audiences. For example, content that is presented simultaneously\n in the original Maori and English versions, would call\n for:However, just because multiple languages are present\n within the object on which the systemLanguage test attribute\n is placed, this does not mean that it is intended for\n multiple linguistic audiences. An example would be a beginner's\n language primer, such as \"A First Lesson in Latin,\" which\n is clearly intended to be used by an English-literate\n audience. In this case, the attribute should only include\n en.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "to": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The to attribute indicates the final value of the attribute that\n will be modified during the animation.The value of the\n attribute will change between the from attribute value\n and this value.You can use this attribute with the following\n SVG elements:For <animate>, <animateColor>, <animateMotion>,\n and <animateTransform>, to specifies the ending value\n of the animation.The exact value type for this attribute\n depend on the value of the attribute that will be animated.If\n a list of values is defined via the values attribute,\n the to attribute is ignored.For the <set> element, to\n specifies the value for the attribute during the duration\n of the element.The exact value type for this attribute\n depend on the value of the attribute that will be animated.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "values": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The values attribute has different meanings, depending upon the\n context where it's used, either it defines a sequence\n of values used over the course of an animation, or it's\n a list of numbers for a color matrix, which is interpreted\n differently depending on the type of color change to be\n performed.You can use this attribute with the following\n SVG elements:For <animate>, <animateColor>, <animateMotion>,\n and <animateTransform>, values is a list of values defining\n the sequence of values over the course of the animation.\n If this attribute is specified, any from, to, and by attribute\n values set on the element are ignored.The value holds\n a semicolon-separated list of one or more values. The\n type of the values is defined by the href and attributeName\n attributes.For the <feColorMatrix> element, values is\n a list of numbers interpreted differently depending on\n the value of the type attribute.The value is a list of\n numbers, which is interpreted differently depending on\n the value of the type attribute:Last modified: Jul 10,\n 2022, by MDN contributors"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/Circle.react.js": {
    "description": "Circle is a wrapper for the <circle> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/circle",
    "displayName": "Circle",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "clipPath": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The clip-path presentation attribute defines or associates a\n clipping path with the element it is related to.Note:\n As a presentation attribute clip-path can be used as a\n CSS property.You can use this attribute with the following\n SVG elements:An extra information to tell how a <basic-shape>\n is applied to an element: fill-box indicates to use the\n object bounding box; stroke-box indicates to use the object\n bounding box extended with the stroke; view-box indicates\n to use the nearest SVG viewport as the reference box.Note:\n For more details on the clip-path syntax, see the CSS\n property clip-path reference page.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "colorInterpolation": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation attribute specifies the color space for\n gradient interpolations, color animations, and alpha compositing.Note:\n For filter effects, the color-interpolation-filters property\n controls which color space is used.The color-interpolation\n property chooses between color operations occurring in\n the sRGB color space or in a (light energy linear) linearized\n RGB color space. Having chosen the appropriate color space,\n component-wise linear interpolation is used.When a child\n element is blended into a background, the value of the\n color-interpolation property on the child determines the\n type of blending, not the value of the color-interpolation\n on the parent. For gradients which make use of the href\n or the deprecated xlink:href attribute to reference another\n gradient, the gradient uses the property's value from\n the gradient element which is directly referenced by the\n fill or stroke property. When animating colors, color\n interpolation is performed according to the value of the\n color-interpolation property on the element being animated.Note:\n As a presentation attribute, color-interpolation can be\n used as a CSS property.You can use this attribute with\n the following SVG elements:Indicates that the user agent\n can choose either the sRGB or linearRGB spaces for color\n interpolation. This option indicates that the author doesn't\n require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "cx": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The cx attribute define the x-axis coordinate of a center point.You\n can use this attribute with the following SVG elements:For\n <circle>, cx defines the x-axis coordinate of the center\n of the shape.Note: Starting with SVG2 cx, is a Geometry\n Property, meaning this attribute can also be used as CSS\n property for circles.For <ellipse>, cx defines the x-axis\n coordinate of the center of the shape.Note: Starting with\n SVG2 cx, is a Geometry Property, meaning this attribute\n can also be used as CSS property for ellipses.For <radialGradient>,\n cx defines the x-axis coordinate of the end circle for\n the radial gradient.Last modified: May 13, 2022, by MDN\n contributors"
      },
      "cy": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The cy attribute define the y-axis coordinate of a center point.You\n can use this attribute with the following SVG elements:For\n <circle>, cy defines the y-axis coordinate of the center\n of the shape.Note: Starting with SVG2, cy is a Geometry\n Property meaning this attribute can also be used as a\n CSS property for circles.For <ellipse>, cy defines the\n y-axis coordinate of the center of the shape.Note: Starting\n with SVG2, cy is a Geometry Property meaning this attribute\n can also be used as a CSS property for ellipses.For <radialGradient>,\n cy defines the y-axis coordinate of the end circle for\n the radial gradient.Last modified: May 13, 2022, by MDN\n contributors"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "fillOpacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The fill-opacity attribute is a presentation attribute defining\n the opacity of the paint server (color, gradient, pattern,\n etc) applied to a shape.Note: As a presentation attribute\n fill-opacity can be used as a CSS property.You can use\n this attribute with the following SVG elements:Note: SVG2\n introduces percentage values for fill-opacity, however,\n it is not widely supported yet (See Browser compatibility\n below) as a consequence, it is best practices to set opacity\n with a value in the range [0-1].BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "markerEnd": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The marker-end attribute defines the arrowhead or polymarker\n that will be drawn at the final vertex of the given shape.For\n all shape elements, except <polyline> and <path>, the\n last vertex is the same as the first vertex. In this case,\n if the value of marker-start and marker-end are both not\n none, then two markers will be rendered on that final\n vertex. For <path> elements, for each closed subpath,\n the last vertex is the same as the first vertex. marker-end\n is only rendered on the final vertex of the path data.Note:\n As a presentation attribute, marker-end can be used as\n a CSS property.You can use this attribute with the following\n SVG elements:Indicates that no marker symbol shall be\n drawn at the final vertex.This value is a reference to\n a <marker> element, which will be drawn at the final vertex.\n If the reference is not valid, then no marker will be\n drawn.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 17, 2022, by MDN contributors"
      },
      "markerMid": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The marker-mid attribute defines the arrowhead or polymarker\n that will be drawn at all interior vertices of the given\n shape.The marker is rendered on every vertex other than\n the first and last vertices of the path data.Note: As\n a presentation attribute, marker-mid can be used as a\n CSS property.You can use this attribute with the following\n SVG elements:Indicates that no marker symbol shall be\n drawn at the given vertices.This value is a reference\n to a <marker> element, which will be drawn at the given\n vertices. If the reference is not valid, then no marker\n will be drawn.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 17, 2022, by MDN contributors"
      },
      "markerStart": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The marker-start attribute defines the arrowhead or polymarker\n that will be drawn at the first vertex of the given shape.For\n all shape elements, except <polyline> and <path>, the\n last vertex is the same as the first vertex. In this case,\n if the value of marker-start and marker-end are both not\n none, then two markers will be rendered on that final\n vertex. For <path> elements, for each closed subpath,\n the last vertex is the same as the first vertex. marker-start\n is only rendered on the first vertex of the path data.Note:\n As a presentation attribute, marker-start can be used\n as a CSS property.You can use this attribute with the\n following SVG elements:Indicates that no marker symbol\n shall be drawn at the first vertex.This value is a reference\n to a <marker> element, which will be drawn at the first\n vertex. If the reference is not valid, then no marker\n will be drawn.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 17, 2022, by MDN contributors"
      },
      "mask": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The mask attribute is a presentation attribute mainly used to\n bind a given <mask> element with the element the attribute\n belongs to.Note: As a presentation attribute mask can\n be used as a CSS property.You can use this attribute with\n the following SVG elements:Since SVG2, the mask attribute\n is defined as a css property and is a shorthand for many\n other properties: mask-image, mask-mode, mask-repeat,\n mask-position, mask-clip, mask-origin, mask-size, and\n mask-composite.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "opacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The opacity attribute specifies the transparency of an object\n or of a group of objects, that is, the degree to which\n the background behind the element is overlaid.Note: As\n a presentation attribute, opacity can be used as a CSS\n property. See the css opacity property for more information.You\n can use this attribute with the following SVG elements:The\n uniform opacity setting to be applied across an entire\n object, as a <number>. Any values outside the range 0.0\n (fully transparent) to 1.0 (fully opaque) will be clamped\n to this range.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "paintOrder": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The paint-order attribute specifies the order that the fill,\n stroke, and markers of a given shape or text element are\n painted.Note: As a presentation attribute, paint-order\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:This value indicates that\n the fill will be painted first, then the stroke, and finally\n the markers.The order of these three keywords indicates\n the order in which the painting happens, from left to\n right. If any of the three painting components is omitted,\n they will be painted in their default order after the\n specified components. For example, using stroke is equivalent\n to stroke fill markers.The example would be rendered as\n follows:\n  \nThe stroke under effect could be achieved\n via the following CSS property:BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "pathLength": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The pathLength attribute lets authors specify a total length\n for the path, in user units. This value is then used to\n calibrate the browser's distance calculations with those\n of the author, by scaling all distance computations using\n the ratio pathLength/(computed value of path length).This\n can affect the actual rendered lengths of paths; including\n text paths, animation paths, and various stroke operations.\n Basically, all computations that require the length of\n the path. stroke-dasharray, for example, will assume the\n start of the path being 0 and the end point the value\n defined in the pathLength attribute.You can use this attribute\n with the following SVG elements:For <circle>, pathLength\n lets authors specify a total length for the circle, in\n user units.For <ellipse>, pathLength lets authors specify\n a total length for the ellipse, in user units.For <line>,\n pathLength lets authors specify a total length for the\n line, in user units.For <path>, pathLength lets authors\n specify a total length for the path, in user units.For\n <polygon>, pathLength lets authors specify a total length\n for the shape, in user units.For <polyline>, pathLength\n lets authors specify a total length for the shape, in\n user units.For <rect>, pathLength lets authors specify\n a total length for the rectangle, in user units.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "pointerEvents": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The pointer-events attribute is a presentation attribute that\n allows defining whether or when an element may be the\n target of a mouse event.Note: As a presentation attribute\n pointer-events can be used as a CSS property.You can use\n this attribute with the following SVG elements:For a detailed\n explanation of each possible value, have a look at the\n CSS pointer-events documentation.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "r": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The r attribute defines the radius of a circle.You can use this\n attribute with the following SVG elements:For <circle>,\n r defines the radius of the circle and therefor its size.\n With a value lower or equal to zero the circle won't be\n drawn at all.Note: Starting with SVG2, r is a Geometry\n Property meaning this attribute can also be used as a\n CSS property for circles.For <radialGradient>, r defines\n the radius of the end circle for the radial gradient.The\n gradient will be drawn such that the 100% gradient stop\n is mapped to the perimeter of this end circle. A value\n of lower or equal to zero will cause the area to be painted\n as a single color using the color and opacity of the last\n gradient <stop>.Last modified: May 13, 2022, by MDN contributors"
      },
      "requiredFeatures": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The requiredFeatures attribute\n takes a list of feature strings, with the individual strings\n separated by white space. It determines whether or not\n all of the named features are supported by the browser;\n if all of them are supported, the attribute evaluates\n to true end the element is rendered; otherwise, the attribute\n evaluates to false and the current element and its children\n are skipped and thus will not be rendered. This provides\n a way to design SVG that gracefully falls back when features\n aren't available.If the attribute is not present, then\n its implicit evaluated value is true. If a null string\n or empty string value is given to attribute requiredFeatures,\n the attribute is evaluate to false.requiredFeatures is\n often used in conjunction with the <switch> element. If\n requiredFeatures is used in other situations, it represents\n a simple switch on the given element whether to render\n the element or not.To detect availability of an SVG feature\n from script, there is the (also deprecated) DOMImplementation.hasFeature()\n method.You can use this attribute with the following SVG\n elements:This is a list of feature strings, separated\n using white space. Determines whether all of the named\n features are supported by the browser. See Feature strings\n below for a list of allowed values.The following are the\n feature strings for the requiredFeatures attribute. These\n same feature strings apply to the hasFeature method call\n that is part of the SVG DOM's support for the DOMImplementation\n interface. In some cases the feature strings map directly\n to a set of attributes, properties or elements, in others\n they represent some functionality of the browser. Note\n that the format and naming for feature strings changed\n from SVG 1.0 to SVG 1.1. The SVG 1.0 feature strings are\n not listed here but can be found in the SVG Specification.\n Some browser support SVG 1.0 Feature strings for compatibility\n reasons. However, the SVG 1.0 feature strings are considered\n deprecated.At least one of the following feature is supported:At\n least one of the following feature is supported:The browser\n supports all the following features:The browser supports\n all of the DOM interfaces and methods that correspond\n to the language features for http://www.w3.org/TR/SVG11/feature#SVG-static.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-static\n plus the feature http://www.w3.org/TR/SVG11/feature#Animation.The\n browser supports all of the DOM interfaces and methods\n that correspond to the language features for http://www.w3.org/TR/SVG11/feature#SVG-animation.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-animation\n plus the following features:The browser supports all of\n the DOM interfaces and methods that correspond to the\n language features for http://www.w3.org/TR/SVG11/feature#SVG-dynamic.The\n browser supports the id, xml:base, xml:lang and xml:space\n attributesThe browser supports <svg>, <g>, <defs>, <desc>,\n <title>, <metadata>, <symbol> and <use> elements.The browser\n supports <svg>, <g>, <defs>, <desc>, <title>, <metadata>\n and <use> elements.The browser supports the enable-background\n attributeThe browser supports the <switch> element, and\n the requiredFeatures, requiredExtensions, systemLanguage\n attributesThe browser supports the <image> element.The\n browser supports the <style> element.The browser supports\n the clip and overflow attributes.The browser supports\n the <rect>, <circle>, <line>, <polyline>, <polygon>, <ellipse>\n and <path> elements.The browser supports the <text>, <tspan>,\n <tref>, <textPath>, <altGlyph>, <altGlyphDef>, <altGlyphItem>\n and <glyphRef> elements.The browser supports the <text>\n elementThe browser supports the color, fill, fill-rule,\n stroke, stroke-dasharray, stroke-dashoffset, stroke-linecap,\n stroke-linejoin, stroke-miterlimit, stroke-width, color-interpolation\n and color-rendering attributesThe browser supports the\n color, fill, fill-rule, stroke, stroke-dasharray, stroke-dashoffset,\n stroke-linecap, stroke-linejoin, stroke-miterlimit, stroke-width\n and color-rendering attributesThe browser supports the\n opacity, stroke-opacity and fill-opacity attributesThe\n browser supports the display, image-rendering, pointer-events,\n shape-rendering, text-rendering and visibility attributesThe\n browser supports the display and visibility attributesThe\n browser supports the <marker> elementThe browser supports\n the <linearGradient>, <radialGradient> and <stop> elementsThe\n browser supports the <pattern> elementThe browser supports\n the <clipPath> element and the clip-path, clip-rule attributesThe\n browser supports the <clipPath> element and the clip-path\n attributeThe browser supports the <mask> elementThe browser\n supports the <filter>, <feBlend>, <feColorMatrix>, <feComponentTransfer>,\n <feComposite>, <feConvolveMatrix>, <feDiffuseLighting>,\n <feDisplacementMap>, <feFlood>, <feGaussianBlur>, <feImage>,\n <feMerge>, <feMergeNode>, <feMorphology>, <feOffset>,\n <feSpecularLighting>, <feTile>, <feDistantLight>, <fePointLight>,\n <feSpotLight>, <feFuncR>, <feFuncG>, <feFuncB> and <feFuncA>\n elementsThe browser supports the <filter>, <feBlend>,\n <feColorMatrix>, <feComponentTransfer>, <feComposite>,\n <feFlood>, <feGaussianBlur>, <feImage>, <feMerge>, <feMergeNode>,\n <feOffset>, <feTile>, <feFuncR>, <feFuncG>, <feFuncB>\n and <feFuncA> elementsThe browser supports the onunload,\n onabort, onerror, onresize, onscroll and onzoom attributesThe\n browser supports the onfocusin, onfocusout, onactivate,\n onclick, onmousedown, onmouseup, onmouseover, onmousemove,\n onmouseout and onload attributesThe browser supports the\n onbegin, onend, onrepeat and onload attributesThe browser\n supports the <cursor> elementThe browser supports the\n <a> elementThe browser supports the xlink:type, xlink:href,\n xlink:role, xlink:arcrole, xlink:title, xlink:show and\n xlink:actuate attributesThe browser supports the <view>\n elementThe browser supports the <script> elementThe browser\n supports the <animate>, <set>, <animateMotion>, <animateTransform>,\n <animateColor> and <mpath> elementsThe browser supports\n the <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <vkern>, <font-face-src>, <font-face-uri>, <font-face-format>\n and <font-face-name> elementsThe browser supports the\n <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <font-face-src> and <font-face-name> elementsThe browser\n supports the <foreignObject> elementSee also requiredFeatures.svgBCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "shapeRendering": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The shape-rendering attribute provides hints to the renderer\n about what tradeoffs to make when rendering shapes like\n paths, circles, or rectangles.Note: As a presentation\n attribute, shape-rendering can be used as a CSS property.You\n can use this attribute with the following SVG elements:This\n value indicates that the user agent shall make appropriate\n tradeoffs to balance speed, crisp edges and geometric\n precision, but with geometric precision given more importance\n than speed and crisp edges.This value indicates that the\n user agent shall emphasize rendering speed over geometric\n precision and crisp edges. This option will sometimes\n cause the user agent to turn off shape anti-aliasing.This\n value indicates that the user agent shall attempt to emphasize\n the contrast between clean edges of artwork over rendering\n speed and geometric precision. To achieve crisp edges,\n the user agent might turn off anti-aliasing for all lines\n and curves or possibly just for straight lines which are\n close to vertical or horizontal. Also, the user agent\n might adjust line positions and line widths to align edges\n with device pixels.Indicates that the user agent shall\n emphasize geometric precision over speed and crisp edges.BCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "stroke": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "stroke color"
      },
      "strokeDasharray": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-dasharray attribute is a presentation attribute defining\n the pattern of dashes and gaps used to paint the outline\n of the shape;Note: As a presentation attribute, stroke-dasharray\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:A list of comma and/or\n white space separated <length>s and <percentage>s that\n specify the lengths of alternating dashes and gaps.If\n an odd number of values is provided, then the list of\n values is repeated to yield an even number of values.\n Thus, 5,3,2 is equivalent to 5,3,2,5,3,2.BCD tables only\n load in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "strokeDashoffset": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-dashoffset attribute is a presentation attribute defining\n an offset on the rendering of the associated dash array.Note:\n As a presentation attribute stroke-dashoffset can be used\n as a CSS property.You can use this attribute with the\n following SVG elements:The offset is usually expressed\n in user units resolved against the pathLength but if a\n <percentage> is used, the value is resolved as a percentage\n of the current viewport.BCD tables only load in the browser\n with JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "strokeOpacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-opacity attribute is a presentation attribute defining\n the opacity of the paint server (color, gradient, pattern,\n etc) applied to the stroke of a shape.Note: As a presentation\n attribute stroke-opacity can be used as a CSS property.You\n can use this attribute with the following SVG elements:Note:\n SVG2 introduces percentage values for stroke-opacity,\n however, it is not widely supported yet (See Browser compatibility\n below) as a consequence, it is best practices to set opacity\n with a value in the range [0-1].It's important to know\n that the stroke partially covers the fill of a shape,\n so a stroke with an opacity different than 1 will partially\n show the fill underneath. To avoid this effect, it is\n possible to apply a global opacity with the opacity attribute\n or to put the stroke behind the fill with the paint-order\n attribute.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "strokeWidth": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-width attribute is a presentation attribute defining\n the width of the stroke to be applied to the shape.You\n can use this attribute with the following SVG elements:Note:\n A percentage value is always computed as a percentage\n of the normalized viewBox diagonal length.BCD tables only\n load in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "systemLanguage": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The systemLanguage attribute represents a list of supported language\n tags. This list is matched against the language defined\n in the user preferences.You can use this attribute with\n the following SVG elements:The value is a set of comma-separated\n tokens, each of which must be a language tag, as defined\n in RFC 5646: Tags for Identifying Languages (also known\n as BCP 47).systemLanguage is often used in conjunction\n with the <switch> element. If the attribute is used in\n other situations, then it represents a simple switch on\n the given element whether to render the element or not.Note:\n If several alternative language objects are enclosed in\n a <switch> and none of them matches, this may lead to\n situations where no content is displayed. It is thus recommended\n to include a \"catch-all\" choice at the end of such a <switch>\n which is acceptable in all cases.The attribute evaluates\n to \"true\" if one of the language tags indicated by user\n preferences is a case-insensitive match or prefix (followed\n by a \"-\") of one of the language tags given in the value\n of this parameter. Otherwise it evaluates to \"false\".Note:\n The prefix matching rule does not imply that if a user\n understands a language with a certain tag, that the user\n will also understand all languages with the tag as prefix.If\n the attribute is not present, then it implicitly evaluates\n to \"true\". If a null string or empty string value is given,\n the attribute evaluates to \"false\".The prefix rule allows\n the use of prefix tags if this is the case.Multiple languages\n may be listed for content that is intended for multiple\n audiences. For example, content that is presented simultaneously\n in the original Maori and English versions, would call\n for:However, just because multiple languages are present\n within the object on which the systemLanguage test attribute\n is placed, this does not mean that it is intended for\n multiple linguistic audiences. An example would be a beginner's\n language primer, such as \"A First Lesson in Latin,\" which\n is clearly intended to be used by an English-literate\n audience. In this case, the attribute should only include\n en.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "vectorEffect": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The vector-effect property specifies the vector effect to use\n when drawing an object. Vector effects are applied before\n any of the other compositing operations, i.e. filters,\n masks and clips.Note: As a presentation attribute, vector-effect\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:This value specifies that\n no vector effect shall be applied, i.e. the default rendering\n behavior is used which is to first fill the geometry of\n a shape with a specified paint, then stroke the outline\n with a specified paint.This value modifies the way an\n object is stroked. Normally stroking involves calculating\n stroke outline of the shape's path in current user coordinate\n system and filling that outline with the stroke paint\n (color or gradient). The resulting visual effect of this\n value is that the stroke width is not dependent on the\n transformations of the element (including non-uniform\n scaling and shear transformations) and zoom level.This\n value specifies a special user coordinate system used\n by the element and its descendants. The scale of that\n user coordinate system does not change in spite of any\n transformation changes from a host coordinate space. However,\n it does not specify the suppression of rotation and skew.\n Also, it does not specify the origin of the user coordinate\n system. Since this value suppresses scaling of the user\n coordinate system, it also has the characteristics of\n non-scaling-stroke.This value specifies a special user\n coordinate system used by the element and its descendants.\n The rotation and skew of that user coordinate system is\n suppressed in spite of any transformation changes from\n a host coordinate space. However, it does not specify\n the suppression of scaling. Also, it does not specify\n the origin of user coordinate system.This value specifies\n a special user coordinate system used by the element and\n its descendants. The position of user coordinate system\n is fixed in spite of any transformation changes from a\n host coordinate space. However, it does not specify the\n suppression of rotation, skew and scaling. When this vector\n effect and the transform property are defined at the same\n time, that property is consumed for this effect.BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "visibility": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The visibility attribute lets you control the visibility of graphical\n elements. With a value of hidden or collapse the current\n graphics element is invisible.Note: If the visibility\n attribute is set to hidden on a text element, then the\n text is invisible but still takes up space in text layout\n calculations.Depending on the value of attribute pointer-events,\n graphics elements which have their visibility attribute\n set to hidden still might receive events.Note: As a presentation\n attribute, visibility can be used as a CSS property. See\n the css visibility property for more information.You can\n use this attribute with the following SVG elements:The\n following example toggles the CSS visibility of the SVG\n image path.This value indicates that the element will\n be painted.This value indicates that the element will\n not be painted. Though it is still part of the rendering\n tree, i.e. it may receive pointer events depending on\n the pointer-events attribute, may receive focus depending\n on the tabindex attribute, contributes to bounding box\n calculations and clipping paths, and does affect text\n layout.This value is equal to hidden.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/ClipPath.react.js": {
    "description": "ClipPath is a wrapper for the <clipPath> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/clipPath",
    "displayName": "ClipPath",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "clipPathUnits": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The clipPathUnits attribute indicates which coordinate system\n to use for the contents of the <clipPath> element.You\n can use this attribute with the following SVG elements:For\n <clipPath>, clipPathUnits define the coordinate system\n in use for the content of the element.This value indicates\n that all coordinates inside the <clipPath> element refer\n to the user coordinate system as defined when the clipping\n path was created.This value indicates that all coordinates\n inside the <clipPath> element are relative to the bounding\n box of the element the clipping path is applied to. It\n means that the origin of the coordinate system is the\n top left corner of the object bounding box and the width\n and height of the object bounding box are considered to\n have a length of 1 unit value.Last modified: May 13, 2022,\n by MDN contributors"
      },
      "clipPath": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The clip-path presentation attribute defines or associates a\n clipping path with the element it is related to.Note:\n As a presentation attribute clip-path can be used as a\n CSS property.You can use this attribute with the following\n SVG elements:An extra information to tell how a <basic-shape>\n is applied to an element: fill-box indicates to use the\n object bounding box; stroke-box indicates to use the object\n bounding box extended with the stroke; view-box indicates\n to use the nearest SVG viewport as the reference box.Note:\n For more details on the clip-path syntax, see the CSS\n property clip-path reference page.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "colorInterpolation": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation attribute specifies the color space for\n gradient interpolations, color animations, and alpha compositing.Note:\n For filter effects, the color-interpolation-filters property\n controls which color space is used.The color-interpolation\n property chooses between color operations occurring in\n the sRGB color space or in a (light energy linear) linearized\n RGB color space. Having chosen the appropriate color space,\n component-wise linear interpolation is used.When a child\n element is blended into a background, the value of the\n color-interpolation property on the child determines the\n type of blending, not the value of the color-interpolation\n on the parent. For gradients which make use of the href\n or the deprecated xlink:href attribute to reference another\n gradient, the gradient uses the property's value from\n the gradient element which is directly referenced by the\n fill or stroke property. When animating colors, color\n interpolation is performed according to the value of the\n color-interpolation property on the element being animated.Note:\n As a presentation attribute, color-interpolation can be\n used as a CSS property.You can use this attribute with\n the following SVG elements:Indicates that the user agent\n can choose either the sRGB or linearRGB spaces for color\n interpolation. This option indicates that the author doesn't\n require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "mask": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The mask attribute is a presentation attribute mainly used to\n bind a given <mask> element with the element the attribute\n belongs to.Note: As a presentation attribute mask can\n be used as a CSS property.You can use this attribute with\n the following SVG elements:Since SVG2, the mask attribute\n is defined as a css property and is a shorthand for many\n other properties: mask-image, mask-mode, mask-repeat,\n mask-position, mask-clip, mask-origin, mask-size, and\n mask-composite.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "pointerEvents": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The pointer-events attribute is a presentation attribute that\n allows defining whether or when an element may be the\n target of a mouse event.Note: As a presentation attribute\n pointer-events can be used as a CSS property.You can use\n this attribute with the following SVG elements:For a detailed\n explanation of each possible value, have a look at the\n CSS pointer-events documentation.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "requiredFeatures": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The requiredFeatures attribute\n takes a list of feature strings, with the individual strings\n separated by white space. It determines whether or not\n all of the named features are supported by the browser;\n if all of them are supported, the attribute evaluates\n to true end the element is rendered; otherwise, the attribute\n evaluates to false and the current element and its children\n are skipped and thus will not be rendered. This provides\n a way to design SVG that gracefully falls back when features\n aren't available.If the attribute is not present, then\n its implicit evaluated value is true. If a null string\n or empty string value is given to attribute requiredFeatures,\n the attribute is evaluate to false.requiredFeatures is\n often used in conjunction with the <switch> element. If\n requiredFeatures is used in other situations, it represents\n a simple switch on the given element whether to render\n the element or not.To detect availability of an SVG feature\n from script, there is the (also deprecated) DOMImplementation.hasFeature()\n method.You can use this attribute with the following SVG\n elements:This is a list of feature strings, separated\n using white space. Determines whether all of the named\n features are supported by the browser. See Feature strings\n below for a list of allowed values.The following are the\n feature strings for the requiredFeatures attribute. These\n same feature strings apply to the hasFeature method call\n that is part of the SVG DOM's support for the DOMImplementation\n interface. In some cases the feature strings map directly\n to a set of attributes, properties or elements, in others\n they represent some functionality of the browser. Note\n that the format and naming for feature strings changed\n from SVG 1.0 to SVG 1.1. The SVG 1.0 feature strings are\n not listed here but can be found in the SVG Specification.\n Some browser support SVG 1.0 Feature strings for compatibility\n reasons. However, the SVG 1.0 feature strings are considered\n deprecated.At least one of the following feature is supported:At\n least one of the following feature is supported:The browser\n supports all the following features:The browser supports\n all of the DOM interfaces and methods that correspond\n to the language features for http://www.w3.org/TR/SVG11/feature#SVG-static.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-static\n plus the feature http://www.w3.org/TR/SVG11/feature#Animation.The\n browser supports all of the DOM interfaces and methods\n that correspond to the language features for http://www.w3.org/TR/SVG11/feature#SVG-animation.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-animation\n plus the following features:The browser supports all of\n the DOM interfaces and methods that correspond to the\n language features for http://www.w3.org/TR/SVG11/feature#SVG-dynamic.The\n browser supports the id, xml:base, xml:lang and xml:space\n attributesThe browser supports <svg>, <g>, <defs>, <desc>,\n <title>, <metadata>, <symbol> and <use> elements.The browser\n supports <svg>, <g>, <defs>, <desc>, <title>, <metadata>\n and <use> elements.The browser supports the enable-background\n attributeThe browser supports the <switch> element, and\n the requiredFeatures, requiredExtensions, systemLanguage\n attributesThe browser supports the <image> element.The\n browser supports the <style> element.The browser supports\n the clip and overflow attributes.The browser supports\n the <rect>, <circle>, <line>, <polyline>, <polygon>, <ellipse>\n and <path> elements.The browser supports the <text>, <tspan>,\n <tref>, <textPath>, <altGlyph>, <altGlyphDef>, <altGlyphItem>\n and <glyphRef> elements.The browser supports the <text>\n elementThe browser supports the color, fill, fill-rule,\n stroke, stroke-dasharray, stroke-dashoffset, stroke-linecap,\n stroke-linejoin, stroke-miterlimit, stroke-width, color-interpolation\n and color-rendering attributesThe browser supports the\n color, fill, fill-rule, stroke, stroke-dasharray, stroke-dashoffset,\n stroke-linecap, stroke-linejoin, stroke-miterlimit, stroke-width\n and color-rendering attributesThe browser supports the\n opacity, stroke-opacity and fill-opacity attributesThe\n browser supports the display, image-rendering, pointer-events,\n shape-rendering, text-rendering and visibility attributesThe\n browser supports the display and visibility attributesThe\n browser supports the <marker> elementThe browser supports\n the <linearGradient>, <radialGradient> and <stop> elementsThe\n browser supports the <pattern> elementThe browser supports\n the <clipPath> element and the clip-path, clip-rule attributesThe\n browser supports the <clipPath> element and the clip-path\n attributeThe browser supports the <mask> elementThe browser\n supports the <filter>, <feBlend>, <feColorMatrix>, <feComponentTransfer>,\n <feComposite>, <feConvolveMatrix>, <feDiffuseLighting>,\n <feDisplacementMap>, <feFlood>, <feGaussianBlur>, <feImage>,\n <feMerge>, <feMergeNode>, <feMorphology>, <feOffset>,\n <feSpecularLighting>, <feTile>, <feDistantLight>, <fePointLight>,\n <feSpotLight>, <feFuncR>, <feFuncG>, <feFuncB> and <feFuncA>\n elementsThe browser supports the <filter>, <feBlend>,\n <feColorMatrix>, <feComponentTransfer>, <feComposite>,\n <feFlood>, <feGaussianBlur>, <feImage>, <feMerge>, <feMergeNode>,\n <feOffset>, <feTile>, <feFuncR>, <feFuncG>, <feFuncB>\n and <feFuncA> elementsThe browser supports the onunload,\n onabort, onerror, onresize, onscroll and onzoom attributesThe\n browser supports the onfocusin, onfocusout, onactivate,\n onclick, onmousedown, onmouseup, onmouseover, onmousemove,\n onmouseout and onload attributesThe browser supports the\n onbegin, onend, onrepeat and onload attributesThe browser\n supports the <cursor> elementThe browser supports the\n <a> elementThe browser supports the xlink:type, xlink:href,\n xlink:role, xlink:arcrole, xlink:title, xlink:show and\n xlink:actuate attributesThe browser supports the <view>\n elementThe browser supports the <script> elementThe browser\n supports the <animate>, <set>, <animateMotion>, <animateTransform>,\n <animateColor> and <mpath> elementsThe browser supports\n the <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <vkern>, <font-face-src>, <font-face-uri>, <font-face-format>\n and <font-face-name> elementsThe browser supports the\n <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <font-face-src> and <font-face-name> elementsThe browser\n supports the <foreignObject> elementSee also requiredFeatures.svgBCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "systemLanguage": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The systemLanguage attribute represents a list of supported language\n tags. This list is matched against the language defined\n in the user preferences.You can use this attribute with\n the following SVG elements:The value is a set of comma-separated\n tokens, each of which must be a language tag, as defined\n in RFC 5646: Tags for Identifying Languages (also known\n as BCP 47).systemLanguage is often used in conjunction\n with the <switch> element. If the attribute is used in\n other situations, then it represents a simple switch on\n the given element whether to render the element or not.Note:\n If several alternative language objects are enclosed in\n a <switch> and none of them matches, this may lead to\n situations where no content is displayed. It is thus recommended\n to include a \"catch-all\" choice at the end of such a <switch>\n which is acceptable in all cases.The attribute evaluates\n to \"true\" if one of the language tags indicated by user\n preferences is a case-insensitive match or prefix (followed\n by a \"-\") of one of the language tags given in the value\n of this parameter. Otherwise it evaluates to \"false\".Note:\n The prefix matching rule does not imply that if a user\n understands a language with a certain tag, that the user\n will also understand all languages with the tag as prefix.If\n the attribute is not present, then it implicitly evaluates\n to \"true\". If a null string or empty string value is given,\n the attribute evaluates to \"false\".The prefix rule allows\n the use of prefix tags if this is the case.Multiple languages\n may be listed for content that is intended for multiple\n audiences. For example, content that is presented simultaneously\n in the original Maori and English versions, would call\n for:However, just because multiple languages are present\n within the object on which the systemLanguage test attribute\n is placed, this does not mean that it is intended for\n multiple linguistic audiences. An example would be a beginner's\n language primer, such as \"A First Lesson in Latin,\" which\n is clearly intended to be used by an English-literate\n audience. In this case, the attribute should only include\n en.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/Defs.react.js": {
    "description": "Defs is a wrapper for the <defs> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/defs",
    "displayName": "Defs",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "colorInterpolation": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation attribute specifies the color space for\n gradient interpolations, color animations, and alpha compositing.Note:\n For filter effects, the color-interpolation-filters property\n controls which color space is used.The color-interpolation\n property chooses between color operations occurring in\n the sRGB color space or in a (light energy linear) linearized\n RGB color space. Having chosen the appropriate color space,\n component-wise linear interpolation is used.When a child\n element is blended into a background, the value of the\n color-interpolation property on the child determines the\n type of blending, not the value of the color-interpolation\n on the parent. For gradients which make use of the href\n or the deprecated xlink:href attribute to reference another\n gradient, the gradient uses the property's value from\n the gradient element which is directly referenced by the\n fill or stroke property. When animating colors, color\n interpolation is performed according to the value of the\n color-interpolation property on the element being animated.Note:\n As a presentation attribute, color-interpolation can be\n used as a CSS property.You can use this attribute with\n the following SVG elements:Indicates that the user agent\n can choose either the sRGB or linearRGB spaces for color\n interpolation. This option indicates that the author doesn't\n require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "enableBackground": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The enable-background attribute\n specifies how the accumulation of the background image\n is managed.Note: As a presentation attribute, enable-background\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:If an ancestor container\n element has a property value of enable-background: new,\n then all graphics elements within the current container\n element are rendered both onto the parent container element's\n background image canvas and onto the target device.Otherwise,\n there is no current background image canvas, so graphics\n elements are only rendered onto the target device.This\n value enables the ability of children of the current container\n element to access the background image.It also indicates\n that a new (i.e., initially transparent black) background\n image canvas is established and that in effect all children\n of the current container element shall be rendered into\n the new background image canvas in addition to being rendered\n onto the target device.\n      The optional <x>, <y>, <width>,\n and <height> parameters are <number> values that indicate\n the subregion of the container element's user space where\n access to the background image is allowed to happen. Those\n values act as a clipping rectangle on the background image\n canvas.\n      Negative values for <width> or <height>\n are forbidden. If one, two, or three values are specified\n or if neither <width> nor <height> are specified, the\n BackgroundImage and BackgroundAlpha of a filter primitive\n are processed as if background image processing were not\n enabled.\n    BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 17, 2022, by MDN contributors"
      },
      "pointerEvents": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The pointer-events attribute is a presentation attribute that\n allows defining whether or when an element may be the\n target of a mouse event.Note: As a presentation attribute\n pointer-events can be used as a CSS property.You can use\n this attribute with the following SVG elements:For a detailed\n explanation of each possible value, have a look at the\n CSS pointer-events documentation.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "requiredFeatures": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The requiredFeatures attribute\n takes a list of feature strings, with the individual strings\n separated by white space. It determines whether or not\n all of the named features are supported by the browser;\n if all of them are supported, the attribute evaluates\n to true end the element is rendered; otherwise, the attribute\n evaluates to false and the current element and its children\n are skipped and thus will not be rendered. This provides\n a way to design SVG that gracefully falls back when features\n aren't available.If the attribute is not present, then\n its implicit evaluated value is true. If a null string\n or empty string value is given to attribute requiredFeatures,\n the attribute is evaluate to false.requiredFeatures is\n often used in conjunction with the <switch> element. If\n requiredFeatures is used in other situations, it represents\n a simple switch on the given element whether to render\n the element or not.To detect availability of an SVG feature\n from script, there is the (also deprecated) DOMImplementation.hasFeature()\n method.You can use this attribute with the following SVG\n elements:This is a list of feature strings, separated\n using white space. Determines whether all of the named\n features are supported by the browser. See Feature strings\n below for a list of allowed values.The following are the\n feature strings for the requiredFeatures attribute. These\n same feature strings apply to the hasFeature method call\n that is part of the SVG DOM's support for the DOMImplementation\n interface. In some cases the feature strings map directly\n to a set of attributes, properties or elements, in others\n they represent some functionality of the browser. Note\n that the format and naming for feature strings changed\n from SVG 1.0 to SVG 1.1. The SVG 1.0 feature strings are\n not listed here but can be found in the SVG Specification.\n Some browser support SVG 1.0 Feature strings for compatibility\n reasons. However, the SVG 1.0 feature strings are considered\n deprecated.At least one of the following feature is supported:At\n least one of the following feature is supported:The browser\n supports all the following features:The browser supports\n all of the DOM interfaces and methods that correspond\n to the language features for http://www.w3.org/TR/SVG11/feature#SVG-static.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-static\n plus the feature http://www.w3.org/TR/SVG11/feature#Animation.The\n browser supports all of the DOM interfaces and methods\n that correspond to the language features for http://www.w3.org/TR/SVG11/feature#SVG-animation.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-animation\n plus the following features:The browser supports all of\n the DOM interfaces and methods that correspond to the\n language features for http://www.w3.org/TR/SVG11/feature#SVG-dynamic.The\n browser supports the id, xml:base, xml:lang and xml:space\n attributesThe browser supports <svg>, <g>, <defs>, <desc>,\n <title>, <metadata>, <symbol> and <use> elements.The browser\n supports <svg>, <g>, <defs>, <desc>, <title>, <metadata>\n and <use> elements.The browser supports the enable-background\n attributeThe browser supports the <switch> element, and\n the requiredFeatures, requiredExtensions, systemLanguage\n attributesThe browser supports the <image> element.The\n browser supports the <style> element.The browser supports\n the clip and overflow attributes.The browser supports\n the <rect>, <circle>, <line>, <polyline>, <polygon>, <ellipse>\n and <path> elements.The browser supports the <text>, <tspan>,\n <tref>, <textPath>, <altGlyph>, <altGlyphDef>, <altGlyphItem>\n and <glyphRef> elements.The browser supports the <text>\n elementThe browser supports the color, fill, fill-rule,\n stroke, stroke-dasharray, stroke-dashoffset, stroke-linecap,\n stroke-linejoin, stroke-miterlimit, stroke-width, color-interpolation\n and color-rendering attributesThe browser supports the\n color, fill, fill-rule, stroke, stroke-dasharray, stroke-dashoffset,\n stroke-linecap, stroke-linejoin, stroke-miterlimit, stroke-width\n and color-rendering attributesThe browser supports the\n opacity, stroke-opacity and fill-opacity attributesThe\n browser supports the display, image-rendering, pointer-events,\n shape-rendering, text-rendering and visibility attributesThe\n browser supports the display and visibility attributesThe\n browser supports the <marker> elementThe browser supports\n the <linearGradient>, <radialGradient> and <stop> elementsThe\n browser supports the <pattern> elementThe browser supports\n the <clipPath> element and the clip-path, clip-rule attributesThe\n browser supports the <clipPath> element and the clip-path\n attributeThe browser supports the <mask> elementThe browser\n supports the <filter>, <feBlend>, <feColorMatrix>, <feComponentTransfer>,\n <feComposite>, <feConvolveMatrix>, <feDiffuseLighting>,\n <feDisplacementMap>, <feFlood>, <feGaussianBlur>, <feImage>,\n <feMerge>, <feMergeNode>, <feMorphology>, <feOffset>,\n <feSpecularLighting>, <feTile>, <feDistantLight>, <fePointLight>,\n <feSpotLight>, <feFuncR>, <feFuncG>, <feFuncB> and <feFuncA>\n elementsThe browser supports the <filter>, <feBlend>,\n <feColorMatrix>, <feComponentTransfer>, <feComposite>,\n <feFlood>, <feGaussianBlur>, <feImage>, <feMerge>, <feMergeNode>,\n <feOffset>, <feTile>, <feFuncR>, <feFuncG>, <feFuncB>\n and <feFuncA> elementsThe browser supports the onunload,\n onabort, onerror, onresize, onscroll and onzoom attributesThe\n browser supports the onfocusin, onfocusout, onactivate,\n onclick, onmousedown, onmouseup, onmouseover, onmousemove,\n onmouseout and onload attributesThe browser supports the\n onbegin, onend, onrepeat and onload attributesThe browser\n supports the <cursor> elementThe browser supports the\n <a> elementThe browser supports the xlink:type, xlink:href,\n xlink:role, xlink:arcrole, xlink:title, xlink:show and\n xlink:actuate attributesThe browser supports the <view>\n elementThe browser supports the <script> elementThe browser\n supports the <animate>, <set>, <animateMotion>, <animateTransform>,\n <animateColor> and <mpath> elementsThe browser supports\n the <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <vkern>, <font-face-src>, <font-face-uri>, <font-face-format>\n and <font-face-name> elementsThe browser supports the\n <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <font-face-src> and <font-face-name> elementsThe browser\n supports the <foreignObject> elementSee also requiredFeatures.svgBCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "systemLanguage": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The systemLanguage attribute represents a list of supported language\n tags. This list is matched against the language defined\n in the user preferences.You can use this attribute with\n the following SVG elements:The value is a set of comma-separated\n tokens, each of which must be a language tag, as defined\n in RFC 5646: Tags for Identifying Languages (also known\n as BCP 47).systemLanguage is often used in conjunction\n with the <switch> element. If the attribute is used in\n other situations, then it represents a simple switch on\n the given element whether to render the element or not.Note:\n If several alternative language objects are enclosed in\n a <switch> and none of them matches, this may lead to\n situations where no content is displayed. It is thus recommended\n to include a \"catch-all\" choice at the end of such a <switch>\n which is acceptable in all cases.The attribute evaluates\n to \"true\" if one of the language tags indicated by user\n preferences is a case-insensitive match or prefix (followed\n by a \"-\") of one of the language tags given in the value\n of this parameter. Otherwise it evaluates to \"false\".Note:\n The prefix matching rule does not imply that if a user\n understands a language with a certain tag, that the user\n will also understand all languages with the tag as prefix.If\n the attribute is not present, then it implicitly evaluates\n to \"true\". If a null string or empty string value is given,\n the attribute evaluates to \"false\".The prefix rule allows\n the use of prefix tags if this is the case.Multiple languages\n may be listed for content that is intended for multiple\n audiences. For example, content that is presented simultaneously\n in the original Maori and English versions, would call\n for:However, just because multiple languages are present\n within the object on which the systemLanguage test attribute\n is placed, this does not mean that it is intended for\n multiple linguistic audiences. An example would be a beginner's\n language primer, such as \"A First Lesson in Latin,\" which\n is clearly intended to be used by an English-literate\n audience. In this case, the attribute should only include\n en.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/Desc.react.js": {
    "description": "Desc is a wrapper for the <desc> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/desc",
    "displayName": "Desc",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/Ellipse.react.js": {
    "description": "Ellipse is a wrapper for the <ellipse> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/ellipse",
    "displayName": "Ellipse",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "clipPath": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The clip-path presentation attribute defines or associates a\n clipping path with the element it is related to.Note:\n As a presentation attribute clip-path can be used as a\n CSS property.You can use this attribute with the following\n SVG elements:An extra information to tell how a <basic-shape>\n is applied to an element: fill-box indicates to use the\n object bounding box; stroke-box indicates to use the object\n bounding box extended with the stroke; view-box indicates\n to use the nearest SVG viewport as the reference box.Note:\n For more details on the clip-path syntax, see the CSS\n property clip-path reference page.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "colorInterpolation": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation attribute specifies the color space for\n gradient interpolations, color animations, and alpha compositing.Note:\n For filter effects, the color-interpolation-filters property\n controls which color space is used.The color-interpolation\n property chooses between color operations occurring in\n the sRGB color space or in a (light energy linear) linearized\n RGB color space. Having chosen the appropriate color space,\n component-wise linear interpolation is used.When a child\n element is blended into a background, the value of the\n color-interpolation property on the child determines the\n type of blending, not the value of the color-interpolation\n on the parent. For gradients which make use of the href\n or the deprecated xlink:href attribute to reference another\n gradient, the gradient uses the property's value from\n the gradient element which is directly referenced by the\n fill or stroke property. When animating colors, color\n interpolation is performed according to the value of the\n color-interpolation property on the element being animated.Note:\n As a presentation attribute, color-interpolation can be\n used as a CSS property.You can use this attribute with\n the following SVG elements:Indicates that the user agent\n can choose either the sRGB or linearRGB spaces for color\n interpolation. This option indicates that the author doesn't\n require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "cx": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The cx attribute define the x-axis coordinate of a center point.You\n can use this attribute with the following SVG elements:For\n <circle>, cx defines the x-axis coordinate of the center\n of the shape.Note: Starting with SVG2 cx, is a Geometry\n Property, meaning this attribute can also be used as CSS\n property for circles.For <ellipse>, cx defines the x-axis\n coordinate of the center of the shape.Note: Starting with\n SVG2 cx, is a Geometry Property, meaning this attribute\n can also be used as CSS property for ellipses.For <radialGradient>,\n cx defines the x-axis coordinate of the end circle for\n the radial gradient.Last modified: May 13, 2022, by MDN\n contributors"
      },
      "cy": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The cy attribute define the y-axis coordinate of a center point.You\n can use this attribute with the following SVG elements:For\n <circle>, cy defines the y-axis coordinate of the center\n of the shape.Note: Starting with SVG2, cy is a Geometry\n Property meaning this attribute can also be used as a\n CSS property for circles.For <ellipse>, cy defines the\n y-axis coordinate of the center of the shape.Note: Starting\n with SVG2, cy is a Geometry Property meaning this attribute\n can also be used as a CSS property for ellipses.For <radialGradient>,\n cy defines the y-axis coordinate of the end circle for\n the radial gradient.Last modified: May 13, 2022, by MDN\n contributors"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "fillOpacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The fill-opacity attribute is a presentation attribute defining\n the opacity of the paint server (color, gradient, pattern,\n etc) applied to a shape.Note: As a presentation attribute\n fill-opacity can be used as a CSS property.You can use\n this attribute with the following SVG elements:Note: SVG2\n introduces percentage values for fill-opacity, however,\n it is not widely supported yet (See Browser compatibility\n below) as a consequence, it is best practices to set opacity\n with a value in the range [0-1].BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "markerEnd": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The marker-end attribute defines the arrowhead or polymarker\n that will be drawn at the final vertex of the given shape.For\n all shape elements, except <polyline> and <path>, the\n last vertex is the same as the first vertex. In this case,\n if the value of marker-start and marker-end are both not\n none, then two markers will be rendered on that final\n vertex. For <path> elements, for each closed subpath,\n the last vertex is the same as the first vertex. marker-end\n is only rendered on the final vertex of the path data.Note:\n As a presentation attribute, marker-end can be used as\n a CSS property.You can use this attribute with the following\n SVG elements:Indicates that no marker symbol shall be\n drawn at the final vertex.This value is a reference to\n a <marker> element, which will be drawn at the final vertex.\n If the reference is not valid, then no marker will be\n drawn.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 17, 2022, by MDN contributors"
      },
      "markerMid": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The marker-mid attribute defines the arrowhead or polymarker\n that will be drawn at all interior vertices of the given\n shape.The marker is rendered on every vertex other than\n the first and last vertices of the path data.Note: As\n a presentation attribute, marker-mid can be used as a\n CSS property.You can use this attribute with the following\n SVG elements:Indicates that no marker symbol shall be\n drawn at the given vertices.This value is a reference\n to a <marker> element, which will be drawn at the given\n vertices. If the reference is not valid, then no marker\n will be drawn.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 17, 2022, by MDN contributors"
      },
      "markerStart": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The marker-start attribute defines the arrowhead or polymarker\n that will be drawn at the first vertex of the given shape.For\n all shape elements, except <polyline> and <path>, the\n last vertex is the same as the first vertex. In this case,\n if the value of marker-start and marker-end are both not\n none, then two markers will be rendered on that final\n vertex. For <path> elements, for each closed subpath,\n the last vertex is the same as the first vertex. marker-start\n is only rendered on the first vertex of the path data.Note:\n As a presentation attribute, marker-start can be used\n as a CSS property.You can use this attribute with the\n following SVG elements:Indicates that no marker symbol\n shall be drawn at the first vertex.This value is a reference\n to a <marker> element, which will be drawn at the first\n vertex. If the reference is not valid, then no marker\n will be drawn.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 17, 2022, by MDN contributors"
      },
      "mask": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The mask attribute is a presentation attribute mainly used to\n bind a given <mask> element with the element the attribute\n belongs to.Note: As a presentation attribute mask can\n be used as a CSS property.You can use this attribute with\n the following SVG elements:Since SVG2, the mask attribute\n is defined as a css property and is a shorthand for many\n other properties: mask-image, mask-mode, mask-repeat,\n mask-position, mask-clip, mask-origin, mask-size, and\n mask-composite.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "opacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The opacity attribute specifies the transparency of an object\n or of a group of objects, that is, the degree to which\n the background behind the element is overlaid.Note: As\n a presentation attribute, opacity can be used as a CSS\n property. See the css opacity property for more information.You\n can use this attribute with the following SVG elements:The\n uniform opacity setting to be applied across an entire\n object, as a <number>. Any values outside the range 0.0\n (fully transparent) to 1.0 (fully opaque) will be clamped\n to this range.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "paintOrder": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The paint-order attribute specifies the order that the fill,\n stroke, and markers of a given shape or text element are\n painted.Note: As a presentation attribute, paint-order\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:This value indicates that\n the fill will be painted first, then the stroke, and finally\n the markers.The order of these three keywords indicates\n the order in which the painting happens, from left to\n right. If any of the three painting components is omitted,\n they will be painted in their default order after the\n specified components. For example, using stroke is equivalent\n to stroke fill markers.The example would be rendered as\n follows:\n  \nThe stroke under effect could be achieved\n via the following CSS property:BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "pathLength": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The pathLength attribute lets authors specify a total length\n for the path, in user units. This value is then used to\n calibrate the browser's distance calculations with those\n of the author, by scaling all distance computations using\n the ratio pathLength/(computed value of path length).This\n can affect the actual rendered lengths of paths; including\n text paths, animation paths, and various stroke operations.\n Basically, all computations that require the length of\n the path. stroke-dasharray, for example, will assume the\n start of the path being 0 and the end point the value\n defined in the pathLength attribute.You can use this attribute\n with the following SVG elements:For <circle>, pathLength\n lets authors specify a total length for the circle, in\n user units.For <ellipse>, pathLength lets authors specify\n a total length for the ellipse, in user units.For <line>,\n pathLength lets authors specify a total length for the\n line, in user units.For <path>, pathLength lets authors\n specify a total length for the path, in user units.For\n <polygon>, pathLength lets authors specify a total length\n for the shape, in user units.For <polyline>, pathLength\n lets authors specify a total length for the shape, in\n user units.For <rect>, pathLength lets authors specify\n a total length for the rectangle, in user units.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "pointerEvents": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The pointer-events attribute is a presentation attribute that\n allows defining whether or when an element may be the\n target of a mouse event.Note: As a presentation attribute\n pointer-events can be used as a CSS property.You can use\n this attribute with the following SVG elements:For a detailed\n explanation of each possible value, have a look at the\n CSS pointer-events documentation.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "requiredFeatures": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The requiredFeatures attribute\n takes a list of feature strings, with the individual strings\n separated by white space. It determines whether or not\n all of the named features are supported by the browser;\n if all of them are supported, the attribute evaluates\n to true end the element is rendered; otherwise, the attribute\n evaluates to false and the current element and its children\n are skipped and thus will not be rendered. This provides\n a way to design SVG that gracefully falls back when features\n aren't available.If the attribute is not present, then\n its implicit evaluated value is true. If a null string\n or empty string value is given to attribute requiredFeatures,\n the attribute is evaluate to false.requiredFeatures is\n often used in conjunction with the <switch> element. If\n requiredFeatures is used in other situations, it represents\n a simple switch on the given element whether to render\n the element or not.To detect availability of an SVG feature\n from script, there is the (also deprecated) DOMImplementation.hasFeature()\n method.You can use this attribute with the following SVG\n elements:This is a list of feature strings, separated\n using white space. Determines whether all of the named\n features are supported by the browser. See Feature strings\n below for a list of allowed values.The following are the\n feature strings for the requiredFeatures attribute. These\n same feature strings apply to the hasFeature method call\n that is part of the SVG DOM's support for the DOMImplementation\n interface. In some cases the feature strings map directly\n to a set of attributes, properties or elements, in others\n they represent some functionality of the browser. Note\n that the format and naming for feature strings changed\n from SVG 1.0 to SVG 1.1. The SVG 1.0 feature strings are\n not listed here but can be found in the SVG Specification.\n Some browser support SVG 1.0 Feature strings for compatibility\n reasons. However, the SVG 1.0 feature strings are considered\n deprecated.At least one of the following feature is supported:At\n least one of the following feature is supported:The browser\n supports all the following features:The browser supports\n all of the DOM interfaces and methods that correspond\n to the language features for http://www.w3.org/TR/SVG11/feature#SVG-static.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-static\n plus the feature http://www.w3.org/TR/SVG11/feature#Animation.The\n browser supports all of the DOM interfaces and methods\n that correspond to the language features for http://www.w3.org/TR/SVG11/feature#SVG-animation.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-animation\n plus the following features:The browser supports all of\n the DOM interfaces and methods that correspond to the\n language features for http://www.w3.org/TR/SVG11/feature#SVG-dynamic.The\n browser supports the id, xml:base, xml:lang and xml:space\n attributesThe browser supports <svg>, <g>, <defs>, <desc>,\n <title>, <metadata>, <symbol> and <use> elements.The browser\n supports <svg>, <g>, <defs>, <desc>, <title>, <metadata>\n and <use> elements.The browser supports the enable-background\n attributeThe browser supports the <switch> element, and\n the requiredFeatures, requiredExtensions, systemLanguage\n attributesThe browser supports the <image> element.The\n browser supports the <style> element.The browser supports\n the clip and overflow attributes.The browser supports\n the <rect>, <circle>, <line>, <polyline>, <polygon>, <ellipse>\n and <path> elements.The browser supports the <text>, <tspan>,\n <tref>, <textPath>, <altGlyph>, <altGlyphDef>, <altGlyphItem>\n and <glyphRef> elements.The browser supports the <text>\n elementThe browser supports the color, fill, fill-rule,\n stroke, stroke-dasharray, stroke-dashoffset, stroke-linecap,\n stroke-linejoin, stroke-miterlimit, stroke-width, color-interpolation\n and color-rendering attributesThe browser supports the\n color, fill, fill-rule, stroke, stroke-dasharray, stroke-dashoffset,\n stroke-linecap, stroke-linejoin, stroke-miterlimit, stroke-width\n and color-rendering attributesThe browser supports the\n opacity, stroke-opacity and fill-opacity attributesThe\n browser supports the display, image-rendering, pointer-events,\n shape-rendering, text-rendering and visibility attributesThe\n browser supports the display and visibility attributesThe\n browser supports the <marker> elementThe browser supports\n the <linearGradient>, <radialGradient> and <stop> elementsThe\n browser supports the <pattern> elementThe browser supports\n the <clipPath> element and the clip-path, clip-rule attributesThe\n browser supports the <clipPath> element and the clip-path\n attributeThe browser supports the <mask> elementThe browser\n supports the <filter>, <feBlend>, <feColorMatrix>, <feComponentTransfer>,\n <feComposite>, <feConvolveMatrix>, <feDiffuseLighting>,\n <feDisplacementMap>, <feFlood>, <feGaussianBlur>, <feImage>,\n <feMerge>, <feMergeNode>, <feMorphology>, <feOffset>,\n <feSpecularLighting>, <feTile>, <feDistantLight>, <fePointLight>,\n <feSpotLight>, <feFuncR>, <feFuncG>, <feFuncB> and <feFuncA>\n elementsThe browser supports the <filter>, <feBlend>,\n <feColorMatrix>, <feComponentTransfer>, <feComposite>,\n <feFlood>, <feGaussianBlur>, <feImage>, <feMerge>, <feMergeNode>,\n <feOffset>, <feTile>, <feFuncR>, <feFuncG>, <feFuncB>\n and <feFuncA> elementsThe browser supports the onunload,\n onabort, onerror, onresize, onscroll and onzoom attributesThe\n browser supports the onfocusin, onfocusout, onactivate,\n onclick, onmousedown, onmouseup, onmouseover, onmousemove,\n onmouseout and onload attributesThe browser supports the\n onbegin, onend, onrepeat and onload attributesThe browser\n supports the <cursor> elementThe browser supports the\n <a> elementThe browser supports the xlink:type, xlink:href,\n xlink:role, xlink:arcrole, xlink:title, xlink:show and\n xlink:actuate attributesThe browser supports the <view>\n elementThe browser supports the <script> elementThe browser\n supports the <animate>, <set>, <animateMotion>, <animateTransform>,\n <animateColor> and <mpath> elementsThe browser supports\n the <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <vkern>, <font-face-src>, <font-face-uri>, <font-face-format>\n and <font-face-name> elementsThe browser supports the\n <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <font-face-src> and <font-face-name> elementsThe browser\n supports the <foreignObject> elementSee also requiredFeatures.svgBCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "rx": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x border radius"
      },
      "ry": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y border radius"
      },
      "shapeRendering": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The shape-rendering attribute provides hints to the renderer\n about what tradeoffs to make when rendering shapes like\n paths, circles, or rectangles.Note: As a presentation\n attribute, shape-rendering can be used as a CSS property.You\n can use this attribute with the following SVG elements:This\n value indicates that the user agent shall make appropriate\n tradeoffs to balance speed, crisp edges and geometric\n precision, but with geometric precision given more importance\n than speed and crisp edges.This value indicates that the\n user agent shall emphasize rendering speed over geometric\n precision and crisp edges. This option will sometimes\n cause the user agent to turn off shape anti-aliasing.This\n value indicates that the user agent shall attempt to emphasize\n the contrast between clean edges of artwork over rendering\n speed and geometric precision. To achieve crisp edges,\n the user agent might turn off anti-aliasing for all lines\n and curves or possibly just for straight lines which are\n close to vertical or horizontal. Also, the user agent\n might adjust line positions and line widths to align edges\n with device pixels.Indicates that the user agent shall\n emphasize geometric precision over speed and crisp edges.BCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "stroke": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "stroke color"
      },
      "strokeDasharray": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-dasharray attribute is a presentation attribute defining\n the pattern of dashes and gaps used to paint the outline\n of the shape;Note: As a presentation attribute, stroke-dasharray\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:A list of comma and/or\n white space separated <length>s and <percentage>s that\n specify the lengths of alternating dashes and gaps.If\n an odd number of values is provided, then the list of\n values is repeated to yield an even number of values.\n Thus, 5,3,2 is equivalent to 5,3,2,5,3,2.BCD tables only\n load in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "strokeDashoffset": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-dashoffset attribute is a presentation attribute defining\n an offset on the rendering of the associated dash array.Note:\n As a presentation attribute stroke-dashoffset can be used\n as a CSS property.You can use this attribute with the\n following SVG elements:The offset is usually expressed\n in user units resolved against the pathLength but if a\n <percentage> is used, the value is resolved as a percentage\n of the current viewport.BCD tables only load in the browser\n with JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "strokeOpacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-opacity attribute is a presentation attribute defining\n the opacity of the paint server (color, gradient, pattern,\n etc) applied to the stroke of a shape.Note: As a presentation\n attribute stroke-opacity can be used as a CSS property.You\n can use this attribute with the following SVG elements:Note:\n SVG2 introduces percentage values for stroke-opacity,\n however, it is not widely supported yet (See Browser compatibility\n below) as a consequence, it is best practices to set opacity\n with a value in the range [0-1].It's important to know\n that the stroke partially covers the fill of a shape,\n so a stroke with an opacity different than 1 will partially\n show the fill underneath. To avoid this effect, it is\n possible to apply a global opacity with the opacity attribute\n or to put the stroke behind the fill with the paint-order\n attribute.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "strokeWidth": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-width attribute is a presentation attribute defining\n the width of the stroke to be applied to the shape.You\n can use this attribute with the following SVG elements:Note:\n A percentage value is always computed as a percentage\n of the normalized viewBox diagonal length.BCD tables only\n load in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "systemLanguage": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The systemLanguage attribute represents a list of supported language\n tags. This list is matched against the language defined\n in the user preferences.You can use this attribute with\n the following SVG elements:The value is a set of comma-separated\n tokens, each of which must be a language tag, as defined\n in RFC 5646: Tags for Identifying Languages (also known\n as BCP 47).systemLanguage is often used in conjunction\n with the <switch> element. If the attribute is used in\n other situations, then it represents a simple switch on\n the given element whether to render the element or not.Note:\n If several alternative language objects are enclosed in\n a <switch> and none of them matches, this may lead to\n situations where no content is displayed. It is thus recommended\n to include a \"catch-all\" choice at the end of such a <switch>\n which is acceptable in all cases.The attribute evaluates\n to \"true\" if one of the language tags indicated by user\n preferences is a case-insensitive match or prefix (followed\n by a \"-\") of one of the language tags given in the value\n of this parameter. Otherwise it evaluates to \"false\".Note:\n The prefix matching rule does not imply that if a user\n understands a language with a certain tag, that the user\n will also understand all languages with the tag as prefix.If\n the attribute is not present, then it implicitly evaluates\n to \"true\". If a null string or empty string value is given,\n the attribute evaluates to \"false\".The prefix rule allows\n the use of prefix tags if this is the case.Multiple languages\n may be listed for content that is intended for multiple\n audiences. For example, content that is presented simultaneously\n in the original Maori and English versions, would call\n for:However, just because multiple languages are present\n within the object on which the systemLanguage test attribute\n is placed, this does not mean that it is intended for\n multiple linguistic audiences. An example would be a beginner's\n language primer, such as \"A First Lesson in Latin,\" which\n is clearly intended to be used by an English-literate\n audience. In this case, the attribute should only include\n en.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "vectorEffect": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The vector-effect property specifies the vector effect to use\n when drawing an object. Vector effects are applied before\n any of the other compositing operations, i.e. filters,\n masks and clips.Note: As a presentation attribute, vector-effect\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:This value specifies that\n no vector effect shall be applied, i.e. the default rendering\n behavior is used which is to first fill the geometry of\n a shape with a specified paint, then stroke the outline\n with a specified paint.This value modifies the way an\n object is stroked. Normally stroking involves calculating\n stroke outline of the shape's path in current user coordinate\n system and filling that outline with the stroke paint\n (color or gradient). The resulting visual effect of this\n value is that the stroke width is not dependent on the\n transformations of the element (including non-uniform\n scaling and shear transformations) and zoom level.This\n value specifies a special user coordinate system used\n by the element and its descendants. The scale of that\n user coordinate system does not change in spite of any\n transformation changes from a host coordinate space. However,\n it does not specify the suppression of rotation and skew.\n Also, it does not specify the origin of the user coordinate\n system. Since this value suppresses scaling of the user\n coordinate system, it also has the characteristics of\n non-scaling-stroke.This value specifies a special user\n coordinate system used by the element and its descendants.\n The rotation and skew of that user coordinate system is\n suppressed in spite of any transformation changes from\n a host coordinate space. However, it does not specify\n the suppression of scaling. Also, it does not specify\n the origin of user coordinate system.This value specifies\n a special user coordinate system used by the element and\n its descendants. The position of user coordinate system\n is fixed in spite of any transformation changes from a\n host coordinate space. However, it does not specify the\n suppression of rotation, skew and scaling. When this vector\n effect and the transform property are defined at the same\n time, that property is consumed for this effect.BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "visibility": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The visibility attribute lets you control the visibility of graphical\n elements. With a value of hidden or collapse the current\n graphics element is invisible.Note: If the visibility\n attribute is set to hidden on a text element, then the\n text is invisible but still takes up space in text layout\n calculations.Depending on the value of attribute pointer-events,\n graphics elements which have their visibility attribute\n set to hidden still might receive events.Note: As a presentation\n attribute, visibility can be used as a CSS property. See\n the css visibility property for more information.You can\n use this attribute with the following SVG elements:The\n following example toggles the CSS visibility of the SVG\n image path.This value indicates that the element will\n be painted.This value indicates that the element will\n not be painted. Though it is still part of the rendering\n tree, i.e. it may receive pointer events depending on\n the pointer-events attribute, may receive focus depending\n on the tabindex attribute, contributes to bounding box\n calculations and clipping paths, and does affect text\n layout.This value is equal to hidden.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/FeBlend.react.js": {
    "description": "FeBlend is a wrapper for the <feBlend> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/feBlend",
    "displayName": "FeBlend",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "colorInterpolationFilters": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"auto\"",
              "computed": false
            },
            {
              "value": "\"inherit\"",
              "computed": false
            },
            {
              "value": "\"linearRGB\"",
              "computed": false
            },
            {
              "value": "\"sRGB\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation-filters attribute specifies the color\n space for imaging operations performed via filter effects.Note:\n This property just has an affect on filter operations.\n Therefore, it has no effect on filter primitives like\n <feOffset>, <feImage>, <feTile> or <feFlood>.color-interpolation-filters\n has a different initial value than color-interpolation.\n color-interpolation-filters has an initial value of linearRGB,\n whereas color-interpolation has an initial value of sRGB.\n Thus, in the default case, filter effects operations occur\n in the linearRGB color space, whereas all other color\n interpolations occur by default in the sRGB color space.It\n has no affect on filter functions, which operate in the\n sRGB color space.Note: As a presentation attribute, color-interpolation-filters\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:Indicates that the user\n agent can choose either the sRGB or linearRGB spaces for\n color interpolation. This option indicates that the author\n doesn't require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "in": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The in attribute identifies input for the given filter primitive.The\n value can be either one of the six keywords defined below,\n or a string which matches a previous result attribute\n value within the same <filter> element. If no value is\n provided and this is the first filter primitive, then\n this filter primitive will use SourceGraphic as its input.\n If no value is provided and this is a subsequent filter\n primitive, then this filter primitive will use the result\n from the previous filter primitive as its input.If the\n value for result appears multiple times within a given\n <filter> element, then a reference to that result will\n use the closest preceding filter primitive with the given\n value for attribute result.You can use this attribute\n with the following SVG elements:This keyword represents\n the graphics elements that were the original input into\n the <filter> element.This keyword represents the graphics\n elements that were the original input into the <filter>\n element. SourceAlpha has all of the same rules as SourceGraphic\n except that only the alpha channel is used.This keyword\n represents an image snapshot of the SVG document under\n the filter region at the time that the <filter> element\n was invoked.Same as BackgroundImage except only the alpha\n channel is used.This keyword represents the value of the\n fill property on the target element for the filter effect.\n In many cases, the FillPaint is opaque everywhere, but\n that might not be the case if a shape is painted with\n a gradient or pattern which itself includes transparent\n or semi-transparent parts.This keyword represents the\n value of the stroke property on the target element for\n the filter effect. In many cases, the StrokePaint is opaque\n everywhere, but that might not be the case if a shape\n is painted with a gradient or pattern which itself includes\n transparent or semi-transparent parts.This value is an\n assigned name for the filter primitive in the form of\n a <custom-ident>. If supplied, then graphics that result\n from processing this filter primitive can be referenced\n by an in attribute on a subsequent filter primitive within\n the same filter element. If no value is provided, the\n output will only be available for re-use as the implicit\n input into the next filter primitive if that filter primitive\n provides no value for its in attribute.BackgroundImage\n is not supported as a filter source in modern browsers\n (see the feComposite compatibility table). We therefore\n need to import one of the images to blend inside the filter\n itself, using an <feImage> element.Note: Firefox Bug 455986\n means that feImage cannot load partial images, including\n circles, rectangles, paths or other fragments defined\n in the document. So that this example works on more browsers,\n a full external image of the logo is loaded.Last modified:\n Jul 1, 2022, by MDN contributors"
      },
      "in2": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The in2 attribute identifies the second input for the given filter\n primitive. It works exactly like the in attribute.You\n can use this attribute with the following SVG elements:For\n <feBlend>, in2 defines the second input image to the blending\n operation.For <feComposite>, in2 defines the second input\n image to the compositing operation.For <feDisplacementMap>,\n in2 defines the second input image, which is used to displace\n the pixels in the image defined in the in attribute.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "mode": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The mode attribute defines the blending mode on the <feBlend>\n filter primitive.You can use this attribute with the following\n SVG elements:For a description of the values, see <blend-mode>.BCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "result": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The result attribute defines the assigned name for this filter\n primitive. If supplied, then graphics that result from\n processing this filter primitive can be referenced by\n an in attribute on a subsequent filter primitive within\n the same <filter> element. If no value is provided, the\n output will only be available for re-use as the implicit\n input into the next filter primitive if that filter primitive\n provides no value for its in attribute.You can use this\n attribute with the following SVG elements:This value is\n a <custom-ident> and defines the name for the filter primitive.\n It is only meaningful within a given <filter> element\n and thus has only local scope. It is legal for the same\n <filter-primitive-reference> to appear multiple times\n within the same <filter> element. When referenced, this\n value will use the closest preceding filter primitive\n with the given result.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/FeColorMatrix.react.js": {
    "description": "FeColorMatrix is a wrapper for the <feColorMatrix> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/feColorMatrix",
    "displayName": "FeColorMatrix",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "colorInterpolationFilters": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"auto\"",
              "computed": false
            },
            {
              "value": "\"inherit\"",
              "computed": false
            },
            {
              "value": "\"linearRGB\"",
              "computed": false
            },
            {
              "value": "\"sRGB\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation-filters attribute specifies the color\n space for imaging operations performed via filter effects.Note:\n This property just has an affect on filter operations.\n Therefore, it has no effect on filter primitives like\n <feOffset>, <feImage>, <feTile> or <feFlood>.color-interpolation-filters\n has a different initial value than color-interpolation.\n color-interpolation-filters has an initial value of linearRGB,\n whereas color-interpolation has an initial value of sRGB.\n Thus, in the default case, filter effects operations occur\n in the linearRGB color space, whereas all other color\n interpolations occur by default in the sRGB color space.It\n has no affect on filter functions, which operate in the\n sRGB color space.Note: As a presentation attribute, color-interpolation-filters\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:Indicates that the user\n agent can choose either the sRGB or linearRGB spaces for\n color interpolation. This option indicates that the author\n doesn't require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "in": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The in attribute identifies input for the given filter primitive.The\n value can be either one of the six keywords defined below,\n or a string which matches a previous result attribute\n value within the same <filter> element. If no value is\n provided and this is the first filter primitive, then\n this filter primitive will use SourceGraphic as its input.\n If no value is provided and this is a subsequent filter\n primitive, then this filter primitive will use the result\n from the previous filter primitive as its input.If the\n value for result appears multiple times within a given\n <filter> element, then a reference to that result will\n use the closest preceding filter primitive with the given\n value for attribute result.You can use this attribute\n with the following SVG elements:This keyword represents\n the graphics elements that were the original input into\n the <filter> element.This keyword represents the graphics\n elements that were the original input into the <filter>\n element. SourceAlpha has all of the same rules as SourceGraphic\n except that only the alpha channel is used.This keyword\n represents an image snapshot of the SVG document under\n the filter region at the time that the <filter> element\n was invoked.Same as BackgroundImage except only the alpha\n channel is used.This keyword represents the value of the\n fill property on the target element for the filter effect.\n In many cases, the FillPaint is opaque everywhere, but\n that might not be the case if a shape is painted with\n a gradient or pattern which itself includes transparent\n or semi-transparent parts.This keyword represents the\n value of the stroke property on the target element for\n the filter effect. In many cases, the StrokePaint is opaque\n everywhere, but that might not be the case if a shape\n is painted with a gradient or pattern which itself includes\n transparent or semi-transparent parts.This value is an\n assigned name for the filter primitive in the form of\n a <custom-ident>. If supplied, then graphics that result\n from processing this filter primitive can be referenced\n by an in attribute on a subsequent filter primitive within\n the same filter element. If no value is provided, the\n output will only be available for re-use as the implicit\n input into the next filter primitive if that filter primitive\n provides no value for its in attribute.BackgroundImage\n is not supported as a filter source in modern browsers\n (see the feComposite compatibility table). We therefore\n need to import one of the images to blend inside the filter\n itself, using an <feImage> element.Note: Firefox Bug 455986\n means that feImage cannot load partial images, including\n circles, rectangles, paths or other fragments defined\n in the document. So that this example works on more browsers,\n a full external image of the logo is loaded.Last modified:\n Jul 1, 2022, by MDN contributors"
      },
      "result": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The result attribute defines the assigned name for this filter\n primitive. If supplied, then graphics that result from\n processing this filter primitive can be referenced by\n an in attribute on a subsequent filter primitive within\n the same <filter> element. If no value is provided, the\n output will only be available for re-use as the implicit\n input into the next filter primitive if that filter primitive\n provides no value for its in attribute.You can use this\n attribute with the following SVG elements:This value is\n a <custom-ident> and defines the name for the filter primitive.\n It is only meaningful within a given <filter> element\n and thus has only local scope. It is legal for the same\n <filter-primitive-reference> to appear multiple times\n within the same <filter> element. When referenced, this\n value will use the closest preceding filter primitive\n with the given result.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "values": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The values attribute has different meanings, depending upon the\n context where it's used, either it defines a sequence\n of values used over the course of an animation, or it's\n a list of numbers for a color matrix, which is interpreted\n differently depending on the type of color change to be\n performed.You can use this attribute with the following\n SVG elements:For <animate>, <animateColor>, <animateMotion>,\n and <animateTransform>, values is a list of values defining\n the sequence of values over the course of the animation.\n If this attribute is specified, any from, to, and by attribute\n values set on the element are ignored.The value holds\n a semicolon-separated list of one or more values. The\n type of the values is defined by the href and attributeName\n attributes.For the <feColorMatrix> element, values is\n a list of numbers interpreted differently depending on\n the value of the type attribute.The value is a list of\n numbers, which is interpreted differently depending on\n the value of the type attribute:Last modified: Jul 10,\n 2022, by MDN contributors"
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/FeComponentTransfer.react.js": {
    "description": "FeComponentTransfer is a wrapper for the <feComponentTransfer> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/feComponentTransfer",
    "displayName": "FeComponentTransfer",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "colorInterpolationFilters": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"auto\"",
              "computed": false
            },
            {
              "value": "\"inherit\"",
              "computed": false
            },
            {
              "value": "\"linearRGB\"",
              "computed": false
            },
            {
              "value": "\"sRGB\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation-filters attribute specifies the color\n space for imaging operations performed via filter effects.Note:\n This property just has an affect on filter operations.\n Therefore, it has no effect on filter primitives like\n <feOffset>, <feImage>, <feTile> or <feFlood>.color-interpolation-filters\n has a different initial value than color-interpolation.\n color-interpolation-filters has an initial value of linearRGB,\n whereas color-interpolation has an initial value of sRGB.\n Thus, in the default case, filter effects operations occur\n in the linearRGB color space, whereas all other color\n interpolations occur by default in the sRGB color space.It\n has no affect on filter functions, which operate in the\n sRGB color space.Note: As a presentation attribute, color-interpolation-filters\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:Indicates that the user\n agent can choose either the sRGB or linearRGB spaces for\n color interpolation. This option indicates that the author\n doesn't require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "in": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The in attribute identifies input for the given filter primitive.The\n value can be either one of the six keywords defined below,\n or a string which matches a previous result attribute\n value within the same <filter> element. If no value is\n provided and this is the first filter primitive, then\n this filter primitive will use SourceGraphic as its input.\n If no value is provided and this is a subsequent filter\n primitive, then this filter primitive will use the result\n from the previous filter primitive as its input.If the\n value for result appears multiple times within a given\n <filter> element, then a reference to that result will\n use the closest preceding filter primitive with the given\n value for attribute result.You can use this attribute\n with the following SVG elements:This keyword represents\n the graphics elements that were the original input into\n the <filter> element.This keyword represents the graphics\n elements that were the original input into the <filter>\n element. SourceAlpha has all of the same rules as SourceGraphic\n except that only the alpha channel is used.This keyword\n represents an image snapshot of the SVG document under\n the filter region at the time that the <filter> element\n was invoked.Same as BackgroundImage except only the alpha\n channel is used.This keyword represents the value of the\n fill property on the target element for the filter effect.\n In many cases, the FillPaint is opaque everywhere, but\n that might not be the case if a shape is painted with\n a gradient or pattern which itself includes transparent\n or semi-transparent parts.This keyword represents the\n value of the stroke property on the target element for\n the filter effect. In many cases, the StrokePaint is opaque\n everywhere, but that might not be the case if a shape\n is painted with a gradient or pattern which itself includes\n transparent or semi-transparent parts.This value is an\n assigned name for the filter primitive in the form of\n a <custom-ident>. If supplied, then graphics that result\n from processing this filter primitive can be referenced\n by an in attribute on a subsequent filter primitive within\n the same filter element. If no value is provided, the\n output will only be available for re-use as the implicit\n input into the next filter primitive if that filter primitive\n provides no value for its in attribute.BackgroundImage\n is not supported as a filter source in modern browsers\n (see the feComposite compatibility table). We therefore\n need to import one of the images to blend inside the filter\n itself, using an <feImage> element.Note: Firefox Bug 455986\n means that feImage cannot load partial images, including\n circles, rectangles, paths or other fragments defined\n in the document. So that this example works on more browsers,\n a full external image of the logo is loaded.Last modified:\n Jul 1, 2022, by MDN contributors"
      },
      "result": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The result attribute defines the assigned name for this filter\n primitive. If supplied, then graphics that result from\n processing this filter primitive can be referenced by\n an in attribute on a subsequent filter primitive within\n the same <filter> element. If no value is provided, the\n output will only be available for re-use as the implicit\n input into the next filter primitive if that filter primitive\n provides no value for its in attribute.You can use this\n attribute with the following SVG elements:This value is\n a <custom-ident> and defines the name for the filter primitive.\n It is only meaningful within a given <filter> element\n and thus has only local scope. It is legal for the same\n <filter-primitive-reference> to appear multiple times\n within the same <filter> element. When referenced, this\n value will use the closest preceding filter primitive\n with the given result.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/FeComposite.react.js": {
    "description": "FeComposite is a wrapper for the <feComposite> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/feComposite",
    "displayName": "FeComposite",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "colorInterpolationFilters": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"auto\"",
              "computed": false
            },
            {
              "value": "\"inherit\"",
              "computed": false
            },
            {
              "value": "\"linearRGB\"",
              "computed": false
            },
            {
              "value": "\"sRGB\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation-filters attribute specifies the color\n space for imaging operations performed via filter effects.Note:\n This property just has an affect on filter operations.\n Therefore, it has no effect on filter primitives like\n <feOffset>, <feImage>, <feTile> or <feFlood>.color-interpolation-filters\n has a different initial value than color-interpolation.\n color-interpolation-filters has an initial value of linearRGB,\n whereas color-interpolation has an initial value of sRGB.\n Thus, in the default case, filter effects operations occur\n in the linearRGB color space, whereas all other color\n interpolations occur by default in the sRGB color space.It\n has no affect on filter functions, which operate in the\n sRGB color space.Note: As a presentation attribute, color-interpolation-filters\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:Indicates that the user\n agent can choose either the sRGB or linearRGB spaces for\n color interpolation. This option indicates that the author\n doesn't require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "in": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The in attribute identifies input for the given filter primitive.The\n value can be either one of the six keywords defined below,\n or a string which matches a previous result attribute\n value within the same <filter> element. If no value is\n provided and this is the first filter primitive, then\n this filter primitive will use SourceGraphic as its input.\n If no value is provided and this is a subsequent filter\n primitive, then this filter primitive will use the result\n from the previous filter primitive as its input.If the\n value for result appears multiple times within a given\n <filter> element, then a reference to that result will\n use the closest preceding filter primitive with the given\n value for attribute result.You can use this attribute\n with the following SVG elements:This keyword represents\n the graphics elements that were the original input into\n the <filter> element.This keyword represents the graphics\n elements that were the original input into the <filter>\n element. SourceAlpha has all of the same rules as SourceGraphic\n except that only the alpha channel is used.This keyword\n represents an image snapshot of the SVG document under\n the filter region at the time that the <filter> element\n was invoked.Same as BackgroundImage except only the alpha\n channel is used.This keyword represents the value of the\n fill property on the target element for the filter effect.\n In many cases, the FillPaint is opaque everywhere, but\n that might not be the case if a shape is painted with\n a gradient or pattern which itself includes transparent\n or semi-transparent parts.This keyword represents the\n value of the stroke property on the target element for\n the filter effect. In many cases, the StrokePaint is opaque\n everywhere, but that might not be the case if a shape\n is painted with a gradient or pattern which itself includes\n transparent or semi-transparent parts.This value is an\n assigned name for the filter primitive in the form of\n a <custom-ident>. If supplied, then graphics that result\n from processing this filter primitive can be referenced\n by an in attribute on a subsequent filter primitive within\n the same filter element. If no value is provided, the\n output will only be available for re-use as the implicit\n input into the next filter primitive if that filter primitive\n provides no value for its in attribute.BackgroundImage\n is not supported as a filter source in modern browsers\n (see the feComposite compatibility table). We therefore\n need to import one of the images to blend inside the filter\n itself, using an <feImage> element.Note: Firefox Bug 455986\n means that feImage cannot load partial images, including\n circles, rectangles, paths or other fragments defined\n in the document. So that this example works on more browsers,\n a full external image of the logo is loaded.Last modified:\n Jul 1, 2022, by MDN contributors"
      },
      "in2": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The in2 attribute identifies the second input for the given filter\n primitive. It works exactly like the in attribute.You\n can use this attribute with the following SVG elements:For\n <feBlend>, in2 defines the second input image to the blending\n operation.For <feComposite>, in2 defines the second input\n image to the compositing operation.For <feDisplacementMap>,\n in2 defines the second input image, which is used to displace\n the pixels in the image defined in the in attribute.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "k1": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The k1 attribute defines one of the values to be used within\n the arithmetic operation of the <feComposite> filter primitive.The\n pixel composition is computed using the following formula:You\n can use this attribute with the following SVG elements:BCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "k2": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The k2 attribute defines one of the values to be used within\n the arithmetic operation of the <feComposite> filter primitive.The\n pixel composition is computed using the following formula:You\n can use this attribute with the following SVG elements:BCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "k3": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The k3 attribute defines one of the values to be used within\n the arithmetic operation of the <feComposite> filter primitive.The\n pixel composition is computed using the following formula:You\n can use this attribute with the following SVG elements:BCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "k4": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The k4 attribute defines one of the values to be used within\n the arithmetic operation of the <feComposite> filter primitive.The\n pixel composition is computed using the following formula:You\n can use this attribute with the following SVG elements:BCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "operator": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The operator attribute has two meanings based on the context\n it's used in. Either it defines the compositing or morphing\n operation to be performed.You can use this attribute with\n the following SVG elements:For <feComposite>, operator\n defines the compositing operation that is to be performed.This\n value indicates that the source graphic defined in the\n in attribute is placed over the destination graphic defined\n in the in2 attribute.This value indicates that the parts\n of the source graphic defined in the in attribute that\n overlap the destination graphic defined in the in2 attribute,\n replace the destination graphic.This value indicates that\n the parts of the source graphic defined in the in attribute\n that fall outside the destination graphic defined in the\n in2 attribute, are displayed.This value indicates that\n the parts of the source graphic defined in the in attribute,\n which overlap the destination graphic defined in the in2\n attribute, replace the destination graphic. The parts\n of the destination graphic that do not overlap with the\n source graphic stay untouched.This value indicates that\n the non-overlapping regions of the source graphic defined\n in the in attribute and the destination graphic defined\n in the in2 attribute are combined.This value indicates\n that the sum of the source graphic defined in the in attribute\n and the destination graphic defined in the in2 attribute\n is displayed.This value indicates that the source graphic\n defined in the in attribute and the destination graphic\n defined in the in2 attribute are combined using the following\n formula:result = k1*i1*i2 + k2*i1 + k3*i2 + k4\n      where:\n\n      i1 and i2 indicate the corresponding pixel channel\n values of the input image, which map to in and in2 respectively,\n and k1, k2, k3, and k4 indicate the values of the attributes\n with the same name.\n    For <feMorphology>, operator defines\n whether to erode (i.e., thin) or dilate (fatten) the source\n graphic.This value thins the source graphic defined in\n the in attribute.This value fattens the source graphic\n defined in the in attribute.Last modified: Jul 12, 2022,\n by MDN contributors"
      },
      "result": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The result attribute defines the assigned name for this filter\n primitive. If supplied, then graphics that result from\n processing this filter primitive can be referenced by\n an in attribute on a subsequent filter primitive within\n the same <filter> element. If no value is provided, the\n output will only be available for re-use as the implicit\n input into the next filter primitive if that filter primitive\n provides no value for its in attribute.You can use this\n attribute with the following SVG elements:This value is\n a <custom-ident> and defines the name for the filter primitive.\n It is only meaningful within a given <filter> element\n and thus has only local scope. It is legal for the same\n <filter-primitive-reference> to appear multiple times\n within the same <filter> element. When referenced, this\n value will use the closest preceding filter primitive\n with the given result.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/FeConvolveMatrix.react.js": {
    "description": "FeConvolveMatrix is a wrapper for the <feConvolveMatrix> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/feConvolveMatrix",
    "displayName": "FeConvolveMatrix",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "bias": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The bias attribute shifts the range of the filter. After applying\n the kernelMatrix of the <feConvolveMatrix> element to\n the input image to yield a number and applied the divisor\n attribute, the bias attribute is added to each component.\n This allows representation of values that would otherwise\n be clamped to 0 or 1.You can use this attribute with the\n following SVG elements:One application of bias is when\n it is desirable to have 0.5 gray value be the zero response\n of the filter.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "colorInterpolationFilters": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"auto\"",
              "computed": false
            },
            {
              "value": "\"inherit\"",
              "computed": false
            },
            {
              "value": "\"linearRGB\"",
              "computed": false
            },
            {
              "value": "\"sRGB\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation-filters attribute specifies the color\n space for imaging operations performed via filter effects.Note:\n This property just has an affect on filter operations.\n Therefore, it has no effect on filter primitives like\n <feOffset>, <feImage>, <feTile> or <feFlood>.color-interpolation-filters\n has a different initial value than color-interpolation.\n color-interpolation-filters has an initial value of linearRGB,\n whereas color-interpolation has an initial value of sRGB.\n Thus, in the default case, filter effects operations occur\n in the linearRGB color space, whereas all other color\n interpolations occur by default in the sRGB color space.It\n has no affect on filter functions, which operate in the\n sRGB color space.Note: As a presentation attribute, color-interpolation-filters\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:Indicates that the user\n agent can choose either the sRGB or linearRGB spaces for\n color interpolation. This option indicates that the author\n doesn't require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "divisor": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The divisor attribute specifies the value by which the resulting\n number of applying the kernelMatrix of a <feConvolveMatrix>\n element to the input image color value is divided to yield\n the destination color value.A divisor that is the sum\n of all the matrix values tends to have an evening effect\n on the overall color intensity of the result.You can use\n this attribute with the following SVG elements:This value\n defines the divisor. If the specified divisor is 0 then\n the default value will be used instead.BCD tables only\n load in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "edgeMode": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The edgeMode attribute determines how to extend the input image\n as necessary with color values so that the matrix operations\n can be applied when the kernel is positioned at or near\n the edge of the input image.You can use this attribute\n with the following SVG elements:For <feConvolveMatrix>,\n edgeMode determines how to extend the input image as necessary\n with color values so that the matrix operations can be\n applied when the kernel is positioned at or near the edge\n of the input image.This value indicates that the input\n image is extended along each of its borders as necessary\n by duplicating the color values at the given edge of the\n input image.This value indicates that the input image\n is extended by taking the color values from the opposite\n edge of the image.This value indicates that the input\n image is extended with pixel values of zero for R, G,\n B and A.For <feGaussianBlur>, edgeMode determines how\n to extend the input image as necessary with color values\n so that the matrix operations can be applied when the\n kernel is positioned at or near the edge of the input\n image.This value indicates that the input image is extended\n along each of its borders as necessary by duplicating\n the color values at the given edge of the input image.This\n value indicates that the input image is extended by taking\n the color values from the opposite edge of the image.This\n value indicates that the input image is extended with\n pixel values of zero for R, G, B and A.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "in": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The in attribute identifies input for the given filter primitive.The\n value can be either one of the six keywords defined below,\n or a string which matches a previous result attribute\n value within the same <filter> element. If no value is\n provided and this is the first filter primitive, then\n this filter primitive will use SourceGraphic as its input.\n If no value is provided and this is a subsequent filter\n primitive, then this filter primitive will use the result\n from the previous filter primitive as its input.If the\n value for result appears multiple times within a given\n <filter> element, then a reference to that result will\n use the closest preceding filter primitive with the given\n value for attribute result.You can use this attribute\n with the following SVG elements:This keyword represents\n the graphics elements that were the original input into\n the <filter> element.This keyword represents the graphics\n elements that were the original input into the <filter>\n element. SourceAlpha has all of the same rules as SourceGraphic\n except that only the alpha channel is used.This keyword\n represents an image snapshot of the SVG document under\n the filter region at the time that the <filter> element\n was invoked.Same as BackgroundImage except only the alpha\n channel is used.This keyword represents the value of the\n fill property on the target element for the filter effect.\n In many cases, the FillPaint is opaque everywhere, but\n that might not be the case if a shape is painted with\n a gradient or pattern which itself includes transparent\n or semi-transparent parts.This keyword represents the\n value of the stroke property on the target element for\n the filter effect. In many cases, the StrokePaint is opaque\n everywhere, but that might not be the case if a shape\n is painted with a gradient or pattern which itself includes\n transparent or semi-transparent parts.This value is an\n assigned name for the filter primitive in the form of\n a <custom-ident>. If supplied, then graphics that result\n from processing this filter primitive can be referenced\n by an in attribute on a subsequent filter primitive within\n the same filter element. If no value is provided, the\n output will only be available for re-use as the implicit\n input into the next filter primitive if that filter primitive\n provides no value for its in attribute.BackgroundImage\n is not supported as a filter source in modern browsers\n (see the feComposite compatibility table). We therefore\n need to import one of the images to blend inside the filter\n itself, using an <feImage> element.Note: Firefox Bug 455986\n means that feImage cannot load partial images, including\n circles, rectangles, paths or other fragments defined\n in the document. So that this example works on more browsers,\n a full external image of the logo is loaded.Last modified:\n Jul 1, 2022, by MDN contributors"
      },
      "kernelMatrix": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The kernelMatrix attribute defines the list of numbers that make\n up the kernel matrix for the <feConvolveMatrix> element.Values\n are separated by space characters and/or a comma. The\n number of entries in the list must equal to <orderX> by\n <orderY> as defined in the order attribute.You can use\n this attribute with the following SVG elements:The list\n of <number>s that make up the kernel matrix for the convolution.\n Values are separated by space characters and/or a comma.\n The number of entries in the list must equal <orderX>\n times <orderY>.If the result of orderX * orderY is not\n equal to the number of entries in the value list, the\n filter primitive acts as a pass through filter.BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "kernelUnitLength": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The kernelUnitLength attribute\n has two meanings based on the context it's used in. For\n lighting filter primitives, it indicates the intended\n distance for the x and y coordinates, for <feConvolveMatrix>,\n it indicates the intended distance between successive\n columns and rows in the kernel matrix.You can use this\n attribute with the following SVG elements:For the <feConvolveMatrix>,\n kernelUnitLength indicates the intended distance in current\n filter units (i.e., units as determined by the value of\n primitiveUnits attribute) between successive columns and\n rows, respectively, in the kernelMatrix. By specifying\n value(s) for kernelUnitLength, the kernel becomes defined\n in a scalable, abstract coordinate system. If the attribute\n is not specified, the default value is one pixel in the\n offscreen bitmap, which is a pixel-based coordinate system,\n and thus potentially not scalable.If a negative or zero\n value is specified the default value will be used instead.The\n first number is the x value. The second number is the\n y value. If the x value is not specified, it defaults\n to the same value as x.For the <feDiffuseLighting>, kernelUnitLength\n indicates the intended distance in current filter units\n (i.e., units as determined by the value of attribute primitiveUnits)\n for the x and y coordinate, respectively, in the surface\n normal calculation formulas.The first number is the x\n value. The second number is the y value. If the y value\n is not specified, it defaults to the same value as x.\n By specifying value(s) for kernelUnitLength, the kernel\n becomes defined in a scalable, abstract coordinate system.\n If the attribute is not specified, the x and y values\n represent very small deltas relative to a given position,\n which might be implemented in some cases as one pixel\n in the intermediate image offscreen bitmap, which is a\n pixel-based coordinate system, and thus potentially not\n scalable.If a negative or zero value is specified the\n default value will be used instead.For the <feSpecularLighting>,\n kernelUnitLength indicates the intended distance in current\n filter units (i.e., units as determined by the value of\n attribute primitiveUnits) for the x and y coordinate,\n respectively, in the surface normal calculation formulas.The\n first number is the x value. The second number is the\n y value. If the y value is not specified, it defaults\n to the same value as x. By specifying value(s) for kernelUnitLength,\n the kernel becomes defined in a scalable, abstract coordinate\n system. If the attribute is not specified, the x and y\n values represent very small deltas relative to a given\n position, which might be implemented in some cases as\n one pixel in the intermediate image offscreen bitmap,\n which is a pixel-based coordinate system, and thus potentially\n not scalable.If a negative or zero value is specified\n the default value will be used instead.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "order": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"no\"",
              "computed": false
            },
            {
              "value": "\"yes\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The order attribute indicates the size of the matrix to be used\n by a <feConvolveMatrix> element.You can use this attribute\n with the following SVG elements:This value indicates the\n number of cells in each dimension for the kernel matrix.\n The values provided must be <integer>s greater than zero.\n Values that are not integers will be truncated, i.e. rounded\n to the closest integer value towards zero. The first number,\n indicates the number of columns in the matrix. The second\n number, indicates the number of rows in the matrix. If\n no second number is not provided, it defaults to the first\n number.It is recommended that only small values (e.g.,\n 3) be used; higher values may result in very high CPU\n overhead and usually do not produce results that justify\n the impact on performance.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: Jun 12, 2022, by MDN contributors"
      },
      "preserveAlpha": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'true'",
              "computed": false
            },
            {
              "value": "'false'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "the preserveAlpha attribute indicates how a <feConvolveMatrix>\n element handled alpha transparency.You can use this attribute\n with the following SVG elements:This value indicates that\n the convolution will only apply to the color channels.\n In this case, the filter will temporarily unpremultiply\n the color component values and apply the kernel.This value\n indicates that the convolution will apply to all channels,\n including the alpha channel.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "result": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The result attribute defines the assigned name for this filter\n primitive. If supplied, then graphics that result from\n processing this filter primitive can be referenced by\n an in attribute on a subsequent filter primitive within\n the same <filter> element. If no value is provided, the\n output will only be available for re-use as the implicit\n input into the next filter primitive if that filter primitive\n provides no value for its in attribute.You can use this\n attribute with the following SVG elements:This value is\n a <custom-ident> and defines the name for the filter primitive.\n It is only meaningful within a given <filter> element\n and thus has only local scope. It is legal for the same\n <filter-primitive-reference> to appear multiple times\n within the same <filter> element. When referenced, this\n value will use the closest preceding filter primitive\n with the given result.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "targetX": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The targetX attribute determines the positioning in horizontal\n direction of the convolution matrix relative to a given\n target pixel in the input image. The leftmost column of\n the matrix is column number zero. The value must be such\n that: 0 <= targetX < orderX.You can use this attribute\n with the following SVG elements:This value indicates the\n positioning in horizontal direction of the convolution\n matrix relative to a given target pixel in the input image.BCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "targetY": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The targetY attribute determines the positioning in vertical\n direction of the convolution matrix relative to a given\n target pixel in the input image. The topmost row of the\n matrix is row number zero. The value must be such that:\n 0 <= targetY < orderY.You can use this attribute with\n the following SVG elements:This value indicates the positioning\n in vertical direction of the convolution matrix relative\n to a given target pixel in the input image.BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/FeDiffuseLighting.react.js": {
    "description": "FeDiffuseLighting is a wrapper for the <feDiffuseLighting> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/feDiffuseLighting",
    "displayName": "FeDiffuseLighting",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "colorInterpolationFilters": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"auto\"",
              "computed": false
            },
            {
              "value": "\"inherit\"",
              "computed": false
            },
            {
              "value": "\"linearRGB\"",
              "computed": false
            },
            {
              "value": "\"sRGB\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation-filters attribute specifies the color\n space for imaging operations performed via filter effects.Note:\n This property just has an affect on filter operations.\n Therefore, it has no effect on filter primitives like\n <feOffset>, <feImage>, <feTile> or <feFlood>.color-interpolation-filters\n has a different initial value than color-interpolation.\n color-interpolation-filters has an initial value of linearRGB,\n whereas color-interpolation has an initial value of sRGB.\n Thus, in the default case, filter effects operations occur\n in the linearRGB color space, whereas all other color\n interpolations occur by default in the sRGB color space.It\n has no affect on filter functions, which operate in the\n sRGB color space.Note: As a presentation attribute, color-interpolation-filters\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:Indicates that the user\n agent can choose either the sRGB or linearRGB spaces for\n color interpolation. This option indicates that the author\n doesn't require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "diffuseConstant": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The diffuseConstant attribute represents the kd value in the\n Phong lighting model. In SVG, this can be any non-negative\n number.It's used to determine the final RGB value of a\n given pixel. The brighter the lighting-color, the smaller\n this number should be.You can use this attribute with\n the following SVG elements:BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "in": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The in attribute identifies input for the given filter primitive.The\n value can be either one of the six keywords defined below,\n or a string which matches a previous result attribute\n value within the same <filter> element. If no value is\n provided and this is the first filter primitive, then\n this filter primitive will use SourceGraphic as its input.\n If no value is provided and this is a subsequent filter\n primitive, then this filter primitive will use the result\n from the previous filter primitive as its input.If the\n value for result appears multiple times within a given\n <filter> element, then a reference to that result will\n use the closest preceding filter primitive with the given\n value for attribute result.You can use this attribute\n with the following SVG elements:This keyword represents\n the graphics elements that were the original input into\n the <filter> element.This keyword represents the graphics\n elements that were the original input into the <filter>\n element. SourceAlpha has all of the same rules as SourceGraphic\n except that only the alpha channel is used.This keyword\n represents an image snapshot of the SVG document under\n the filter region at the time that the <filter> element\n was invoked.Same as BackgroundImage except only the alpha\n channel is used.This keyword represents the value of the\n fill property on the target element for the filter effect.\n In many cases, the FillPaint is opaque everywhere, but\n that might not be the case if a shape is painted with\n a gradient or pattern which itself includes transparent\n or semi-transparent parts.This keyword represents the\n value of the stroke property on the target element for\n the filter effect. In many cases, the StrokePaint is opaque\n everywhere, but that might not be the case if a shape\n is painted with a gradient or pattern which itself includes\n transparent or semi-transparent parts.This value is an\n assigned name for the filter primitive in the form of\n a <custom-ident>. If supplied, then graphics that result\n from processing this filter primitive can be referenced\n by an in attribute on a subsequent filter primitive within\n the same filter element. If no value is provided, the\n output will only be available for re-use as the implicit\n input into the next filter primitive if that filter primitive\n provides no value for its in attribute.BackgroundImage\n is not supported as a filter source in modern browsers\n (see the feComposite compatibility table). We therefore\n need to import one of the images to blend inside the filter\n itself, using an <feImage> element.Note: Firefox Bug 455986\n means that feImage cannot load partial images, including\n circles, rectangles, paths or other fragments defined\n in the document. So that this example works on more browsers,\n a full external image of the logo is loaded.Last modified:\n Jul 1, 2022, by MDN contributors"
      },
      "kernelUnitLength": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The kernelUnitLength attribute\n has two meanings based on the context it's used in. For\n lighting filter primitives, it indicates the intended\n distance for the x and y coordinates, for <feConvolveMatrix>,\n it indicates the intended distance between successive\n columns and rows in the kernel matrix.You can use this\n attribute with the following SVG elements:For the <feConvolveMatrix>,\n kernelUnitLength indicates the intended distance in current\n filter units (i.e., units as determined by the value of\n primitiveUnits attribute) between successive columns and\n rows, respectively, in the kernelMatrix. By specifying\n value(s) for kernelUnitLength, the kernel becomes defined\n in a scalable, abstract coordinate system. If the attribute\n is not specified, the default value is one pixel in the\n offscreen bitmap, which is a pixel-based coordinate system,\n and thus potentially not scalable.If a negative or zero\n value is specified the default value will be used instead.The\n first number is the x value. The second number is the\n y value. If the x value is not specified, it defaults\n to the same value as x.For the <feDiffuseLighting>, kernelUnitLength\n indicates the intended distance in current filter units\n (i.e., units as determined by the value of attribute primitiveUnits)\n for the x and y coordinate, respectively, in the surface\n normal calculation formulas.The first number is the x\n value. The second number is the y value. If the y value\n is not specified, it defaults to the same value as x.\n By specifying value(s) for kernelUnitLength, the kernel\n becomes defined in a scalable, abstract coordinate system.\n If the attribute is not specified, the x and y values\n represent very small deltas relative to a given position,\n which might be implemented in some cases as one pixel\n in the intermediate image offscreen bitmap, which is a\n pixel-based coordinate system, and thus potentially not\n scalable.If a negative or zero value is specified the\n default value will be used instead.For the <feSpecularLighting>,\n kernelUnitLength indicates the intended distance in current\n filter units (i.e., units as determined by the value of\n attribute primitiveUnits) for the x and y coordinate,\n respectively, in the surface normal calculation formulas.The\n first number is the x value. The second number is the\n y value. If the y value is not specified, it defaults\n to the same value as x. By specifying value(s) for kernelUnitLength,\n the kernel becomes defined in a scalable, abstract coordinate\n system. If the attribute is not specified, the x and y\n values represent very small deltas relative to a given\n position, which might be implemented in some cases as\n one pixel in the intermediate image offscreen bitmap,\n which is a pixel-based coordinate system, and thus potentially\n not scalable.If a negative or zero value is specified\n the default value will be used instead.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "lightingColor": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The lighting-color attribute defines the color of the light source\n for lighting filter primitives.You can use this attribute\n with the following SVG elements:BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "result": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The result attribute defines the assigned name for this filter\n primitive. If supplied, then graphics that result from\n processing this filter primitive can be referenced by\n an in attribute on a subsequent filter primitive within\n the same <filter> element. If no value is provided, the\n output will only be available for re-use as the implicit\n input into the next filter primitive if that filter primitive\n provides no value for its in attribute.You can use this\n attribute with the following SVG elements:This value is\n a <custom-ident> and defines the name for the filter primitive.\n It is only meaningful within a given <filter> element\n and thus has only local scope. It is legal for the same\n <filter-primitive-reference> to appear multiple times\n within the same <filter> element. When referenced, this\n value will use the closest preceding filter primitive\n with the given result.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "surfaceScale": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The surfaceScale attribute represents the height of the surface\n for a light filter primitive.You can use this attribute\n with the following SVG elements:For <feSpecularLighting>,\n surfaceScale defines the height of the surface.For <feDiffuseLighting>,\n surfaceScale defines the height of the surface.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/FeDisplacementMap.react.js": {
    "description": "FeDisplacementMap is a wrapper for the <feDisplacementMap> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/feDisplacementMap",
    "displayName": "FeDisplacementMap",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "colorInterpolationFilters": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"auto\"",
              "computed": false
            },
            {
              "value": "\"inherit\"",
              "computed": false
            },
            {
              "value": "\"linearRGB\"",
              "computed": false
            },
            {
              "value": "\"sRGB\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation-filters attribute specifies the color\n space for imaging operations performed via filter effects.Note:\n This property just has an affect on filter operations.\n Therefore, it has no effect on filter primitives like\n <feOffset>, <feImage>, <feTile> or <feFlood>.color-interpolation-filters\n has a different initial value than color-interpolation.\n color-interpolation-filters has an initial value of linearRGB,\n whereas color-interpolation has an initial value of sRGB.\n Thus, in the default case, filter effects operations occur\n in the linearRGB color space, whereas all other color\n interpolations occur by default in the sRGB color space.It\n has no affect on filter functions, which operate in the\n sRGB color space.Note: As a presentation attribute, color-interpolation-filters\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:Indicates that the user\n agent can choose either the sRGB or linearRGB spaces for\n color interpolation. This option indicates that the author\n doesn't require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "in": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The in attribute identifies input for the given filter primitive.The\n value can be either one of the six keywords defined below,\n or a string which matches a previous result attribute\n value within the same <filter> element. If no value is\n provided and this is the first filter primitive, then\n this filter primitive will use SourceGraphic as its input.\n If no value is provided and this is a subsequent filter\n primitive, then this filter primitive will use the result\n from the previous filter primitive as its input.If the\n value for result appears multiple times within a given\n <filter> element, then a reference to that result will\n use the closest preceding filter primitive with the given\n value for attribute result.You can use this attribute\n with the following SVG elements:This keyword represents\n the graphics elements that were the original input into\n the <filter> element.This keyword represents the graphics\n elements that were the original input into the <filter>\n element. SourceAlpha has all of the same rules as SourceGraphic\n except that only the alpha channel is used.This keyword\n represents an image snapshot of the SVG document under\n the filter region at the time that the <filter> element\n was invoked.Same as BackgroundImage except only the alpha\n channel is used.This keyword represents the value of the\n fill property on the target element for the filter effect.\n In many cases, the FillPaint is opaque everywhere, but\n that might not be the case if a shape is painted with\n a gradient or pattern which itself includes transparent\n or semi-transparent parts.This keyword represents the\n value of the stroke property on the target element for\n the filter effect. In many cases, the StrokePaint is opaque\n everywhere, but that might not be the case if a shape\n is painted with a gradient or pattern which itself includes\n transparent or semi-transparent parts.This value is an\n assigned name for the filter primitive in the form of\n a <custom-ident>. If supplied, then graphics that result\n from processing this filter primitive can be referenced\n by an in attribute on a subsequent filter primitive within\n the same filter element. If no value is provided, the\n output will only be available for re-use as the implicit\n input into the next filter primitive if that filter primitive\n provides no value for its in attribute.BackgroundImage\n is not supported as a filter source in modern browsers\n (see the feComposite compatibility table). We therefore\n need to import one of the images to blend inside the filter\n itself, using an <feImage> element.Note: Firefox Bug 455986\n means that feImage cannot load partial images, including\n circles, rectangles, paths or other fragments defined\n in the document. So that this example works on more browsers,\n a full external image of the logo is loaded.Last modified:\n Jul 1, 2022, by MDN contributors"
      },
      "in2": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The in2 attribute identifies the second input for the given filter\n primitive. It works exactly like the in attribute.You\n can use this attribute with the following SVG elements:For\n <feBlend>, in2 defines the second input image to the blending\n operation.For <feComposite>, in2 defines the second input\n image to the compositing operation.For <feDisplacementMap>,\n in2 defines the second input image, which is used to displace\n the pixels in the image defined in the in attribute.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "result": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The result attribute defines the assigned name for this filter\n primitive. If supplied, then graphics that result from\n processing this filter primitive can be referenced by\n an in attribute on a subsequent filter primitive within\n the same <filter> element. If no value is provided, the\n output will only be available for re-use as the implicit\n input into the next filter primitive if that filter primitive\n provides no value for its in attribute.You can use this\n attribute with the following SVG elements:This value is\n a <custom-ident> and defines the name for the filter primitive.\n It is only meaningful within a given <filter> element\n and thus has only local scope. It is legal for the same\n <filter-primitive-reference> to appear multiple times\n within the same <filter> element. When referenced, this\n value will use the closest preceding filter primitive\n with the given result.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "scale": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The scale attribute defines the displacement scale factor to\n be used on a <feDisplacementMap> filter primitive. The\n amount is expressed in the coordinate system established\n by the primitiveUnits attribute on the <filter> element.You\n can use this attribute with the following SVG elements:This\n value defines the scale factor for the displacement.When\n the value of this attribute is 0, this operation has no\n effect on the source image.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "xChannelSelector": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The xChannelSelector attribute indicates which color channel\n from in2 to use to displace the pixels in in along the\n x-axis.You can use this attribute with the following SVG\n elements:This keyword specifies that the red color channel\n of the input image defined in in2 will be used to displace\n the pixels of the input image defined in in along the\n x-axis.This keyword specifies that the green color channel\n of the input image defined in in2 will be used to displace\n the pixels of the input image defined in in along the\n x-axis.This keyword specifies that the blue color channel\n of the input image defined in in2 will be used to displace\n the pixels of the input image defined in in along the\n x-axis.This keyword specifies that the alpha channel of\n the input image defined in in2 will be used to displace\n the pixels of the input image defined in in along the\n x-axis.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "yChannelSelector": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The yChannelSelector attribute indicates which color channel\n from in2 to use to displace the pixels in in along the\n y-axis.You can use this attribute with the following SVG\n elements:This keyword specifies that the red color channel\n of the input image defined in in2 will be used to displace\n the pixels of the input image defined in in along the\n y-axis.This keyword specifies that the green color channel\n of the input image defined in in2 will be used to displace\n the pixels of the input image defined in in along the\n y-axis.This keyword specifies that the blue color channel\n of the input image defined in in2 will be used to displace\n the pixels of the input image defined in in along the\n y-axis.This keyword specifies that the alpha channel of\n the input image defined in in2 will be used to displace\n the pixels of the input image defined in in along the\n y-axis.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/FeDistantLight.react.js": {
    "description": "FeDistantLight is a wrapper for the <feDistantLight> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/feDistantLight",
    "displayName": "FeDistantLight",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "azimuth": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The azimuth attribute specifies the direction angle for the light\n source on the XY plane (clockwise), in degrees from the\n x axis.You can use this attribute with the following SVG\n elements:BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "elevation": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The elevation attribute specifies the direction angle for the\n light source from the XY plane towards the Z-axis, in\n degrees. Note that the positive Z-axis points towards\n the viewer of the content.You can use this attribute with\n the following SVG elements:BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/FeDropShadow.react.js": {
    "description": "FeDropShadow is a wrapper for the <feDropShadow> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/feDropShadow",
    "displayName": "FeDropShadow",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "colorInterpolationFilters": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"auto\"",
              "computed": false
            },
            {
              "value": "\"inherit\"",
              "computed": false
            },
            {
              "value": "\"linearRGB\"",
              "computed": false
            },
            {
              "value": "\"sRGB\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation-filters attribute specifies the color\n space for imaging operations performed via filter effects.Note:\n This property just has an affect on filter operations.\n Therefore, it has no effect on filter primitives like\n <feOffset>, <feImage>, <feTile> or <feFlood>.color-interpolation-filters\n has a different initial value than color-interpolation.\n color-interpolation-filters has an initial value of linearRGB,\n whereas color-interpolation has an initial value of sRGB.\n Thus, in the default case, filter effects operations occur\n in the linearRGB color space, whereas all other color\n interpolations occur by default in the sRGB color space.It\n has no affect on filter functions, which operate in the\n sRGB color space.Note: As a presentation attribute, color-interpolation-filters\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:Indicates that the user\n agent can choose either the sRGB or linearRGB spaces for\n color interpolation. This option indicates that the author\n doesn't require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "dx": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The dx attribute indicates a shift along the x-axis on the position\n of an element or its content.You can use this attribute\n with the following SVG elements:Warning: As of SVG2 <altGlyph>\n is deprecated and shouldn't be used.For <altGlyph>, if\n it contains a single value, dx defines a shift along the\n x-axis for all alternate glyph.If there are multiple values,\n dx defines a shift along the x-axis for each individual\n glyph relative to the preceding glyph. If there are less\n values than glyphs, the remaining glyphs use a value of\n 0. If there are more values than glyphs, extra values\n are ignored.For <feDropShadow>, dx defines the x offset\n of the dropped shadow. The unit used to resolve the value\n of the attribute is set by the primitiveUnits attribute\n of the <filter> element.For <feOffset>, dx defines the\n x offset of the filter input graphic. The unit used to\n resolve the value of the attribute is set by the primitiveUnits\n attribute of the <filter> element.Warning: As of SVG2\n <glyphRef> is deprecated and shouldn't be used.For <glyphRef>,\n dx defines the x offset of the glyph, in the font metric\n system.For <text>, if it contains a single value, dx defines\n a shift along the x-axis for all glyphs.If there are multiple\n values, dx defines a shift along the x-axis for each individual\n glyph relative to the preceding glyph. If there are less\n values than glyphs, the remaining glyphs use a value of\n 0. If there are more values than glyphs, extra values\n are ignored.Warning: As of SVG2 <tref> is deprecated and\n shouldn't be used.For <tref>, if it contains a single\n value, dx defines a shift along the x-axis for all glyphs.If\n there are multiple values, dx defines a shift along the\n x-axis for each individual glyph relative to the preceding\n glyph. If there are less values than glyphs, the remaining\n glyphs use a value of 0. If there are more values than\n glyphs, extra values are ignored.For <tspan>, if it contains\n a single value, dx defines a shift along the x-axis for\n all alternate glyph.If there are multiple values, dx defines\n a shift along the x-axis for each individual glyph relative\n to the preceding glyph. If there are less values than\n glyphs, the remaining glyphs use a value of 0. If there\n are more values than glyphs, extra values are ignored.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "dy": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The dy attribute indicates a shift along the y-axis on the position\n of an element or its content.You can use this attribute\n with the following SVG elements:Warning: As of SVG2 <altGlyph>\n is deprecated and shouldn't be used.For <altGlyph>, if\n it contains a single value, dy defines a shift along the\n y-axis for all alternate glyph.If there are multiple values,\n dy defines a shift along the y-axis for each individual\n glyph relative to the preceding glyph. If there are less\n values than glyphs, the remaining glyphs use a value of\n 0. If there are more values than glyphs, extra values\n are ignored.For <feDropShadow>, dy defines the y offset\n of the dropped shadow. The unit used to resolve the value\n of the attribute is set by the primitiveUnits attribute\n of the <filter> element.For <feOffset>, dy defines the\n y offset of the filter input graphic. The unit used to\n resolve the value of the attribute is set by the primitiveUnits\n attribute of the <filter> element.Warning: As of SVG2\n <glyphRef> is deprecated and shouldn't be used.For <glyphRef>,\n dy defines the y offset of the glyph, in the font metric\n system.For <text>, if it contains a single value, dy defines\n a shift along the y-axis for all glyphs.If there are multiple\n values, dy defines a shift along the y-axis for each individual\n glyph relative to the preceding glyph. If there are less\n values than glyphs, the remaining glyphs use a value of\n 0. If there are more values than glyphs, extra values\n are ignored.Warning: As of SVG2 <tref> is deprecated and\n shouldn't be used.For <tref>, if it contains a single\n value, dy defines a shift along the y-axis for all glyphs.If\n there are multiple values, dy defines a shift along the\n y-axis for each individual glyph relative to the preceding\n glyph. If there are less values than glyphs, the remaining\n glyphs use a value of 0. If there are more values than\n glyphs, extra values are ignored.For <tspan>, if it contains\n a single value, dy defines a shift along the y-axis for\n all alternate glyph.If there are multiple values, dy defines\n a shift along the y-axis for each individual glyph relative\n to the preceding glyph. If there are less values than\n glyphs, the remaining glyphs use a value of 0. If there\n are more values than glyphs, extra values are ignored.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "floodColor": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The flood-color attribute indicates what color to use to flood\n the current filter primitive subregion.Note: As a presentation\n attribute, flood-color can be used as a CSS property.You\n can use this attribute with the following SVG elements:BCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "floodOpacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The flood-opacity attribute indicates the opacity value to use\n across the current filter primitive subregion.Note: As\n a presentation attribute, flood-opacity can be used as\n a CSS property.You can use this attribute with the following\n SVG elements:\n      A number or percentage indicating\n the opacity value to use across the current filter primitive\n subregion.\n      A number of 0 or a percentage of 0% represents\n a fully transparent color, 1 or 100% represents a fully\n opaque color.\n    BCD tables only load in the browser\n with JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "in": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The in attribute identifies input for the given filter primitive.The\n value can be either one of the six keywords defined below,\n or a string which matches a previous result attribute\n value within the same <filter> element. If no value is\n provided and this is the first filter primitive, then\n this filter primitive will use SourceGraphic as its input.\n If no value is provided and this is a subsequent filter\n primitive, then this filter primitive will use the result\n from the previous filter primitive as its input.If the\n value for result appears multiple times within a given\n <filter> element, then a reference to that result will\n use the closest preceding filter primitive with the given\n value for attribute result.You can use this attribute\n with the following SVG elements:This keyword represents\n the graphics elements that were the original input into\n the <filter> element.This keyword represents the graphics\n elements that were the original input into the <filter>\n element. SourceAlpha has all of the same rules as SourceGraphic\n except that only the alpha channel is used.This keyword\n represents an image snapshot of the SVG document under\n the filter region at the time that the <filter> element\n was invoked.Same as BackgroundImage except only the alpha\n channel is used.This keyword represents the value of the\n fill property on the target element for the filter effect.\n In many cases, the FillPaint is opaque everywhere, but\n that might not be the case if a shape is painted with\n a gradient or pattern which itself includes transparent\n or semi-transparent parts.This keyword represents the\n value of the stroke property on the target element for\n the filter effect. In many cases, the StrokePaint is opaque\n everywhere, but that might not be the case if a shape\n is painted with a gradient or pattern which itself includes\n transparent or semi-transparent parts.This value is an\n assigned name for the filter primitive in the form of\n a <custom-ident>. If supplied, then graphics that result\n from processing this filter primitive can be referenced\n by an in attribute on a subsequent filter primitive within\n the same filter element. If no value is provided, the\n output will only be available for re-use as the implicit\n input into the next filter primitive if that filter primitive\n provides no value for its in attribute.BackgroundImage\n is not supported as a filter source in modern browsers\n (see the feComposite compatibility table). We therefore\n need to import one of the images to blend inside the filter\n itself, using an <feImage> element.Note: Firefox Bug 455986\n means that feImage cannot load partial images, including\n circles, rectangles, paths or other fragments defined\n in the document. So that this example works on more browsers,\n a full external image of the logo is loaded.Last modified:\n Jul 1, 2022, by MDN contributors"
      },
      "result": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The result attribute defines the assigned name for this filter\n primitive. If supplied, then graphics that result from\n processing this filter primitive can be referenced by\n an in attribute on a subsequent filter primitive within\n the same <filter> element. If no value is provided, the\n output will only be available for re-use as the implicit\n input into the next filter primitive if that filter primitive\n provides no value for its in attribute.You can use this\n attribute with the following SVG elements:This value is\n a <custom-ident> and defines the name for the filter primitive.\n It is only meaningful within a given <filter> element\n and thus has only local scope. It is legal for the same\n <filter-primitive-reference> to appear multiple times\n within the same <filter> element. When referenced, this\n value will use the closest preceding filter primitive\n with the given result.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/FeFlood.react.js": {
    "description": "FeFlood is a wrapper for the <feFlood> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/feFlood",
    "displayName": "FeFlood",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "colorInterpolationFilters": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"auto\"",
              "computed": false
            },
            {
              "value": "\"inherit\"",
              "computed": false
            },
            {
              "value": "\"linearRGB\"",
              "computed": false
            },
            {
              "value": "\"sRGB\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation-filters attribute specifies the color\n space for imaging operations performed via filter effects.Note:\n This property just has an affect on filter operations.\n Therefore, it has no effect on filter primitives like\n <feOffset>, <feImage>, <feTile> or <feFlood>.color-interpolation-filters\n has a different initial value than color-interpolation.\n color-interpolation-filters has an initial value of linearRGB,\n whereas color-interpolation has an initial value of sRGB.\n Thus, in the default case, filter effects operations occur\n in the linearRGB color space, whereas all other color\n interpolations occur by default in the sRGB color space.It\n has no affect on filter functions, which operate in the\n sRGB color space.Note: As a presentation attribute, color-interpolation-filters\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:Indicates that the user\n agent can choose either the sRGB or linearRGB spaces for\n color interpolation. This option indicates that the author\n doesn't require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "floodColor": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The flood-color attribute indicates what color to use to flood\n the current filter primitive subregion.Note: As a presentation\n attribute, flood-color can be used as a CSS property.You\n can use this attribute with the following SVG elements:BCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "floodOpacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The flood-opacity attribute indicates the opacity value to use\n across the current filter primitive subregion.Note: As\n a presentation attribute, flood-opacity can be used as\n a CSS property.You can use this attribute with the following\n SVG elements:\n      A number or percentage indicating\n the opacity value to use across the current filter primitive\n subregion.\n      A number of 0 or a percentage of 0% represents\n a fully transparent color, 1 or 100% represents a fully\n opaque color.\n    BCD tables only load in the browser\n with JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "result": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The result attribute defines the assigned name for this filter\n primitive. If supplied, then graphics that result from\n processing this filter primitive can be referenced by\n an in attribute on a subsequent filter primitive within\n the same <filter> element. If no value is provided, the\n output will only be available for re-use as the implicit\n input into the next filter primitive if that filter primitive\n provides no value for its in attribute.You can use this\n attribute with the following SVG elements:This value is\n a <custom-ident> and defines the name for the filter primitive.\n It is only meaningful within a given <filter> element\n and thus has only local scope. It is legal for the same\n <filter-primitive-reference> to appear multiple times\n within the same <filter> element. When referenced, this\n value will use the closest preceding filter primitive\n with the given result.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/FeFuncA.react.js": {
    "description": "FeFuncA is a wrapper for the <feFuncA> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/feFuncA",
    "displayName": "FeFuncA",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "amplitude": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The amplitude attribute controls the amplitude of the gamma function\n of a component transfer element when its type attribute\n is gamma.You can use this attribute with the following\n SVG elements:Last modified: May 13, 2022, by MDN contributors"
      },
      "exponent": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The exponent attribute defines the exponent of the gamma function.You\n can use this attribute with the following SVG elements:If\n the type attribute of the component element is set to\n gamma, this value specifies the exponent of the gamma\n functionLast modified: May 13, 2022, by MDN contributors"
      },
      "intercept": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The intercept attribute defines the intercept of the linear function\n of color component transfers when the type attribute is\n set to linear.You can use this attribute with the following\n SVG elements:Last modified: May 13, 2022, by MDN contributors"
      },
      "tableValues": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The tableValues attribute defines a list of numbers defining\n a lookup table of values for a color component transfer\n function.You can use this attribute with the following\n SVG elements:This value holds a comma- and/or space-separated\n list of <number>s, which define a lookup table for the\n color component transfer function. Each number can be\n between 0 and 1.An empty list results in an identity transfer\n function.Last modified: Jul 1, 2022, by MDN contributors"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/FeFuncB.react.js": {
    "description": "FeFuncB is a wrapper for the <feFuncB> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/feFuncB",
    "displayName": "FeFuncB",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "amplitude": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The amplitude attribute controls the amplitude of the gamma function\n of a component transfer element when its type attribute\n is gamma.You can use this attribute with the following\n SVG elements:Last modified: May 13, 2022, by MDN contributors"
      },
      "exponent": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The exponent attribute defines the exponent of the gamma function.You\n can use this attribute with the following SVG elements:If\n the type attribute of the component element is set to\n gamma, this value specifies the exponent of the gamma\n functionLast modified: May 13, 2022, by MDN contributors"
      },
      "intercept": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The intercept attribute defines the intercept of the linear function\n of color component transfers when the type attribute is\n set to linear.You can use this attribute with the following\n SVG elements:Last modified: May 13, 2022, by MDN contributors"
      },
      "tableValues": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The tableValues attribute defines a list of numbers defining\n a lookup table of values for a color component transfer\n function.You can use this attribute with the following\n SVG elements:This value holds a comma- and/or space-separated\n list of <number>s, which define a lookup table for the\n color component transfer function. Each number can be\n between 0 and 1.An empty list results in an identity transfer\n function.Last modified: Jul 1, 2022, by MDN contributors"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/FeFuncG.react.js": {
    "description": "FeFuncG is a wrapper for the <feFuncG> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/feFuncG",
    "displayName": "FeFuncG",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "amplitude": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The amplitude attribute controls the amplitude of the gamma function\n of a component transfer element when its type attribute\n is gamma.You can use this attribute with the following\n SVG elements:Last modified: May 13, 2022, by MDN contributors"
      },
      "exponent": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The exponent attribute defines the exponent of the gamma function.You\n can use this attribute with the following SVG elements:If\n the type attribute of the component element is set to\n gamma, this value specifies the exponent of the gamma\n functionLast modified: May 13, 2022, by MDN contributors"
      },
      "intercept": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The intercept attribute defines the intercept of the linear function\n of color component transfers when the type attribute is\n set to linear.You can use this attribute with the following\n SVG elements:Last modified: May 13, 2022, by MDN contributors"
      },
      "tableValues": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The tableValues attribute defines a list of numbers defining\n a lookup table of values for a color component transfer\n function.You can use this attribute with the following\n SVG elements:This value holds a comma- and/or space-separated\n list of <number>s, which define a lookup table for the\n color component transfer function. Each number can be\n between 0 and 1.An empty list results in an identity transfer\n function.Last modified: Jul 1, 2022, by MDN contributors"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/FeFuncR.react.js": {
    "description": "FeFuncR is a wrapper for the <feFuncR> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/feFuncR",
    "displayName": "FeFuncR",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "amplitude": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The amplitude attribute controls the amplitude of the gamma function\n of a component transfer element when its type attribute\n is gamma.You can use this attribute with the following\n SVG elements:Last modified: May 13, 2022, by MDN contributors"
      },
      "exponent": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The exponent attribute defines the exponent of the gamma function.You\n can use this attribute with the following SVG elements:If\n the type attribute of the component element is set to\n gamma, this value specifies the exponent of the gamma\n functionLast modified: May 13, 2022, by MDN contributors"
      },
      "intercept": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The intercept attribute defines the intercept of the linear function\n of color component transfers when the type attribute is\n set to linear.You can use this attribute with the following\n SVG elements:Last modified: May 13, 2022, by MDN contributors"
      },
      "tableValues": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The tableValues attribute defines a list of numbers defining\n a lookup table of values for a color component transfer\n function.You can use this attribute with the following\n SVG elements:This value holds a comma- and/or space-separated\n list of <number>s, which define a lookup table for the\n color component transfer function. Each number can be\n between 0 and 1.An empty list results in an identity transfer\n function.Last modified: Jul 1, 2022, by MDN contributors"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/FeGaussianBlur.react.js": {
    "description": "FeGaussianBlur is a wrapper for the <feGaussianBlur> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/feGaussianBlur",
    "displayName": "FeGaussianBlur",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "colorInterpolationFilters": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"auto\"",
              "computed": false
            },
            {
              "value": "\"inherit\"",
              "computed": false
            },
            {
              "value": "\"linearRGB\"",
              "computed": false
            },
            {
              "value": "\"sRGB\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation-filters attribute specifies the color\n space for imaging operations performed via filter effects.Note:\n This property just has an affect on filter operations.\n Therefore, it has no effect on filter primitives like\n <feOffset>, <feImage>, <feTile> or <feFlood>.color-interpolation-filters\n has a different initial value than color-interpolation.\n color-interpolation-filters has an initial value of linearRGB,\n whereas color-interpolation has an initial value of sRGB.\n Thus, in the default case, filter effects operations occur\n in the linearRGB color space, whereas all other color\n interpolations occur by default in the sRGB color space.It\n has no affect on filter functions, which operate in the\n sRGB color space.Note: As a presentation attribute, color-interpolation-filters\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:Indicates that the user\n agent can choose either the sRGB or linearRGB spaces for\n color interpolation. This option indicates that the author\n doesn't require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "edgeMode": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The edgeMode attribute determines how to extend the input image\n as necessary with color values so that the matrix operations\n can be applied when the kernel is positioned at or near\n the edge of the input image.You can use this attribute\n with the following SVG elements:For <feConvolveMatrix>,\n edgeMode determines how to extend the input image as necessary\n with color values so that the matrix operations can be\n applied when the kernel is positioned at or near the edge\n of the input image.This value indicates that the input\n image is extended along each of its borders as necessary\n by duplicating the color values at the given edge of the\n input image.This value indicates that the input image\n is extended by taking the color values from the opposite\n edge of the image.This value indicates that the input\n image is extended with pixel values of zero for R, G,\n B and A.For <feGaussianBlur>, edgeMode determines how\n to extend the input image as necessary with color values\n so that the matrix operations can be applied when the\n kernel is positioned at or near the edge of the input\n image.This value indicates that the input image is extended\n along each of its borders as necessary by duplicating\n the color values at the given edge of the input image.This\n value indicates that the input image is extended by taking\n the color values from the opposite edge of the image.This\n value indicates that the input image is extended with\n pixel values of zero for R, G, B and A.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "in": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The in attribute identifies input for the given filter primitive.The\n value can be either one of the six keywords defined below,\n or a string which matches a previous result attribute\n value within the same <filter> element. If no value is\n provided and this is the first filter primitive, then\n this filter primitive will use SourceGraphic as its input.\n If no value is provided and this is a subsequent filter\n primitive, then this filter primitive will use the result\n from the previous filter primitive as its input.If the\n value for result appears multiple times within a given\n <filter> element, then a reference to that result will\n use the closest preceding filter primitive with the given\n value for attribute result.You can use this attribute\n with the following SVG elements:This keyword represents\n the graphics elements that were the original input into\n the <filter> element.This keyword represents the graphics\n elements that were the original input into the <filter>\n element. SourceAlpha has all of the same rules as SourceGraphic\n except that only the alpha channel is used.This keyword\n represents an image snapshot of the SVG document under\n the filter region at the time that the <filter> element\n was invoked.Same as BackgroundImage except only the alpha\n channel is used.This keyword represents the value of the\n fill property on the target element for the filter effect.\n In many cases, the FillPaint is opaque everywhere, but\n that might not be the case if a shape is painted with\n a gradient or pattern which itself includes transparent\n or semi-transparent parts.This keyword represents the\n value of the stroke property on the target element for\n the filter effect. In many cases, the StrokePaint is opaque\n everywhere, but that might not be the case if a shape\n is painted with a gradient or pattern which itself includes\n transparent or semi-transparent parts.This value is an\n assigned name for the filter primitive in the form of\n a <custom-ident>. If supplied, then graphics that result\n from processing this filter primitive can be referenced\n by an in attribute on a subsequent filter primitive within\n the same filter element. If no value is provided, the\n output will only be available for re-use as the implicit\n input into the next filter primitive if that filter primitive\n provides no value for its in attribute.BackgroundImage\n is not supported as a filter source in modern browsers\n (see the feComposite compatibility table). We therefore\n need to import one of the images to blend inside the filter\n itself, using an <feImage> element.Note: Firefox Bug 455986\n means that feImage cannot load partial images, including\n circles, rectangles, paths or other fragments defined\n in the document. So that this example works on more browsers,\n a full external image of the logo is loaded.Last modified:\n Jul 1, 2022, by MDN contributors"
      },
      "result": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The result attribute defines the assigned name for this filter\n primitive. If supplied, then graphics that result from\n processing this filter primitive can be referenced by\n an in attribute on a subsequent filter primitive within\n the same <filter> element. If no value is provided, the\n output will only be available for re-use as the implicit\n input into the next filter primitive if that filter primitive\n provides no value for its in attribute.You can use this\n attribute with the following SVG elements:This value is\n a <custom-ident> and defines the name for the filter primitive.\n It is only meaningful within a given <filter> element\n and thus has only local scope. It is legal for the same\n <filter-primitive-reference> to appear multiple times\n within the same <filter> element. When referenced, this\n value will use the closest preceding filter primitive\n with the given result.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "stdDeviation": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stdDeviation attribute defines the standard deviation for\n the blur operation.You can use this attribute with the\n following SVG elements:If two numbers are provided, the\n first number represents a standard deviation value along\n the x-axis. The second value represents a standard deviation\n along the y-axis. If one number is provided, then that\n value is used for both X and Y.A negative value is forbidden.\n A value of zero disables the effect of the given filter\n primitive (i.e., the result is the filter input image).\n If stdDeviation is 0 in only one of X or Y, then the effect\n is that the blur is only applied in the direction that\n has a non-zero value.BCD tables only load in the browser\n with JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/FeImage.react.js": {
    "description": "FeImage is a wrapper for the <feImage> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/feImage",
    "displayName": "FeImage",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "colorInterpolationFilters": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"auto\"",
              "computed": false
            },
            {
              "value": "\"inherit\"",
              "computed": false
            },
            {
              "value": "\"linearRGB\"",
              "computed": false
            },
            {
              "value": "\"sRGB\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation-filters attribute specifies the color\n space for imaging operations performed via filter effects.Note:\n This property just has an affect on filter operations.\n Therefore, it has no effect on filter primitives like\n <feOffset>, <feImage>, <feTile> or <feFlood>.color-interpolation-filters\n has a different initial value than color-interpolation.\n color-interpolation-filters has an initial value of linearRGB,\n whereas color-interpolation has an initial value of sRGB.\n Thus, in the default case, filter effects operations occur\n in the linearRGB color space, whereas all other color\n interpolations occur by default in the sRGB color space.It\n has no affect on filter functions, which operate in the\n sRGB color space.Note: As a presentation attribute, color-interpolation-filters\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:Indicates that the user\n agent can choose either the sRGB or linearRGB spaces for\n color interpolation. This option indicates that the author\n doesn't require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "preserveAspectRatio": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The preserveAspectRatio attribute indicates how an element with\n a viewBox providing a given aspect ratio must fit into\n a viewport with a different aspect ratio.Because the aspect\n ratio of an SVG image is defined by the viewBox attribute,\n if this attribute isn't set, the preserveAspectRatio attribute\n has no effect (with one exception, the <image> element,\n as described below).Its value is made of one or two keywords:\n A required alignment value and an optional \"meet or slice\"\n reference as described below:The alignment value indicates\n whether to force uniform scaling and, if so, the alignment\n method to use in case the aspect ratio of the viewBox\n doesn't match the aspect ratio of the viewport. The alignment\n value must be one of the following keywords:The meet or\n slice reference is optional and, if provided, must be\n one of the following keywords:You can use this attribute\n with the following SVG elements:For <feImage>, preserveAspectRatio\n defines how the referenced image should fit in the rectangle\n define by the <feImage> element.For <image>, preserveAspectRatio\n defines how the referenced image should fit in the rectangle\n define by the <image> element.For <marker>, preserveAspectRatio\n indicates if a uniform scaling must be performed to fit\n the element viewport.For <pattern>, preserveAspectRatio\n indicates if a uniform scaling must be performed to fit\n the element viewport.For <svg>, preserveAspectRatio indicates\n if a uniform scaling must be performed to fit the element\n viewport.For <symbol>, preserveAspectRatio indicates if\n a uniform scaling must be performed to fit the element\n viewport.For <view>, preserveAspectRatio indicates if\n a uniform scaling must be performed to fit the element\n viewport.Last modified: May 13, 2022, by MDN contributors"
      },
      "result": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The result attribute defines the assigned name for this filter\n primitive. If supplied, then graphics that result from\n processing this filter primitive can be referenced by\n an in attribute on a subsequent filter primitive within\n the same <filter> element. If no value is provided, the\n output will only be available for re-use as the implicit\n input into the next filter primitive if that filter primitive\n provides no value for its in attribute.You can use this\n attribute with the following SVG elements:This value is\n a <custom-ident> and defines the name for the filter primitive.\n It is only meaningful within a given <filter> element\n and thus has only local scope. It is legal for the same\n <filter-primitive-reference> to appear multiple times\n within the same <filter> element. When referenced, this\n value will use the closest preceding filter primitive\n with the given result.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/FeMerge.react.js": {
    "description": "FeMerge is a wrapper for the <feMerge> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/feMerge",
    "displayName": "FeMerge",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "colorInterpolationFilters": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"auto\"",
              "computed": false
            },
            {
              "value": "\"inherit\"",
              "computed": false
            },
            {
              "value": "\"linearRGB\"",
              "computed": false
            },
            {
              "value": "\"sRGB\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation-filters attribute specifies the color\n space for imaging operations performed via filter effects.Note:\n This property just has an affect on filter operations.\n Therefore, it has no effect on filter primitives like\n <feOffset>, <feImage>, <feTile> or <feFlood>.color-interpolation-filters\n has a different initial value than color-interpolation.\n color-interpolation-filters has an initial value of linearRGB,\n whereas color-interpolation has an initial value of sRGB.\n Thus, in the default case, filter effects operations occur\n in the linearRGB color space, whereas all other color\n interpolations occur by default in the sRGB color space.It\n has no affect on filter functions, which operate in the\n sRGB color space.Note: As a presentation attribute, color-interpolation-filters\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:Indicates that the user\n agent can choose either the sRGB or linearRGB spaces for\n color interpolation. This option indicates that the author\n doesn't require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "result": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The result attribute defines the assigned name for this filter\n primitive. If supplied, then graphics that result from\n processing this filter primitive can be referenced by\n an in attribute on a subsequent filter primitive within\n the same <filter> element. If no value is provided, the\n output will only be available for re-use as the implicit\n input into the next filter primitive if that filter primitive\n provides no value for its in attribute.You can use this\n attribute with the following SVG elements:This value is\n a <custom-ident> and defines the name for the filter primitive.\n It is only meaningful within a given <filter> element\n and thus has only local scope. It is legal for the same\n <filter-primitive-reference> to appear multiple times\n within the same <filter> element. When referenced, this\n value will use the closest preceding filter primitive\n with the given result.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/FeMergeNode.react.js": {
    "description": "FeMergeNode is a wrapper for the <feMergeNode> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/feMergeNode",
    "displayName": "FeMergeNode",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "in": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The in attribute identifies input for the given filter primitive.The\n value can be either one of the six keywords defined below,\n or a string which matches a previous result attribute\n value within the same <filter> element. If no value is\n provided and this is the first filter primitive, then\n this filter primitive will use SourceGraphic as its input.\n If no value is provided and this is a subsequent filter\n primitive, then this filter primitive will use the result\n from the previous filter primitive as its input.If the\n value for result appears multiple times within a given\n <filter> element, then a reference to that result will\n use the closest preceding filter primitive with the given\n value for attribute result.You can use this attribute\n with the following SVG elements:This keyword represents\n the graphics elements that were the original input into\n the <filter> element.This keyword represents the graphics\n elements that were the original input into the <filter>\n element. SourceAlpha has all of the same rules as SourceGraphic\n except that only the alpha channel is used.This keyword\n represents an image snapshot of the SVG document under\n the filter region at the time that the <filter> element\n was invoked.Same as BackgroundImage except only the alpha\n channel is used.This keyword represents the value of the\n fill property on the target element for the filter effect.\n In many cases, the FillPaint is opaque everywhere, but\n that might not be the case if a shape is painted with\n a gradient or pattern which itself includes transparent\n or semi-transparent parts.This keyword represents the\n value of the stroke property on the target element for\n the filter effect. In many cases, the StrokePaint is opaque\n everywhere, but that might not be the case if a shape\n is painted with a gradient or pattern which itself includes\n transparent or semi-transparent parts.This value is an\n assigned name for the filter primitive in the form of\n a <custom-ident>. If supplied, then graphics that result\n from processing this filter primitive can be referenced\n by an in attribute on a subsequent filter primitive within\n the same filter element. If no value is provided, the\n output will only be available for re-use as the implicit\n input into the next filter primitive if that filter primitive\n provides no value for its in attribute.BackgroundImage\n is not supported as a filter source in modern browsers\n (see the feComposite compatibility table). We therefore\n need to import one of the images to blend inside the filter\n itself, using an <feImage> element.Note: Firefox Bug 455986\n means that feImage cannot load partial images, including\n circles, rectangles, paths or other fragments defined\n in the document. So that this example works on more browsers,\n a full external image of the logo is loaded.Last modified:\n Jul 1, 2022, by MDN contributors"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/FeMorphology.react.js": {
    "description": "FeMorphology is a wrapper for the <feMorphology> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/feMorphology",
    "displayName": "FeMorphology",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "colorInterpolationFilters": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"auto\"",
              "computed": false
            },
            {
              "value": "\"inherit\"",
              "computed": false
            },
            {
              "value": "\"linearRGB\"",
              "computed": false
            },
            {
              "value": "\"sRGB\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation-filters attribute specifies the color\n space for imaging operations performed via filter effects.Note:\n This property just has an affect on filter operations.\n Therefore, it has no effect on filter primitives like\n <feOffset>, <feImage>, <feTile> or <feFlood>.color-interpolation-filters\n has a different initial value than color-interpolation.\n color-interpolation-filters has an initial value of linearRGB,\n whereas color-interpolation has an initial value of sRGB.\n Thus, in the default case, filter effects operations occur\n in the linearRGB color space, whereas all other color\n interpolations occur by default in the sRGB color space.It\n has no affect on filter functions, which operate in the\n sRGB color space.Note: As a presentation attribute, color-interpolation-filters\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:Indicates that the user\n agent can choose either the sRGB or linearRGB spaces for\n color interpolation. This option indicates that the author\n doesn't require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "in": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The in attribute identifies input for the given filter primitive.The\n value can be either one of the six keywords defined below,\n or a string which matches a previous result attribute\n value within the same <filter> element. If no value is\n provided and this is the first filter primitive, then\n this filter primitive will use SourceGraphic as its input.\n If no value is provided and this is a subsequent filter\n primitive, then this filter primitive will use the result\n from the previous filter primitive as its input.If the\n value for result appears multiple times within a given\n <filter> element, then a reference to that result will\n use the closest preceding filter primitive with the given\n value for attribute result.You can use this attribute\n with the following SVG elements:This keyword represents\n the graphics elements that were the original input into\n the <filter> element.This keyword represents the graphics\n elements that were the original input into the <filter>\n element. SourceAlpha has all of the same rules as SourceGraphic\n except that only the alpha channel is used.This keyword\n represents an image snapshot of the SVG document under\n the filter region at the time that the <filter> element\n was invoked.Same as BackgroundImage except only the alpha\n channel is used.This keyword represents the value of the\n fill property on the target element for the filter effect.\n In many cases, the FillPaint is opaque everywhere, but\n that might not be the case if a shape is painted with\n a gradient or pattern which itself includes transparent\n or semi-transparent parts.This keyword represents the\n value of the stroke property on the target element for\n the filter effect. In many cases, the StrokePaint is opaque\n everywhere, but that might not be the case if a shape\n is painted with a gradient or pattern which itself includes\n transparent or semi-transparent parts.This value is an\n assigned name for the filter primitive in the form of\n a <custom-ident>. If supplied, then graphics that result\n from processing this filter primitive can be referenced\n by an in attribute on a subsequent filter primitive within\n the same filter element. If no value is provided, the\n output will only be available for re-use as the implicit\n input into the next filter primitive if that filter primitive\n provides no value for its in attribute.BackgroundImage\n is not supported as a filter source in modern browsers\n (see the feComposite compatibility table). We therefore\n need to import one of the images to blend inside the filter\n itself, using an <feImage> element.Note: Firefox Bug 455986\n means that feImage cannot load partial images, including\n circles, rectangles, paths or other fragments defined\n in the document. So that this example works on more browsers,\n a full external image of the logo is loaded.Last modified:\n Jul 1, 2022, by MDN contributors"
      },
      "operator": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The operator attribute has two meanings based on the context\n it's used in. Either it defines the compositing or morphing\n operation to be performed.You can use this attribute with\n the following SVG elements:For <feComposite>, operator\n defines the compositing operation that is to be performed.This\n value indicates that the source graphic defined in the\n in attribute is placed over the destination graphic defined\n in the in2 attribute.This value indicates that the parts\n of the source graphic defined in the in attribute that\n overlap the destination graphic defined in the in2 attribute,\n replace the destination graphic.This value indicates that\n the parts of the source graphic defined in the in attribute\n that fall outside the destination graphic defined in the\n in2 attribute, are displayed.This value indicates that\n the parts of the source graphic defined in the in attribute,\n which overlap the destination graphic defined in the in2\n attribute, replace the destination graphic. The parts\n of the destination graphic that do not overlap with the\n source graphic stay untouched.This value indicates that\n the non-overlapping regions of the source graphic defined\n in the in attribute and the destination graphic defined\n in the in2 attribute are combined.This value indicates\n that the sum of the source graphic defined in the in attribute\n and the destination graphic defined in the in2 attribute\n is displayed.This value indicates that the source graphic\n defined in the in attribute and the destination graphic\n defined in the in2 attribute are combined using the following\n formula:result = k1*i1*i2 + k2*i1 + k3*i2 + k4\n      where:\n\n      i1 and i2 indicate the corresponding pixel channel\n values of the input image, which map to in and in2 respectively,\n and k1, k2, k3, and k4 indicate the values of the attributes\n with the same name.\n    For <feMorphology>, operator defines\n whether to erode (i.e., thin) or dilate (fatten) the source\n graphic.This value thins the source graphic defined in\n the in attribute.This value fattens the source graphic\n defined in the in attribute.Last modified: Jul 12, 2022,\n by MDN contributors"
      },
      "radius": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The radius attribute represents the radius (or radii) for the\n operation on a given <feMorphology> filter primitive.If\n two numbers are provided, the first number represents\n the x-radius and the second one the y-radius. If one number\n is provided, then that value is used for both x and y.\n The values are in the coordinate system established by\n the primitiveUnits attribute on the <filter> element.A\n negative or zero value disables the effect of the given\n filter primitive (i.e., the result is the filter input\n image).You can use this attribute with the following SVG\n elements:BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "result": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The result attribute defines the assigned name for this filter\n primitive. If supplied, then graphics that result from\n processing this filter primitive can be referenced by\n an in attribute on a subsequent filter primitive within\n the same <filter> element. If no value is provided, the\n output will only be available for re-use as the implicit\n input into the next filter primitive if that filter primitive\n provides no value for its in attribute.You can use this\n attribute with the following SVG elements:This value is\n a <custom-ident> and defines the name for the filter primitive.\n It is only meaningful within a given <filter> element\n and thus has only local scope. It is legal for the same\n <filter-primitive-reference> to appear multiple times\n within the same <filter> element. When referenced, this\n value will use the closest preceding filter primitive\n with the given result.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/FeOffset.react.js": {
    "description": "FeOffset is a wrapper for the <feOffset> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/feOffset",
    "displayName": "FeOffset",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "colorInterpolationFilters": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"auto\"",
              "computed": false
            },
            {
              "value": "\"inherit\"",
              "computed": false
            },
            {
              "value": "\"linearRGB\"",
              "computed": false
            },
            {
              "value": "\"sRGB\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation-filters attribute specifies the color\n space for imaging operations performed via filter effects.Note:\n This property just has an affect on filter operations.\n Therefore, it has no effect on filter primitives like\n <feOffset>, <feImage>, <feTile> or <feFlood>.color-interpolation-filters\n has a different initial value than color-interpolation.\n color-interpolation-filters has an initial value of linearRGB,\n whereas color-interpolation has an initial value of sRGB.\n Thus, in the default case, filter effects operations occur\n in the linearRGB color space, whereas all other color\n interpolations occur by default in the sRGB color space.It\n has no affect on filter functions, which operate in the\n sRGB color space.Note: As a presentation attribute, color-interpolation-filters\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:Indicates that the user\n agent can choose either the sRGB or linearRGB spaces for\n color interpolation. This option indicates that the author\n doesn't require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "dx": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The dx attribute indicates a shift along the x-axis on the position\n of an element or its content.You can use this attribute\n with the following SVG elements:Warning: As of SVG2 <altGlyph>\n is deprecated and shouldn't be used.For <altGlyph>, if\n it contains a single value, dx defines a shift along the\n x-axis for all alternate glyph.If there are multiple values,\n dx defines a shift along the x-axis for each individual\n glyph relative to the preceding glyph. If there are less\n values than glyphs, the remaining glyphs use a value of\n 0. If there are more values than glyphs, extra values\n are ignored.For <feDropShadow>, dx defines the x offset\n of the dropped shadow. The unit used to resolve the value\n of the attribute is set by the primitiveUnits attribute\n of the <filter> element.For <feOffset>, dx defines the\n x offset of the filter input graphic. The unit used to\n resolve the value of the attribute is set by the primitiveUnits\n attribute of the <filter> element.Warning: As of SVG2\n <glyphRef> is deprecated and shouldn't be used.For <glyphRef>,\n dx defines the x offset of the glyph, in the font metric\n system.For <text>, if it contains a single value, dx defines\n a shift along the x-axis for all glyphs.If there are multiple\n values, dx defines a shift along the x-axis for each individual\n glyph relative to the preceding glyph. If there are less\n values than glyphs, the remaining glyphs use a value of\n 0. If there are more values than glyphs, extra values\n are ignored.Warning: As of SVG2 <tref> is deprecated and\n shouldn't be used.For <tref>, if it contains a single\n value, dx defines a shift along the x-axis for all glyphs.If\n there are multiple values, dx defines a shift along the\n x-axis for each individual glyph relative to the preceding\n glyph. If there are less values than glyphs, the remaining\n glyphs use a value of 0. If there are more values than\n glyphs, extra values are ignored.For <tspan>, if it contains\n a single value, dx defines a shift along the x-axis for\n all alternate glyph.If there are multiple values, dx defines\n a shift along the x-axis for each individual glyph relative\n to the preceding glyph. If there are less values than\n glyphs, the remaining glyphs use a value of 0. If there\n are more values than glyphs, extra values are ignored.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "dy": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The dy attribute indicates a shift along the y-axis on the position\n of an element or its content.You can use this attribute\n with the following SVG elements:Warning: As of SVG2 <altGlyph>\n is deprecated and shouldn't be used.For <altGlyph>, if\n it contains a single value, dy defines a shift along the\n y-axis for all alternate glyph.If there are multiple values,\n dy defines a shift along the y-axis for each individual\n glyph relative to the preceding glyph. If there are less\n values than glyphs, the remaining glyphs use a value of\n 0. If there are more values than glyphs, extra values\n are ignored.For <feDropShadow>, dy defines the y offset\n of the dropped shadow. The unit used to resolve the value\n of the attribute is set by the primitiveUnits attribute\n of the <filter> element.For <feOffset>, dy defines the\n y offset of the filter input graphic. The unit used to\n resolve the value of the attribute is set by the primitiveUnits\n attribute of the <filter> element.Warning: As of SVG2\n <glyphRef> is deprecated and shouldn't be used.For <glyphRef>,\n dy defines the y offset of the glyph, in the font metric\n system.For <text>, if it contains a single value, dy defines\n a shift along the y-axis for all glyphs.If there are multiple\n values, dy defines a shift along the y-axis for each individual\n glyph relative to the preceding glyph. If there are less\n values than glyphs, the remaining glyphs use a value of\n 0. If there are more values than glyphs, extra values\n are ignored.Warning: As of SVG2 <tref> is deprecated and\n shouldn't be used.For <tref>, if it contains a single\n value, dy defines a shift along the y-axis for all glyphs.If\n there are multiple values, dy defines a shift along the\n y-axis for each individual glyph relative to the preceding\n glyph. If there are less values than glyphs, the remaining\n glyphs use a value of 0. If there are more values than\n glyphs, extra values are ignored.For <tspan>, if it contains\n a single value, dy defines a shift along the y-axis for\n all alternate glyph.If there are multiple values, dy defines\n a shift along the y-axis for each individual glyph relative\n to the preceding glyph. If there are less values than\n glyphs, the remaining glyphs use a value of 0. If there\n are more values than glyphs, extra values are ignored.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "in": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The in attribute identifies input for the given filter primitive.The\n value can be either one of the six keywords defined below,\n or a string which matches a previous result attribute\n value within the same <filter> element. If no value is\n provided and this is the first filter primitive, then\n this filter primitive will use SourceGraphic as its input.\n If no value is provided and this is a subsequent filter\n primitive, then this filter primitive will use the result\n from the previous filter primitive as its input.If the\n value for result appears multiple times within a given\n <filter> element, then a reference to that result will\n use the closest preceding filter primitive with the given\n value for attribute result.You can use this attribute\n with the following SVG elements:This keyword represents\n the graphics elements that were the original input into\n the <filter> element.This keyword represents the graphics\n elements that were the original input into the <filter>\n element. SourceAlpha has all of the same rules as SourceGraphic\n except that only the alpha channel is used.This keyword\n represents an image snapshot of the SVG document under\n the filter region at the time that the <filter> element\n was invoked.Same as BackgroundImage except only the alpha\n channel is used.This keyword represents the value of the\n fill property on the target element for the filter effect.\n In many cases, the FillPaint is opaque everywhere, but\n that might not be the case if a shape is painted with\n a gradient or pattern which itself includes transparent\n or semi-transparent parts.This keyword represents the\n value of the stroke property on the target element for\n the filter effect. In many cases, the StrokePaint is opaque\n everywhere, but that might not be the case if a shape\n is painted with a gradient or pattern which itself includes\n transparent or semi-transparent parts.This value is an\n assigned name for the filter primitive in the form of\n a <custom-ident>. If supplied, then graphics that result\n from processing this filter primitive can be referenced\n by an in attribute on a subsequent filter primitive within\n the same filter element. If no value is provided, the\n output will only be available for re-use as the implicit\n input into the next filter primitive if that filter primitive\n provides no value for its in attribute.BackgroundImage\n is not supported as a filter source in modern browsers\n (see the feComposite compatibility table). We therefore\n need to import one of the images to blend inside the filter\n itself, using an <feImage> element.Note: Firefox Bug 455986\n means that feImage cannot load partial images, including\n circles, rectangles, paths or other fragments defined\n in the document. So that this example works on more browsers,\n a full external image of the logo is loaded.Last modified:\n Jul 1, 2022, by MDN contributors"
      },
      "result": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The result attribute defines the assigned name for this filter\n primitive. If supplied, then graphics that result from\n processing this filter primitive can be referenced by\n an in attribute on a subsequent filter primitive within\n the same <filter> element. If no value is provided, the\n output will only be available for re-use as the implicit\n input into the next filter primitive if that filter primitive\n provides no value for its in attribute.You can use this\n attribute with the following SVG elements:This value is\n a <custom-ident> and defines the name for the filter primitive.\n It is only meaningful within a given <filter> element\n and thus has only local scope. It is legal for the same\n <filter-primitive-reference> to appear multiple times\n within the same <filter> element. When referenced, this\n value will use the closest preceding filter primitive\n with the given result.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/FePointLight.react.js": {
    "description": "FePointLight is a wrapper for the <fePointLight> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/fePointLight",
    "displayName": "FePointLight",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "z": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The z attribute defines the location along the z-axis for a light\n source in the coordinate system established by the primitiveUnits\n attribute on the <filter> element, assuming that, in the\n initial coordinate system, the positive z-axis comes out\n towards the person viewing the content and assuming that\n one unit along the z-axis equals one unit in x and y.You\n can use this attribute with the following SVG elements:For\n <fePointLight>, z defines the location along the z-axis\n for the light source in the coordinate system established\n by the primitiveUnits attribute on the <filter> element.For\n <feSpotLight>, z defines the location along the z-axis\n for the light source in the coordinate system established\n by the primitiveUnits attribute on the <filter> element.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/FeSpecularLighting.react.js": {
    "description": "FeSpecularLighting is a wrapper for the <feSpecularLighting> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/feSpecularLighting",
    "displayName": "FeSpecularLighting",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "colorInterpolationFilters": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"auto\"",
              "computed": false
            },
            {
              "value": "\"inherit\"",
              "computed": false
            },
            {
              "value": "\"linearRGB\"",
              "computed": false
            },
            {
              "value": "\"sRGB\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation-filters attribute specifies the color\n space for imaging operations performed via filter effects.Note:\n This property just has an affect on filter operations.\n Therefore, it has no effect on filter primitives like\n <feOffset>, <feImage>, <feTile> or <feFlood>.color-interpolation-filters\n has a different initial value than color-interpolation.\n color-interpolation-filters has an initial value of linearRGB,\n whereas color-interpolation has an initial value of sRGB.\n Thus, in the default case, filter effects operations occur\n in the linearRGB color space, whereas all other color\n interpolations occur by default in the sRGB color space.It\n has no affect on filter functions, which operate in the\n sRGB color space.Note: As a presentation attribute, color-interpolation-filters\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:Indicates that the user\n agent can choose either the sRGB or linearRGB spaces for\n color interpolation. This option indicates that the author\n doesn't require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "in": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The in attribute identifies input for the given filter primitive.The\n value can be either one of the six keywords defined below,\n or a string which matches a previous result attribute\n value within the same <filter> element. If no value is\n provided and this is the first filter primitive, then\n this filter primitive will use SourceGraphic as its input.\n If no value is provided and this is a subsequent filter\n primitive, then this filter primitive will use the result\n from the previous filter primitive as its input.If the\n value for result appears multiple times within a given\n <filter> element, then a reference to that result will\n use the closest preceding filter primitive with the given\n value for attribute result.You can use this attribute\n with the following SVG elements:This keyword represents\n the graphics elements that were the original input into\n the <filter> element.This keyword represents the graphics\n elements that were the original input into the <filter>\n element. SourceAlpha has all of the same rules as SourceGraphic\n except that only the alpha channel is used.This keyword\n represents an image snapshot of the SVG document under\n the filter region at the time that the <filter> element\n was invoked.Same as BackgroundImage except only the alpha\n channel is used.This keyword represents the value of the\n fill property on the target element for the filter effect.\n In many cases, the FillPaint is opaque everywhere, but\n that might not be the case if a shape is painted with\n a gradient or pattern which itself includes transparent\n or semi-transparent parts.This keyword represents the\n value of the stroke property on the target element for\n the filter effect. In many cases, the StrokePaint is opaque\n everywhere, but that might not be the case if a shape\n is painted with a gradient or pattern which itself includes\n transparent or semi-transparent parts.This value is an\n assigned name for the filter primitive in the form of\n a <custom-ident>. If supplied, then graphics that result\n from processing this filter primitive can be referenced\n by an in attribute on a subsequent filter primitive within\n the same filter element. If no value is provided, the\n output will only be available for re-use as the implicit\n input into the next filter primitive if that filter primitive\n provides no value for its in attribute.BackgroundImage\n is not supported as a filter source in modern browsers\n (see the feComposite compatibility table). We therefore\n need to import one of the images to blend inside the filter\n itself, using an <feImage> element.Note: Firefox Bug 455986\n means that feImage cannot load partial images, including\n circles, rectangles, paths or other fragments defined\n in the document. So that this example works on more browsers,\n a full external image of the logo is loaded.Last modified:\n Jul 1, 2022, by MDN contributors"
      },
      "kernelUnitLength": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The kernelUnitLength attribute\n has two meanings based on the context it's used in. For\n lighting filter primitives, it indicates the intended\n distance for the x and y coordinates, for <feConvolveMatrix>,\n it indicates the intended distance between successive\n columns and rows in the kernel matrix.You can use this\n attribute with the following SVG elements:For the <feConvolveMatrix>,\n kernelUnitLength indicates the intended distance in current\n filter units (i.e., units as determined by the value of\n primitiveUnits attribute) between successive columns and\n rows, respectively, in the kernelMatrix. By specifying\n value(s) for kernelUnitLength, the kernel becomes defined\n in a scalable, abstract coordinate system. If the attribute\n is not specified, the default value is one pixel in the\n offscreen bitmap, which is a pixel-based coordinate system,\n and thus potentially not scalable.If a negative or zero\n value is specified the default value will be used instead.The\n first number is the x value. The second number is the\n y value. If the x value is not specified, it defaults\n to the same value as x.For the <feDiffuseLighting>, kernelUnitLength\n indicates the intended distance in current filter units\n (i.e., units as determined by the value of attribute primitiveUnits)\n for the x and y coordinate, respectively, in the surface\n normal calculation formulas.The first number is the x\n value. The second number is the y value. If the y value\n is not specified, it defaults to the same value as x.\n By specifying value(s) for kernelUnitLength, the kernel\n becomes defined in a scalable, abstract coordinate system.\n If the attribute is not specified, the x and y values\n represent very small deltas relative to a given position,\n which might be implemented in some cases as one pixel\n in the intermediate image offscreen bitmap, which is a\n pixel-based coordinate system, and thus potentially not\n scalable.If a negative or zero value is specified the\n default value will be used instead.For the <feSpecularLighting>,\n kernelUnitLength indicates the intended distance in current\n filter units (i.e., units as determined by the value of\n attribute primitiveUnits) for the x and y coordinate,\n respectively, in the surface normal calculation formulas.The\n first number is the x value. The second number is the\n y value. If the y value is not specified, it defaults\n to the same value as x. By specifying value(s) for kernelUnitLength,\n the kernel becomes defined in a scalable, abstract coordinate\n system. If the attribute is not specified, the x and y\n values represent very small deltas relative to a given\n position, which might be implemented in some cases as\n one pixel in the intermediate image offscreen bitmap,\n which is a pixel-based coordinate system, and thus potentially\n not scalable.If a negative or zero value is specified\n the default value will be used instead.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "lightingColor": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The lighting-color attribute defines the color of the light source\n for lighting filter primitives.You can use this attribute\n with the following SVG elements:BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "result": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The result attribute defines the assigned name for this filter\n primitive. If supplied, then graphics that result from\n processing this filter primitive can be referenced by\n an in attribute on a subsequent filter primitive within\n the same <filter> element. If no value is provided, the\n output will only be available for re-use as the implicit\n input into the next filter primitive if that filter primitive\n provides no value for its in attribute.You can use this\n attribute with the following SVG elements:This value is\n a <custom-ident> and defines the name for the filter primitive.\n It is only meaningful within a given <filter> element\n and thus has only local scope. It is legal for the same\n <filter-primitive-reference> to appear multiple times\n within the same <filter> element. When referenced, this\n value will use the closest preceding filter primitive\n with the given result.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "specularConstant": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The specularConstant attribute controls the ratio of reflection\n of the specular lighting. It represents the ks value in\n the Phong lighting model. The bigger the value the stronger\n the reflection.You can use this attribute with the following\n SVG elements:BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "specularExponent": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The specularExponent attribute controls the focus for the light\n source. The bigger the value the brighter the light.You\n can use this attribute with the following SVG elements:For\n <feSpecularLighting>, specularExponent defines the exponent\n value for the specular term.For <feSpotLight>, specularExponent\n defines the exponent value controlling the focus for the\n light source.Last modified: May 13, 2022, by MDN contributors"
      },
      "surfaceScale": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The surfaceScale attribute represents the height of the surface\n for a light filter primitive.You can use this attribute\n with the following SVG elements:For <feSpecularLighting>,\n surfaceScale defines the height of the surface.For <feDiffuseLighting>,\n surfaceScale defines the height of the surface.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/FeSpotLight.react.js": {
    "description": "FeSpotLight is a wrapper for the <feSpotLight> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/feSpotLight",
    "displayName": "FeSpotLight",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "colorInterpolationFilters": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"auto\"",
              "computed": false
            },
            {
              "value": "\"inherit\"",
              "computed": false
            },
            {
              "value": "\"linearRGB\"",
              "computed": false
            },
            {
              "value": "\"sRGB\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation-filters attribute specifies the color\n space for imaging operations performed via filter effects.Note:\n This property just has an affect on filter operations.\n Therefore, it has no effect on filter primitives like\n <feOffset>, <feImage>, <feTile> or <feFlood>.color-interpolation-filters\n has a different initial value than color-interpolation.\n color-interpolation-filters has an initial value of linearRGB,\n whereas color-interpolation has an initial value of sRGB.\n Thus, in the default case, filter effects operations occur\n in the linearRGB color space, whereas all other color\n interpolations occur by default in the sRGB color space.It\n has no affect on filter functions, which operate in the\n sRGB color space.Note: As a presentation attribute, color-interpolation-filters\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:Indicates that the user\n agent can choose either the sRGB or linearRGB spaces for\n color interpolation. This option indicates that the author\n doesn't require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "limitingConeAngle": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The limitingConeAngle attribute represents the angle in degrees\n between the spot light axis (i.e. the axis between the\n light source and the point to which it is pointing at)\n and the spot light cone. So it defines a limiting cone\n which restricts the region where the light is projected.\n No light is projected outside the cone.You can use this\n attribute with the following SVG elements:BCD tables only\n load in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "pointsAtX": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The pointsAtX attribute represents the x location in the coordinate\n system established by attribute primitiveUnits on the\n <filter> element of the point at which the light source\n is pointing.You can use this attribute with the following\n SVG elements:BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "pointsAtY": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The pointsAtY attribute represents the y location in the coordinate\n system established by attribute primitiveUnits on the\n <filter> element of the point at which the light source\n is pointing.You can use this attribute with the following\n SVG elements:BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "pointsAtZ": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The pointsAtZ attribute represents the y location in the coordinate\n system established by attribute primitiveUnits on the\n <filter> element of the point at which the light source\n is pointing, assuming that, in the initial local coordinate\n system, the positive z-axis comes out towards the person\n viewing the content and assuming that one unit along the\n z-axis equals one unit in x and y.You can use this attribute\n with the following SVG elements:BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "specularExponent": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The specularExponent attribute controls the focus for the light\n source. The bigger the value the brighter the light.You\n can use this attribute with the following SVG elements:For\n <feSpecularLighting>, specularExponent defines the exponent\n value for the specular term.For <feSpotLight>, specularExponent\n defines the exponent value controlling the focus for the\n light source.Last modified: May 13, 2022, by MDN contributors"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "z": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The z attribute defines the location along the z-axis for a light\n source in the coordinate system established by the primitiveUnits\n attribute on the <filter> element, assuming that, in the\n initial coordinate system, the positive z-axis comes out\n towards the person viewing the content and assuming that\n one unit along the z-axis equals one unit in x and y.You\n can use this attribute with the following SVG elements:For\n <fePointLight>, z defines the location along the z-axis\n for the light source in the coordinate system established\n by the primitiveUnits attribute on the <filter> element.For\n <feSpotLight>, z defines the location along the z-axis\n for the light source in the coordinate system established\n by the primitiveUnits attribute on the <filter> element.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/FeTile.react.js": {
    "description": "FeTile is a wrapper for the <feTile> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/feTile",
    "displayName": "FeTile",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "colorInterpolationFilters": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"auto\"",
              "computed": false
            },
            {
              "value": "\"inherit\"",
              "computed": false
            },
            {
              "value": "\"linearRGB\"",
              "computed": false
            },
            {
              "value": "\"sRGB\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation-filters attribute specifies the color\n space for imaging operations performed via filter effects.Note:\n This property just has an affect on filter operations.\n Therefore, it has no effect on filter primitives like\n <feOffset>, <feImage>, <feTile> or <feFlood>.color-interpolation-filters\n has a different initial value than color-interpolation.\n color-interpolation-filters has an initial value of linearRGB,\n whereas color-interpolation has an initial value of sRGB.\n Thus, in the default case, filter effects operations occur\n in the linearRGB color space, whereas all other color\n interpolations occur by default in the sRGB color space.It\n has no affect on filter functions, which operate in the\n sRGB color space.Note: As a presentation attribute, color-interpolation-filters\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:Indicates that the user\n agent can choose either the sRGB or linearRGB spaces for\n color interpolation. This option indicates that the author\n doesn't require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "in": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The in attribute identifies input for the given filter primitive.The\n value can be either one of the six keywords defined below,\n or a string which matches a previous result attribute\n value within the same <filter> element. If no value is\n provided and this is the first filter primitive, then\n this filter primitive will use SourceGraphic as its input.\n If no value is provided and this is a subsequent filter\n primitive, then this filter primitive will use the result\n from the previous filter primitive as its input.If the\n value for result appears multiple times within a given\n <filter> element, then a reference to that result will\n use the closest preceding filter primitive with the given\n value for attribute result.You can use this attribute\n with the following SVG elements:This keyword represents\n the graphics elements that were the original input into\n the <filter> element.This keyword represents the graphics\n elements that were the original input into the <filter>\n element. SourceAlpha has all of the same rules as SourceGraphic\n except that only the alpha channel is used.This keyword\n represents an image snapshot of the SVG document under\n the filter region at the time that the <filter> element\n was invoked.Same as BackgroundImage except only the alpha\n channel is used.This keyword represents the value of the\n fill property on the target element for the filter effect.\n In many cases, the FillPaint is opaque everywhere, but\n that might not be the case if a shape is painted with\n a gradient or pattern which itself includes transparent\n or semi-transparent parts.This keyword represents the\n value of the stroke property on the target element for\n the filter effect. In many cases, the StrokePaint is opaque\n everywhere, but that might not be the case if a shape\n is painted with a gradient or pattern which itself includes\n transparent or semi-transparent parts.This value is an\n assigned name for the filter primitive in the form of\n a <custom-ident>. If supplied, then graphics that result\n from processing this filter primitive can be referenced\n by an in attribute on a subsequent filter primitive within\n the same filter element. If no value is provided, the\n output will only be available for re-use as the implicit\n input into the next filter primitive if that filter primitive\n provides no value for its in attribute.BackgroundImage\n is not supported as a filter source in modern browsers\n (see the feComposite compatibility table). We therefore\n need to import one of the images to blend inside the filter\n itself, using an <feImage> element.Note: Firefox Bug 455986\n means that feImage cannot load partial images, including\n circles, rectangles, paths or other fragments defined\n in the document. So that this example works on more browsers,\n a full external image of the logo is loaded.Last modified:\n Jul 1, 2022, by MDN contributors"
      },
      "result": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The result attribute defines the assigned name for this filter\n primitive. If supplied, then graphics that result from\n processing this filter primitive can be referenced by\n an in attribute on a subsequent filter primitive within\n the same <filter> element. If no value is provided, the\n output will only be available for re-use as the implicit\n input into the next filter primitive if that filter primitive\n provides no value for its in attribute.You can use this\n attribute with the following SVG elements:This value is\n a <custom-ident> and defines the name for the filter primitive.\n It is only meaningful within a given <filter> element\n and thus has only local scope. It is legal for the same\n <filter-primitive-reference> to appear multiple times\n within the same <filter> element. When referenced, this\n value will use the closest preceding filter primitive\n with the given result.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/FeTurbulence.react.js": {
    "description": "FeTurbulence is a wrapper for the <feTurbulence> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/feTurbulence",
    "displayName": "FeTurbulence",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "baseFrequency": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The baseFrequency attribute represents the base frequency parameter\n for the noise function of the <feTurbulence> filter primitive.You\n can use this attribute with the following SVG elements:If\n two numbers are provided, the first one represents the\n base frequency in the horizontal direction and the second\n one the base frequency in the vertical direction. If one\n number is provided, then that value is used for both x\n and y.Negative values are forbidden.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "colorInterpolationFilters": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"auto\"",
              "computed": false
            },
            {
              "value": "\"inherit\"",
              "computed": false
            },
            {
              "value": "\"linearRGB\"",
              "computed": false
            },
            {
              "value": "\"sRGB\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation-filters attribute specifies the color\n space for imaging operations performed via filter effects.Note:\n This property just has an affect on filter operations.\n Therefore, it has no effect on filter primitives like\n <feOffset>, <feImage>, <feTile> or <feFlood>.color-interpolation-filters\n has a different initial value than color-interpolation.\n color-interpolation-filters has an initial value of linearRGB,\n whereas color-interpolation has an initial value of sRGB.\n Thus, in the default case, filter effects operations occur\n in the linearRGB color space, whereas all other color\n interpolations occur by default in the sRGB color space.It\n has no affect on filter functions, which operate in the\n sRGB color space.Note: As a presentation attribute, color-interpolation-filters\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:Indicates that the user\n agent can choose either the sRGB or linearRGB spaces for\n color interpolation. This option indicates that the author\n doesn't require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "numOctaves": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The numOctaves attribute defines the number of octaves for the\n noise function of the <feTurbulence> primitive.\n  An octave\n is a noise function defined by its frequency and amplitude.\n A turbulence is built by accumulating several octaves\n with increasing frequencies and decreasing amplitudes.\n\n  The higher the number of octaves, the more natural the\n noise looks. Though more octaves also require more calculations,\n resulting in a negative impact on performance.\nYou can\n use this attribute with the following SVG elements:Defines\n the number of octaves. Negative values are forbidden.BCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "result": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The result attribute defines the assigned name for this filter\n primitive. If supplied, then graphics that result from\n processing this filter primitive can be referenced by\n an in attribute on a subsequent filter primitive within\n the same <filter> element. If no value is provided, the\n output will only be available for re-use as the implicit\n input into the next filter primitive if that filter primitive\n provides no value for its in attribute.You can use this\n attribute with the following SVG elements:This value is\n a <custom-ident> and defines the name for the filter primitive.\n It is only meaningful within a given <filter> element\n and thus has only local scope. It is legal for the same\n <filter-primitive-reference> to appear multiple times\n within the same <filter> element. When referenced, this\n value will use the closest preceding filter primitive\n with the given result.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "seed": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The seed attribute represents the starting number for the pseudo\n random number generator of the <feTurbulence> filter primitive.You\n can use this attribute with the following SVG elements:BCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "stitchTiles": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stitchTiles attribute defines how the Perlin Noise tiles\n behave at the border.You can use this attribute with the\n following SVG elements:This value indicates that no attempt\n is made to achieve smooth transitions at the border of\n tiles which contain a turbulence function. Sometimes the\n result will show clear discontinuities at the tile borders.This\n value indicates that the user agent will automatically\n adjust the x and y values of the base frequency such that\n the <feTurbulence> node's width and height (i.e., the\n width and height of the current subregion) contain an\n integral number of the tile width and height for the first\n octave.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/Filter.react.js": {
    "description": "Filter is a wrapper for the <filter> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/filter",
    "displayName": "Filter",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "filterRes": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The filterRes attribute\n indicates the width and height of the intermediate images\n in pixels of a filter primitive.Take care when assigning\n a non-default value to this attribute. Too small of a\n value may result in unwanted pixelation in the result.\n Too large of a value may result in slow processing and\n large memory usage.Note that negative values or zero values\n disable the rendering of the element which referenced\n the filter.You can use this attribute with the following\n SVG elements:This value takes one or two values, the first\n one outlining the resolution in horizontal direction,\n the second one in vertical direction. If only one value\n is specified, it is used for both directions.BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "filterUnits": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The filterUnits attribute defines the coordinate system for the\n attributes x, y, width and height.You can use this attribute\n with the following SVG elements:x, y, width and height\n represent values in the current coordinate system that\n results from taking the current user coordinate system\n in place at the time when the <filter> element is referenced\n (i.e., the user coordinate system for the element referencing\n the <filter> element via a filter attribute).In that case,\n x, y, width and height represent fractions or percentages\n of the bounding box on the referencing element.BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "primitiveUnits": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The primitiveUnits attribute specifies the coordinate system\n for the various length values within the filter primitives\n and for the attributes that define the filter primitive\n subregion.You can use this attribute with the following\n SVG elements:This value indicates that any length values\n within the filter definitions represent values in the\n current user coordinate system in place at the time when\n the <filter> element is referenced (i.e., the user coordinate\n system for the element referencing the <filter> element\n via a filter attribute).This value indicates that any\n length values within the filter definitions represent\n fractions or percentages of the bounding box on the referencing\n element.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/ForeignObject.react.js": {
    "description": "ForeignObject is a wrapper for the <foreignObject> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/foreignObject",
    "displayName": "ForeignObject",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "clip": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The clip attribute is a\n presentation attribute defining the visible region of\n an element.This attribute has the same parameter values\n as defined for the css clip property. Unitless values,\n which indicate current user coordinates, are permitted\n on the coordinate values on the rect(). The value of auto\n defines a clipping path along the bounds of the viewport\n created by the given element.You can use this attribute\n with the following SVG elements:Warning: This property\n is deprecated. Use clip-path instead.The value auto defines\n a clipping path along the bounds of the viewport created\n by the given element. The value rect() defines a clipping\n rectangle following the following syntax: rect(<top>,\n <right>, <bottom>, <left>). The <top> and <bottom> values\n specify offsets from the top border edge of the element\n viewport, while <right> and <left> specify offsets from\n the left border edge of the element viewport.BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: Jun 28, 2022, by\n MDN contributors"
      },
      "colorInterpolation": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation attribute specifies the color space for\n gradient interpolations, color animations, and alpha compositing.Note:\n For filter effects, the color-interpolation-filters property\n controls which color space is used.The color-interpolation\n property chooses between color operations occurring in\n the sRGB color space or in a (light energy linear) linearized\n RGB color space. Having chosen the appropriate color space,\n component-wise linear interpolation is used.When a child\n element is blended into a background, the value of the\n color-interpolation property on the child determines the\n type of blending, not the value of the color-interpolation\n on the parent. For gradients which make use of the href\n or the deprecated xlink:href attribute to reference another\n gradient, the gradient uses the property's value from\n the gradient element which is directly referenced by the\n fill or stroke property. When animating colors, color\n interpolation is performed according to the value of the\n color-interpolation property on the element being animated.Note:\n As a presentation attribute, color-interpolation can be\n used as a CSS property.You can use this attribute with\n the following SVG elements:Indicates that the user agent\n can choose either the sRGB or linearRGB spaces for color\n interpolation. This option indicates that the author doesn't\n require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "opacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The opacity attribute specifies the transparency of an object\n or of a group of objects, that is, the degree to which\n the background behind the element is overlaid.Note: As\n a presentation attribute, opacity can be used as a CSS\n property. See the css opacity property for more information.You\n can use this attribute with the following SVG elements:The\n uniform opacity setting to be applied across an entire\n object, as a <number>. Any values outside the range 0.0\n (fully transparent) to 1.0 (fully opaque) will be clamped\n to this range.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "overflow": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The overflow attribute sets what to do when an element's content\n is too big to fit in its block formatting context. This\n feature is not widely implemented yet.This attribute has\n the same parameter values and meaning as the css overflow\n property, however, the following additional points apply:Note:\n Although the initial value for overflow is auto, it is\n overwritten in the User Agent style sheet for the <svg>\n element when it is not the root element of a stand-alone\n document, the <pattern> element, and the <marker> element\n to be hidden by default.Note: As a presentation attribute,\n overflow can be used as a CSS property. See the CSS overflow\n property for more information.You can use this attribute\n with the following SVG elements:For a description of the\n values, please see the css overflow property.BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "pointerEvents": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The pointer-events attribute is a presentation attribute that\n allows defining whether or when an element may be the\n target of a mouse event.Note: As a presentation attribute\n pointer-events can be used as a CSS property.You can use\n this attribute with the following SVG elements:For a detailed\n explanation of each possible value, have a look at the\n CSS pointer-events documentation.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "requiredFeatures": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The requiredFeatures attribute\n takes a list of feature strings, with the individual strings\n separated by white space. It determines whether or not\n all of the named features are supported by the browser;\n if all of them are supported, the attribute evaluates\n to true end the element is rendered; otherwise, the attribute\n evaluates to false and the current element and its children\n are skipped and thus will not be rendered. This provides\n a way to design SVG that gracefully falls back when features\n aren't available.If the attribute is not present, then\n its implicit evaluated value is true. If a null string\n or empty string value is given to attribute requiredFeatures,\n the attribute is evaluate to false.requiredFeatures is\n often used in conjunction with the <switch> element. If\n requiredFeatures is used in other situations, it represents\n a simple switch on the given element whether to render\n the element or not.To detect availability of an SVG feature\n from script, there is the (also deprecated) DOMImplementation.hasFeature()\n method.You can use this attribute with the following SVG\n elements:This is a list of feature strings, separated\n using white space. Determines whether all of the named\n features are supported by the browser. See Feature strings\n below for a list of allowed values.The following are the\n feature strings for the requiredFeatures attribute. These\n same feature strings apply to the hasFeature method call\n that is part of the SVG DOM's support for the DOMImplementation\n interface. In some cases the feature strings map directly\n to a set of attributes, properties or elements, in others\n they represent some functionality of the browser. Note\n that the format and naming for feature strings changed\n from SVG 1.0 to SVG 1.1. The SVG 1.0 feature strings are\n not listed here but can be found in the SVG Specification.\n Some browser support SVG 1.0 Feature strings for compatibility\n reasons. However, the SVG 1.0 feature strings are considered\n deprecated.At least one of the following feature is supported:At\n least one of the following feature is supported:The browser\n supports all the following features:The browser supports\n all of the DOM interfaces and methods that correspond\n to the language features for http://www.w3.org/TR/SVG11/feature#SVG-static.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-static\n plus the feature http://www.w3.org/TR/SVG11/feature#Animation.The\n browser supports all of the DOM interfaces and methods\n that correspond to the language features for http://www.w3.org/TR/SVG11/feature#SVG-animation.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-animation\n plus the following features:The browser supports all of\n the DOM interfaces and methods that correspond to the\n language features for http://www.w3.org/TR/SVG11/feature#SVG-dynamic.The\n browser supports the id, xml:base, xml:lang and xml:space\n attributesThe browser supports <svg>, <g>, <defs>, <desc>,\n <title>, <metadata>, <symbol> and <use> elements.The browser\n supports <svg>, <g>, <defs>, <desc>, <title>, <metadata>\n and <use> elements.The browser supports the enable-background\n attributeThe browser supports the <switch> element, and\n the requiredFeatures, requiredExtensions, systemLanguage\n attributesThe browser supports the <image> element.The\n browser supports the <style> element.The browser supports\n the clip and overflow attributes.The browser supports\n the <rect>, <circle>, <line>, <polyline>, <polygon>, <ellipse>\n and <path> elements.The browser supports the <text>, <tspan>,\n <tref>, <textPath>, <altGlyph>, <altGlyphDef>, <altGlyphItem>\n and <glyphRef> elements.The browser supports the <text>\n elementThe browser supports the color, fill, fill-rule,\n stroke, stroke-dasharray, stroke-dashoffset, stroke-linecap,\n stroke-linejoin, stroke-miterlimit, stroke-width, color-interpolation\n and color-rendering attributesThe browser supports the\n color, fill, fill-rule, stroke, stroke-dasharray, stroke-dashoffset,\n stroke-linecap, stroke-linejoin, stroke-miterlimit, stroke-width\n and color-rendering attributesThe browser supports the\n opacity, stroke-opacity and fill-opacity attributesThe\n browser supports the display, image-rendering, pointer-events,\n shape-rendering, text-rendering and visibility attributesThe\n browser supports the display and visibility attributesThe\n browser supports the <marker> elementThe browser supports\n the <linearGradient>, <radialGradient> and <stop> elementsThe\n browser supports the <pattern> elementThe browser supports\n the <clipPath> element and the clip-path, clip-rule attributesThe\n browser supports the <clipPath> element and the clip-path\n attributeThe browser supports the <mask> elementThe browser\n supports the <filter>, <feBlend>, <feColorMatrix>, <feComponentTransfer>,\n <feComposite>, <feConvolveMatrix>, <feDiffuseLighting>,\n <feDisplacementMap>, <feFlood>, <feGaussianBlur>, <feImage>,\n <feMerge>, <feMergeNode>, <feMorphology>, <feOffset>,\n <feSpecularLighting>, <feTile>, <feDistantLight>, <fePointLight>,\n <feSpotLight>, <feFuncR>, <feFuncG>, <feFuncB> and <feFuncA>\n elementsThe browser supports the <filter>, <feBlend>,\n <feColorMatrix>, <feComponentTransfer>, <feComposite>,\n <feFlood>, <feGaussianBlur>, <feImage>, <feMerge>, <feMergeNode>,\n <feOffset>, <feTile>, <feFuncR>, <feFuncG>, <feFuncB>\n and <feFuncA> elementsThe browser supports the onunload,\n onabort, onerror, onresize, onscroll and onzoom attributesThe\n browser supports the onfocusin, onfocusout, onactivate,\n onclick, onmousedown, onmouseup, onmouseover, onmousemove,\n onmouseout and onload attributesThe browser supports the\n onbegin, onend, onrepeat and onload attributesThe browser\n supports the <cursor> elementThe browser supports the\n <a> elementThe browser supports the xlink:type, xlink:href,\n xlink:role, xlink:arcrole, xlink:title, xlink:show and\n xlink:actuate attributesThe browser supports the <view>\n elementThe browser supports the <script> elementThe browser\n supports the <animate>, <set>, <animateMotion>, <animateTransform>,\n <animateColor> and <mpath> elementsThe browser supports\n the <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <vkern>, <font-face-src>, <font-face-uri>, <font-face-format>\n and <font-face-name> elementsThe browser supports the\n <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <font-face-src> and <font-face-name> elementsThe browser\n supports the <foreignObject> elementSee also requiredFeatures.svgBCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "systemLanguage": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The systemLanguage attribute represents a list of supported language\n tags. This list is matched against the language defined\n in the user preferences.You can use this attribute with\n the following SVG elements:The value is a set of comma-separated\n tokens, each of which must be a language tag, as defined\n in RFC 5646: Tags for Identifying Languages (also known\n as BCP 47).systemLanguage is often used in conjunction\n with the <switch> element. If the attribute is used in\n other situations, then it represents a simple switch on\n the given element whether to render the element or not.Note:\n If several alternative language objects are enclosed in\n a <switch> and none of them matches, this may lead to\n situations where no content is displayed. It is thus recommended\n to include a \"catch-all\" choice at the end of such a <switch>\n which is acceptable in all cases.The attribute evaluates\n to \"true\" if one of the language tags indicated by user\n preferences is a case-insensitive match or prefix (followed\n by a \"-\") of one of the language tags given in the value\n of this parameter. Otherwise it evaluates to \"false\".Note:\n The prefix matching rule does not imply that if a user\n understands a language with a certain tag, that the user\n will also understand all languages with the tag as prefix.If\n the attribute is not present, then it implicitly evaluates\n to \"true\". If a null string or empty string value is given,\n the attribute evaluates to \"false\".The prefix rule allows\n the use of prefix tags if this is the case.Multiple languages\n may be listed for content that is intended for multiple\n audiences. For example, content that is presented simultaneously\n in the original Maori and English versions, would call\n for:However, just because multiple languages are present\n within the object on which the systemLanguage test attribute\n is placed, this does not mean that it is intended for\n multiple linguistic audiences. An example would be a beginner's\n language primer, such as \"A First Lesson in Latin,\" which\n is clearly intended to be used by an English-literate\n audience. In this case, the attribute should only include\n en.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "vectorEffect": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The vector-effect property specifies the vector effect to use\n when drawing an object. Vector effects are applied before\n any of the other compositing operations, i.e. filters,\n masks and clips.Note: As a presentation attribute, vector-effect\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:This value specifies that\n no vector effect shall be applied, i.e. the default rendering\n behavior is used which is to first fill the geometry of\n a shape with a specified paint, then stroke the outline\n with a specified paint.This value modifies the way an\n object is stroked. Normally stroking involves calculating\n stroke outline of the shape's path in current user coordinate\n system and filling that outline with the stroke paint\n (color or gradient). The resulting visual effect of this\n value is that the stroke width is not dependent on the\n transformations of the element (including non-uniform\n scaling and shear transformations) and zoom level.This\n value specifies a special user coordinate system used\n by the element and its descendants. The scale of that\n user coordinate system does not change in spite of any\n transformation changes from a host coordinate space. However,\n it does not specify the suppression of rotation and skew.\n Also, it does not specify the origin of the user coordinate\n system. Since this value suppresses scaling of the user\n coordinate system, it also has the characteristics of\n non-scaling-stroke.This value specifies a special user\n coordinate system used by the element and its descendants.\n The rotation and skew of that user coordinate system is\n suppressed in spite of any transformation changes from\n a host coordinate space. However, it does not specify\n the suppression of scaling. Also, it does not specify\n the origin of user coordinate system.This value specifies\n a special user coordinate system used by the element and\n its descendants. The position of user coordinate system\n is fixed in spite of any transformation changes from a\n host coordinate space. However, it does not specify the\n suppression of rotation, skew and scaling. When this vector\n effect and the transform property are defined at the same\n time, that property is consumed for this effect.BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "visibility": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The visibility attribute lets you control the visibility of graphical\n elements. With a value of hidden or collapse the current\n graphics element is invisible.Note: If the visibility\n attribute is set to hidden on a text element, then the\n text is invisible but still takes up space in text layout\n calculations.Depending on the value of attribute pointer-events,\n graphics elements which have their visibility attribute\n set to hidden still might receive events.Note: As a presentation\n attribute, visibility can be used as a CSS property. See\n the css visibility property for more information.You can\n use this attribute with the following SVG elements:The\n following example toggles the CSS visibility of the SVG\n image path.This value indicates that the element will\n be painted.This value indicates that the element will\n not be painted. Though it is still part of the rendering\n tree, i.e. it may receive pointer events depending on\n the pointer-events attribute, may receive focus depending\n on the tabindex attribute, contributes to bounding box\n calculations and clipping paths, and does affect text\n layout.This value is equal to hidden.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/G.react.js": {
    "description": "G is a wrapper for the <g> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/g",
    "displayName": "G",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "clipPath": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The clip-path presentation attribute defines or associates a\n clipping path with the element it is related to.Note:\n As a presentation attribute clip-path can be used as a\n CSS property.You can use this attribute with the following\n SVG elements:An extra information to tell how a <basic-shape>\n is applied to an element: fill-box indicates to use the\n object bounding box; stroke-box indicates to use the object\n bounding box extended with the stroke; view-box indicates\n to use the nearest SVG viewport as the reference box.Note:\n For more details on the clip-path syntax, see the CSS\n property clip-path reference page.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "colorInterpolation": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation attribute specifies the color space for\n gradient interpolations, color animations, and alpha compositing.Note:\n For filter effects, the color-interpolation-filters property\n controls which color space is used.The color-interpolation\n property chooses between color operations occurring in\n the sRGB color space or in a (light energy linear) linearized\n RGB color space. Having chosen the appropriate color space,\n component-wise linear interpolation is used.When a child\n element is blended into a background, the value of the\n color-interpolation property on the child determines the\n type of blending, not the value of the color-interpolation\n on the parent. For gradients which make use of the href\n or the deprecated xlink:href attribute to reference another\n gradient, the gradient uses the property's value from\n the gradient element which is directly referenced by the\n fill or stroke property. When animating colors, color\n interpolation is performed according to the value of the\n color-interpolation property on the element being animated.Note:\n As a presentation attribute, color-interpolation can be\n used as a CSS property.You can use this attribute with\n the following SVG elements:Indicates that the user agent\n can choose either the sRGB or linearRGB spaces for color\n interpolation. This option indicates that the author doesn't\n require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "enableBackground": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The enable-background attribute\n specifies how the accumulation of the background image\n is managed.Note: As a presentation attribute, enable-background\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:If an ancestor container\n element has a property value of enable-background: new,\n then all graphics elements within the current container\n element are rendered both onto the parent container element's\n background image canvas and onto the target device.Otherwise,\n there is no current background image canvas, so graphics\n elements are only rendered onto the target device.This\n value enables the ability of children of the current container\n element to access the background image.It also indicates\n that a new (i.e., initially transparent black) background\n image canvas is established and that in effect all children\n of the current container element shall be rendered into\n the new background image canvas in addition to being rendered\n onto the target device.\n      The optional <x>, <y>, <width>,\n and <height> parameters are <number> values that indicate\n the subregion of the container element's user space where\n access to the background image is allowed to happen. Those\n values act as a clipping rectangle on the background image\n canvas.\n      Negative values for <width> or <height>\n are forbidden. If one, two, or three values are specified\n or if neither <width> nor <height> are specified, the\n BackgroundImage and BackgroundAlpha of a filter primitive\n are processed as if background image processing were not\n enabled.\n    BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 17, 2022, by MDN contributors"
      },
      "mask": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The mask attribute is a presentation attribute mainly used to\n bind a given <mask> element with the element the attribute\n belongs to.Note: As a presentation attribute mask can\n be used as a CSS property.You can use this attribute with\n the following SVG elements:Since SVG2, the mask attribute\n is defined as a css property and is a shorthand for many\n other properties: mask-image, mask-mode, mask-repeat,\n mask-position, mask-clip, mask-origin, mask-size, and\n mask-composite.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "opacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The opacity attribute specifies the transparency of an object\n or of a group of objects, that is, the degree to which\n the background behind the element is overlaid.Note: As\n a presentation attribute, opacity can be used as a CSS\n property. See the css opacity property for more information.You\n can use this attribute with the following SVG elements:The\n uniform opacity setting to be applied across an entire\n object, as a <number>. Any values outside the range 0.0\n (fully transparent) to 1.0 (fully opaque) will be clamped\n to this range.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "pointerEvents": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The pointer-events attribute is a presentation attribute that\n allows defining whether or when an element may be the\n target of a mouse event.Note: As a presentation attribute\n pointer-events can be used as a CSS property.You can use\n this attribute with the following SVG elements:For a detailed\n explanation of each possible value, have a look at the\n CSS pointer-events documentation.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "requiredFeatures": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The requiredFeatures attribute\n takes a list of feature strings, with the individual strings\n separated by white space. It determines whether or not\n all of the named features are supported by the browser;\n if all of them are supported, the attribute evaluates\n to true end the element is rendered; otherwise, the attribute\n evaluates to false and the current element and its children\n are skipped and thus will not be rendered. This provides\n a way to design SVG that gracefully falls back when features\n aren't available.If the attribute is not present, then\n its implicit evaluated value is true. If a null string\n or empty string value is given to attribute requiredFeatures,\n the attribute is evaluate to false.requiredFeatures is\n often used in conjunction with the <switch> element. If\n requiredFeatures is used in other situations, it represents\n a simple switch on the given element whether to render\n the element or not.To detect availability of an SVG feature\n from script, there is the (also deprecated) DOMImplementation.hasFeature()\n method.You can use this attribute with the following SVG\n elements:This is a list of feature strings, separated\n using white space. Determines whether all of the named\n features are supported by the browser. See Feature strings\n below for a list of allowed values.The following are the\n feature strings for the requiredFeatures attribute. These\n same feature strings apply to the hasFeature method call\n that is part of the SVG DOM's support for the DOMImplementation\n interface. In some cases the feature strings map directly\n to a set of attributes, properties or elements, in others\n they represent some functionality of the browser. Note\n that the format and naming for feature strings changed\n from SVG 1.0 to SVG 1.1. The SVG 1.0 feature strings are\n not listed here but can be found in the SVG Specification.\n Some browser support SVG 1.0 Feature strings for compatibility\n reasons. However, the SVG 1.0 feature strings are considered\n deprecated.At least one of the following feature is supported:At\n least one of the following feature is supported:The browser\n supports all the following features:The browser supports\n all of the DOM interfaces and methods that correspond\n to the language features for http://www.w3.org/TR/SVG11/feature#SVG-static.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-static\n plus the feature http://www.w3.org/TR/SVG11/feature#Animation.The\n browser supports all of the DOM interfaces and methods\n that correspond to the language features for http://www.w3.org/TR/SVG11/feature#SVG-animation.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-animation\n plus the following features:The browser supports all of\n the DOM interfaces and methods that correspond to the\n language features for http://www.w3.org/TR/SVG11/feature#SVG-dynamic.The\n browser supports the id, xml:base, xml:lang and xml:space\n attributesThe browser supports <svg>, <g>, <defs>, <desc>,\n <title>, <metadata>, <symbol> and <use> elements.The browser\n supports <svg>, <g>, <defs>, <desc>, <title>, <metadata>\n and <use> elements.The browser supports the enable-background\n attributeThe browser supports the <switch> element, and\n the requiredFeatures, requiredExtensions, systemLanguage\n attributesThe browser supports the <image> element.The\n browser supports the <style> element.The browser supports\n the clip and overflow attributes.The browser supports\n the <rect>, <circle>, <line>, <polyline>, <polygon>, <ellipse>\n and <path> elements.The browser supports the <text>, <tspan>,\n <tref>, <textPath>, <altGlyph>, <altGlyphDef>, <altGlyphItem>\n and <glyphRef> elements.The browser supports the <text>\n elementThe browser supports the color, fill, fill-rule,\n stroke, stroke-dasharray, stroke-dashoffset, stroke-linecap,\n stroke-linejoin, stroke-miterlimit, stroke-width, color-interpolation\n and color-rendering attributesThe browser supports the\n color, fill, fill-rule, stroke, stroke-dasharray, stroke-dashoffset,\n stroke-linecap, stroke-linejoin, stroke-miterlimit, stroke-width\n and color-rendering attributesThe browser supports the\n opacity, stroke-opacity and fill-opacity attributesThe\n browser supports the display, image-rendering, pointer-events,\n shape-rendering, text-rendering and visibility attributesThe\n browser supports the display and visibility attributesThe\n browser supports the <marker> elementThe browser supports\n the <linearGradient>, <radialGradient> and <stop> elementsThe\n browser supports the <pattern> elementThe browser supports\n the <clipPath> element and the clip-path, clip-rule attributesThe\n browser supports the <clipPath> element and the clip-path\n attributeThe browser supports the <mask> elementThe browser\n supports the <filter>, <feBlend>, <feColorMatrix>, <feComponentTransfer>,\n <feComposite>, <feConvolveMatrix>, <feDiffuseLighting>,\n <feDisplacementMap>, <feFlood>, <feGaussianBlur>, <feImage>,\n <feMerge>, <feMergeNode>, <feMorphology>, <feOffset>,\n <feSpecularLighting>, <feTile>, <feDistantLight>, <fePointLight>,\n <feSpotLight>, <feFuncR>, <feFuncG>, <feFuncB> and <feFuncA>\n elementsThe browser supports the <filter>, <feBlend>,\n <feColorMatrix>, <feComponentTransfer>, <feComposite>,\n <feFlood>, <feGaussianBlur>, <feImage>, <feMerge>, <feMergeNode>,\n <feOffset>, <feTile>, <feFuncR>, <feFuncG>, <feFuncB>\n and <feFuncA> elementsThe browser supports the onunload,\n onabort, onerror, onresize, onscroll and onzoom attributesThe\n browser supports the onfocusin, onfocusout, onactivate,\n onclick, onmousedown, onmouseup, onmouseover, onmousemove,\n onmouseout and onload attributesThe browser supports the\n onbegin, onend, onrepeat and onload attributesThe browser\n supports the <cursor> elementThe browser supports the\n <a> elementThe browser supports the xlink:type, xlink:href,\n xlink:role, xlink:arcrole, xlink:title, xlink:show and\n xlink:actuate attributesThe browser supports the <view>\n elementThe browser supports the <script> elementThe browser\n supports the <animate>, <set>, <animateMotion>, <animateTransform>,\n <animateColor> and <mpath> elementsThe browser supports\n the <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <vkern>, <font-face-src>, <font-face-uri>, <font-face-format>\n and <font-face-name> elementsThe browser supports the\n <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <font-face-src> and <font-face-name> elementsThe browser\n supports the <foreignObject> elementSee also requiredFeatures.svgBCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "systemLanguage": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The systemLanguage attribute represents a list of supported language\n tags. This list is matched against the language defined\n in the user preferences.You can use this attribute with\n the following SVG elements:The value is a set of comma-separated\n tokens, each of which must be a language tag, as defined\n in RFC 5646: Tags for Identifying Languages (also known\n as BCP 47).systemLanguage is often used in conjunction\n with the <switch> element. If the attribute is used in\n other situations, then it represents a simple switch on\n the given element whether to render the element or not.Note:\n If several alternative language objects are enclosed in\n a <switch> and none of them matches, this may lead to\n situations where no content is displayed. It is thus recommended\n to include a \"catch-all\" choice at the end of such a <switch>\n which is acceptable in all cases.The attribute evaluates\n to \"true\" if one of the language tags indicated by user\n preferences is a case-insensitive match or prefix (followed\n by a \"-\") of one of the language tags given in the value\n of this parameter. Otherwise it evaluates to \"false\".Note:\n The prefix matching rule does not imply that if a user\n understands a language with a certain tag, that the user\n will also understand all languages with the tag as prefix.If\n the attribute is not present, then it implicitly evaluates\n to \"true\". If a null string or empty string value is given,\n the attribute evaluates to \"false\".The prefix rule allows\n the use of prefix tags if this is the case.Multiple languages\n may be listed for content that is intended for multiple\n audiences. For example, content that is presented simultaneously\n in the original Maori and English versions, would call\n for:However, just because multiple languages are present\n within the object on which the systemLanguage test attribute\n is placed, this does not mean that it is intended for\n multiple linguistic audiences. An example would be a beginner's\n language primer, such as \"A First Lesson in Latin,\" which\n is clearly intended to be used by an English-literate\n audience. In this case, the attribute should only include\n en.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/Image.react.js": {
    "description": "Image is a wrapper for the <image> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/image",
    "displayName": "Image",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "clip": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The clip attribute is a\n presentation attribute defining the visible region of\n an element.This attribute has the same parameter values\n as defined for the css clip property. Unitless values,\n which indicate current user coordinates, are permitted\n on the coordinate values on the rect(). The value of auto\n defines a clipping path along the bounds of the viewport\n created by the given element.You can use this attribute\n with the following SVG elements:Warning: This property\n is deprecated. Use clip-path instead.The value auto defines\n a clipping path along the bounds of the viewport created\n by the given element. The value rect() defines a clipping\n rectangle following the following syntax: rect(<top>,\n <right>, <bottom>, <left>). The <top> and <bottom> values\n specify offsets from the top border edge of the element\n viewport, while <right> and <left> specify offsets from\n the left border edge of the element viewport.BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: Jun 28, 2022, by\n MDN contributors"
      },
      "clipPath": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The clip-path presentation attribute defines or associates a\n clipping path with the element it is related to.Note:\n As a presentation attribute clip-path can be used as a\n CSS property.You can use this attribute with the following\n SVG elements:An extra information to tell how a <basic-shape>\n is applied to an element: fill-box indicates to use the\n object bounding box; stroke-box indicates to use the object\n bounding box extended with the stroke; view-box indicates\n to use the nearest SVG viewport as the reference box.Note:\n For more details on the clip-path syntax, see the CSS\n property clip-path reference page.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "colorInterpolation": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation attribute specifies the color space for\n gradient interpolations, color animations, and alpha compositing.Note:\n For filter effects, the color-interpolation-filters property\n controls which color space is used.The color-interpolation\n property chooses between color operations occurring in\n the sRGB color space or in a (light energy linear) linearized\n RGB color space. Having chosen the appropriate color space,\n component-wise linear interpolation is used.When a child\n element is blended into a background, the value of the\n color-interpolation property on the child determines the\n type of blending, not the value of the color-interpolation\n on the parent. For gradients which make use of the href\n or the deprecated xlink:href attribute to reference another\n gradient, the gradient uses the property's value from\n the gradient element which is directly referenced by the\n fill or stroke property. When animating colors, color\n interpolation is performed according to the value of the\n color-interpolation property on the element being animated.Note:\n As a presentation attribute, color-interpolation can be\n used as a CSS property.You can use this attribute with\n the following SVG elements:Indicates that the user agent\n can choose either the sRGB or linearRGB spaces for color\n interpolation. This option indicates that the author doesn't\n require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "colorProfile": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The color-profile attribute\n is used to define which color profile a raster image included\n through the <image> element should use.Note: As a presentation\n attribute, color-profile can be used as a CSS property.You\n can use this attribute with the following SVG elements:All\n colors are presumed to be defined in the sRGB color space\n unless a more precise embedded profile is specified within\n content data. For images that do have a profile built\n into their data, that profile is used. For images that\n do not have a profile, the sRGB profile is used.The source\n profile is assumed to be sRGB. This differs from auto\n in that it overrides an embedded profile inside an image.A\n name corresponding to a defined color profile that is\n in the browser's color profile description database. The\n browser searches the color profile description database\n for a color profile description entry whose name descriptor\n matches <name> and uses the last matching entry that is\n found. If a match is found, the corresponding profile\n overrides an embedded profile inside an image. If no match\n is found, then the embedded profile inside the image is\n used.An IRI reference to the source color profile. The\n referenced color profile overrides an embedded profile\n inside the image.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "imageRendering": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The image-rendering attribute provides a hint to the browser\n about how to make speed vs. quality tradeoffs as it performs\n image processing.The resampling is always done in a truecolor\n (e.g., 24-bit) color space even if the original data and/or\n the target device is indexed color.Note: As a presentation\n attribute, image-rendering can be used as a CSS property.\n See the css image-rendering property for more information.You\n can use this attribute with the following SVG elements:Indicates\n that the user agent shall make appropriate tradeoffs to\n balance speed and quality, but quality shall be given\n more importance than speed.Indicates that the user agent\n shall emphasize rendering speed over quality.Indicates\n that the user agent shall emphasize quality over rendering\n speed.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "mask": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The mask attribute is a presentation attribute mainly used to\n bind a given <mask> element with the element the attribute\n belongs to.Note: As a presentation attribute mask can\n be used as a CSS property.You can use this attribute with\n the following SVG elements:Since SVG2, the mask attribute\n is defined as a css property and is a shorthand for many\n other properties: mask-image, mask-mode, mask-repeat,\n mask-position, mask-clip, mask-origin, mask-size, and\n mask-composite.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "opacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The opacity attribute specifies the transparency of an object\n or of a group of objects, that is, the degree to which\n the background behind the element is overlaid.Note: As\n a presentation attribute, opacity can be used as a CSS\n property. See the css opacity property for more information.You\n can use this attribute with the following SVG elements:The\n uniform opacity setting to be applied across an entire\n object, as a <number>. Any values outside the range 0.0\n (fully transparent) to 1.0 (fully opaque) will be clamped\n to this range.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "overflow": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The overflow attribute sets what to do when an element's content\n is too big to fit in its block formatting context. This\n feature is not widely implemented yet.This attribute has\n the same parameter values and meaning as the css overflow\n property, however, the following additional points apply:Note:\n Although the initial value for overflow is auto, it is\n overwritten in the User Agent style sheet for the <svg>\n element when it is not the root element of a stand-alone\n document, the <pattern> element, and the <marker> element\n to be hidden by default.Note: As a presentation attribute,\n overflow can be used as a CSS property. See the CSS overflow\n property for more information.You can use this attribute\n with the following SVG elements:For a description of the\n values, please see the css overflow property.BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "pointerEvents": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The pointer-events attribute is a presentation attribute that\n allows defining whether or when an element may be the\n target of a mouse event.Note: As a presentation attribute\n pointer-events can be used as a CSS property.You can use\n this attribute with the following SVG elements:For a detailed\n explanation of each possible value, have a look at the\n CSS pointer-events documentation.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "preserveAspectRatio": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The preserveAspectRatio attribute indicates how an element with\n a viewBox providing a given aspect ratio must fit into\n a viewport with a different aspect ratio.Because the aspect\n ratio of an SVG image is defined by the viewBox attribute,\n if this attribute isn't set, the preserveAspectRatio attribute\n has no effect (with one exception, the <image> element,\n as described below).Its value is made of one or two keywords:\n A required alignment value and an optional \"meet or slice\"\n reference as described below:The alignment value indicates\n whether to force uniform scaling and, if so, the alignment\n method to use in case the aspect ratio of the viewBox\n doesn't match the aspect ratio of the viewport. The alignment\n value must be one of the following keywords:The meet or\n slice reference is optional and, if provided, must be\n one of the following keywords:You can use this attribute\n with the following SVG elements:For <feImage>, preserveAspectRatio\n defines how the referenced image should fit in the rectangle\n define by the <feImage> element.For <image>, preserveAspectRatio\n defines how the referenced image should fit in the rectangle\n define by the <image> element.For <marker>, preserveAspectRatio\n indicates if a uniform scaling must be performed to fit\n the element viewport.For <pattern>, preserveAspectRatio\n indicates if a uniform scaling must be performed to fit\n the element viewport.For <svg>, preserveAspectRatio indicates\n if a uniform scaling must be performed to fit the element\n viewport.For <symbol>, preserveAspectRatio indicates if\n a uniform scaling must be performed to fit the element\n viewport.For <view>, preserveAspectRatio indicates if\n a uniform scaling must be performed to fit the element\n viewport.Last modified: May 13, 2022, by MDN contributors"
      },
      "requiredFeatures": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The requiredFeatures attribute\n takes a list of feature strings, with the individual strings\n separated by white space. It determines whether or not\n all of the named features are supported by the browser;\n if all of them are supported, the attribute evaluates\n to true end the element is rendered; otherwise, the attribute\n evaluates to false and the current element and its children\n are skipped and thus will not be rendered. This provides\n a way to design SVG that gracefully falls back when features\n aren't available.If the attribute is not present, then\n its implicit evaluated value is true. If a null string\n or empty string value is given to attribute requiredFeatures,\n the attribute is evaluate to false.requiredFeatures is\n often used in conjunction with the <switch> element. If\n requiredFeatures is used in other situations, it represents\n a simple switch on the given element whether to render\n the element or not.To detect availability of an SVG feature\n from script, there is the (also deprecated) DOMImplementation.hasFeature()\n method.You can use this attribute with the following SVG\n elements:This is a list of feature strings, separated\n using white space. Determines whether all of the named\n features are supported by the browser. See Feature strings\n below for a list of allowed values.The following are the\n feature strings for the requiredFeatures attribute. These\n same feature strings apply to the hasFeature method call\n that is part of the SVG DOM's support for the DOMImplementation\n interface. In some cases the feature strings map directly\n to a set of attributes, properties or elements, in others\n they represent some functionality of the browser. Note\n that the format and naming for feature strings changed\n from SVG 1.0 to SVG 1.1. The SVG 1.0 feature strings are\n not listed here but can be found in the SVG Specification.\n Some browser support SVG 1.0 Feature strings for compatibility\n reasons. However, the SVG 1.0 feature strings are considered\n deprecated.At least one of the following feature is supported:At\n least one of the following feature is supported:The browser\n supports all the following features:The browser supports\n all of the DOM interfaces and methods that correspond\n to the language features for http://www.w3.org/TR/SVG11/feature#SVG-static.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-static\n plus the feature http://www.w3.org/TR/SVG11/feature#Animation.The\n browser supports all of the DOM interfaces and methods\n that correspond to the language features for http://www.w3.org/TR/SVG11/feature#SVG-animation.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-animation\n plus the following features:The browser supports all of\n the DOM interfaces and methods that correspond to the\n language features for http://www.w3.org/TR/SVG11/feature#SVG-dynamic.The\n browser supports the id, xml:base, xml:lang and xml:space\n attributesThe browser supports <svg>, <g>, <defs>, <desc>,\n <title>, <metadata>, <symbol> and <use> elements.The browser\n supports <svg>, <g>, <defs>, <desc>, <title>, <metadata>\n and <use> elements.The browser supports the enable-background\n attributeThe browser supports the <switch> element, and\n the requiredFeatures, requiredExtensions, systemLanguage\n attributesThe browser supports the <image> element.The\n browser supports the <style> element.The browser supports\n the clip and overflow attributes.The browser supports\n the <rect>, <circle>, <line>, <polyline>, <polygon>, <ellipse>\n and <path> elements.The browser supports the <text>, <tspan>,\n <tref>, <textPath>, <altGlyph>, <altGlyphDef>, <altGlyphItem>\n and <glyphRef> elements.The browser supports the <text>\n elementThe browser supports the color, fill, fill-rule,\n stroke, stroke-dasharray, stroke-dashoffset, stroke-linecap,\n stroke-linejoin, stroke-miterlimit, stroke-width, color-interpolation\n and color-rendering attributesThe browser supports the\n color, fill, fill-rule, stroke, stroke-dasharray, stroke-dashoffset,\n stroke-linecap, stroke-linejoin, stroke-miterlimit, stroke-width\n and color-rendering attributesThe browser supports the\n opacity, stroke-opacity and fill-opacity attributesThe\n browser supports the display, image-rendering, pointer-events,\n shape-rendering, text-rendering and visibility attributesThe\n browser supports the display and visibility attributesThe\n browser supports the <marker> elementThe browser supports\n the <linearGradient>, <radialGradient> and <stop> elementsThe\n browser supports the <pattern> elementThe browser supports\n the <clipPath> element and the clip-path, clip-rule attributesThe\n browser supports the <clipPath> element and the clip-path\n attributeThe browser supports the <mask> elementThe browser\n supports the <filter>, <feBlend>, <feColorMatrix>, <feComponentTransfer>,\n <feComposite>, <feConvolveMatrix>, <feDiffuseLighting>,\n <feDisplacementMap>, <feFlood>, <feGaussianBlur>, <feImage>,\n <feMerge>, <feMergeNode>, <feMorphology>, <feOffset>,\n <feSpecularLighting>, <feTile>, <feDistantLight>, <fePointLight>,\n <feSpotLight>, <feFuncR>, <feFuncG>, <feFuncB> and <feFuncA>\n elementsThe browser supports the <filter>, <feBlend>,\n <feColorMatrix>, <feComponentTransfer>, <feComposite>,\n <feFlood>, <feGaussianBlur>, <feImage>, <feMerge>, <feMergeNode>,\n <feOffset>, <feTile>, <feFuncR>, <feFuncG>, <feFuncB>\n and <feFuncA> elementsThe browser supports the onunload,\n onabort, onerror, onresize, onscroll and onzoom attributesThe\n browser supports the onfocusin, onfocusout, onactivate,\n onclick, onmousedown, onmouseup, onmouseover, onmousemove,\n onmouseout and onload attributesThe browser supports the\n onbegin, onend, onrepeat and onload attributesThe browser\n supports the <cursor> elementThe browser supports the\n <a> elementThe browser supports the xlink:type, xlink:href,\n xlink:role, xlink:arcrole, xlink:title, xlink:show and\n xlink:actuate attributesThe browser supports the <view>\n elementThe browser supports the <script> elementThe browser\n supports the <animate>, <set>, <animateMotion>, <animateTransform>,\n <animateColor> and <mpath> elementsThe browser supports\n the <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <vkern>, <font-face-src>, <font-face-uri>, <font-face-format>\n and <font-face-name> elementsThe browser supports the\n <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <font-face-src> and <font-face-name> elementsThe browser\n supports the <foreignObject> elementSee also requiredFeatures.svgBCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "systemLanguage": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The systemLanguage attribute represents a list of supported language\n tags. This list is matched against the language defined\n in the user preferences.You can use this attribute with\n the following SVG elements:The value is a set of comma-separated\n tokens, each of which must be a language tag, as defined\n in RFC 5646: Tags for Identifying Languages (also known\n as BCP 47).systemLanguage is often used in conjunction\n with the <switch> element. If the attribute is used in\n other situations, then it represents a simple switch on\n the given element whether to render the element or not.Note:\n If several alternative language objects are enclosed in\n a <switch> and none of them matches, this may lead to\n situations where no content is displayed. It is thus recommended\n to include a \"catch-all\" choice at the end of such a <switch>\n which is acceptable in all cases.The attribute evaluates\n to \"true\" if one of the language tags indicated by user\n preferences is a case-insensitive match or prefix (followed\n by a \"-\") of one of the language tags given in the value\n of this parameter. Otherwise it evaluates to \"false\".Note:\n The prefix matching rule does not imply that if a user\n understands a language with a certain tag, that the user\n will also understand all languages with the tag as prefix.If\n the attribute is not present, then it implicitly evaluates\n to \"true\". If a null string or empty string value is given,\n the attribute evaluates to \"false\".The prefix rule allows\n the use of prefix tags if this is the case.Multiple languages\n may be listed for content that is intended for multiple\n audiences. For example, content that is presented simultaneously\n in the original Maori and English versions, would call\n for:However, just because multiple languages are present\n within the object on which the systemLanguage test attribute\n is placed, this does not mean that it is intended for\n multiple linguistic audiences. An example would be a beginner's\n language primer, such as \"A First Lesson in Latin,\" which\n is clearly intended to be used by an English-literate\n audience. In this case, the attribute should only include\n en.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "vectorEffect": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The vector-effect property specifies the vector effect to use\n when drawing an object. Vector effects are applied before\n any of the other compositing operations, i.e. filters,\n masks and clips.Note: As a presentation attribute, vector-effect\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:This value specifies that\n no vector effect shall be applied, i.e. the default rendering\n behavior is used which is to first fill the geometry of\n a shape with a specified paint, then stroke the outline\n with a specified paint.This value modifies the way an\n object is stroked. Normally stroking involves calculating\n stroke outline of the shape's path in current user coordinate\n system and filling that outline with the stroke paint\n (color or gradient). The resulting visual effect of this\n value is that the stroke width is not dependent on the\n transformations of the element (including non-uniform\n scaling and shear transformations) and zoom level.This\n value specifies a special user coordinate system used\n by the element and its descendants. The scale of that\n user coordinate system does not change in spite of any\n transformation changes from a host coordinate space. However,\n it does not specify the suppression of rotation and skew.\n Also, it does not specify the origin of the user coordinate\n system. Since this value suppresses scaling of the user\n coordinate system, it also has the characteristics of\n non-scaling-stroke.This value specifies a special user\n coordinate system used by the element and its descendants.\n The rotation and skew of that user coordinate system is\n suppressed in spite of any transformation changes from\n a host coordinate space. However, it does not specify\n the suppression of scaling. Also, it does not specify\n the origin of user coordinate system.This value specifies\n a special user coordinate system used by the element and\n its descendants. The position of user coordinate system\n is fixed in spite of any transformation changes from a\n host coordinate space. However, it does not specify the\n suppression of rotation, skew and scaling. When this vector\n effect and the transform property are defined at the same\n time, that property is consumed for this effect.BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "visibility": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The visibility attribute lets you control the visibility of graphical\n elements. With a value of hidden or collapse the current\n graphics element is invisible.Note: If the visibility\n attribute is set to hidden on a text element, then the\n text is invisible but still takes up space in text layout\n calculations.Depending on the value of attribute pointer-events,\n graphics elements which have their visibility attribute\n set to hidden still might receive events.Note: As a presentation\n attribute, visibility can be used as a CSS property. See\n the css visibility property for more information.You can\n use this attribute with the following SVG elements:The\n following example toggles the CSS visibility of the SVG\n image path.This value indicates that the element will\n be painted.This value indicates that the element will\n not be painted. Though it is still part of the rendering\n tree, i.e. it may receive pointer events depending on\n the pointer-events attribute, may receive focus depending\n on the tabindex attribute, contributes to bounding box\n calculations and clipping paths, and does affect text\n layout.This value is equal to hidden.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/Line.react.js": {
    "description": "Line is a wrapper for the <line> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/line",
    "displayName": "Line",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "clipPath": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The clip-path presentation attribute defines or associates a\n clipping path with the element it is related to.Note:\n As a presentation attribute clip-path can be used as a\n CSS property.You can use this attribute with the following\n SVG elements:An extra information to tell how a <basic-shape>\n is applied to an element: fill-box indicates to use the\n object bounding box; stroke-box indicates to use the object\n bounding box extended with the stroke; view-box indicates\n to use the nearest SVG viewport as the reference box.Note:\n For more details on the clip-path syntax, see the CSS\n property clip-path reference page.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "colorInterpolation": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation attribute specifies the color space for\n gradient interpolations, color animations, and alpha compositing.Note:\n For filter effects, the color-interpolation-filters property\n controls which color space is used.The color-interpolation\n property chooses between color operations occurring in\n the sRGB color space or in a (light energy linear) linearized\n RGB color space. Having chosen the appropriate color space,\n component-wise linear interpolation is used.When a child\n element is blended into a background, the value of the\n color-interpolation property on the child determines the\n type of blending, not the value of the color-interpolation\n on the parent. For gradients which make use of the href\n or the deprecated xlink:href attribute to reference another\n gradient, the gradient uses the property's value from\n the gradient element which is directly referenced by the\n fill or stroke property. When animating colors, color\n interpolation is performed according to the value of the\n color-interpolation property on the element being animated.Note:\n As a presentation attribute, color-interpolation can be\n used as a CSS property.You can use this attribute with\n the following SVG elements:Indicates that the user agent\n can choose either the sRGB or linearRGB spaces for color\n interpolation. This option indicates that the author doesn't\n require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "markerEnd": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The marker-end attribute defines the arrowhead or polymarker\n that will be drawn at the final vertex of the given shape.For\n all shape elements, except <polyline> and <path>, the\n last vertex is the same as the first vertex. In this case,\n if the value of marker-start and marker-end are both not\n none, then two markers will be rendered on that final\n vertex. For <path> elements, for each closed subpath,\n the last vertex is the same as the first vertex. marker-end\n is only rendered on the final vertex of the path data.Note:\n As a presentation attribute, marker-end can be used as\n a CSS property.You can use this attribute with the following\n SVG elements:Indicates that no marker symbol shall be\n drawn at the final vertex.This value is a reference to\n a <marker> element, which will be drawn at the final vertex.\n If the reference is not valid, then no marker will be\n drawn.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 17, 2022, by MDN contributors"
      },
      "markerMid": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The marker-mid attribute defines the arrowhead or polymarker\n that will be drawn at all interior vertices of the given\n shape.The marker is rendered on every vertex other than\n the first and last vertices of the path data.Note: As\n a presentation attribute, marker-mid can be used as a\n CSS property.You can use this attribute with the following\n SVG elements:Indicates that no marker symbol shall be\n drawn at the given vertices.This value is a reference\n to a <marker> element, which will be drawn at the given\n vertices. If the reference is not valid, then no marker\n will be drawn.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 17, 2022, by MDN contributors"
      },
      "markerStart": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The marker-start attribute defines the arrowhead or polymarker\n that will be drawn at the first vertex of the given shape.For\n all shape elements, except <polyline> and <path>, the\n last vertex is the same as the first vertex. In this case,\n if the value of marker-start and marker-end are both not\n none, then two markers will be rendered on that final\n vertex. For <path> elements, for each closed subpath,\n the last vertex is the same as the first vertex. marker-start\n is only rendered on the first vertex of the path data.Note:\n As a presentation attribute, marker-start can be used\n as a CSS property.You can use this attribute with the\n following SVG elements:Indicates that no marker symbol\n shall be drawn at the first vertex.This value is a reference\n to a <marker> element, which will be drawn at the first\n vertex. If the reference is not valid, then no marker\n will be drawn.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 17, 2022, by MDN contributors"
      },
      "mask": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The mask attribute is a presentation attribute mainly used to\n bind a given <mask> element with the element the attribute\n belongs to.Note: As a presentation attribute mask can\n be used as a CSS property.You can use this attribute with\n the following SVG elements:Since SVG2, the mask attribute\n is defined as a css property and is a shorthand for many\n other properties: mask-image, mask-mode, mask-repeat,\n mask-position, mask-clip, mask-origin, mask-size, and\n mask-composite.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "opacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The opacity attribute specifies the transparency of an object\n or of a group of objects, that is, the degree to which\n the background behind the element is overlaid.Note: As\n a presentation attribute, opacity can be used as a CSS\n property. See the css opacity property for more information.You\n can use this attribute with the following SVG elements:The\n uniform opacity setting to be applied across an entire\n object, as a <number>. Any values outside the range 0.0\n (fully transparent) to 1.0 (fully opaque) will be clamped\n to this range.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "paintOrder": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The paint-order attribute specifies the order that the fill,\n stroke, and markers of a given shape or text element are\n painted.Note: As a presentation attribute, paint-order\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:This value indicates that\n the fill will be painted first, then the stroke, and finally\n the markers.The order of these three keywords indicates\n the order in which the painting happens, from left to\n right. If any of the three painting components is omitted,\n they will be painted in their default order after the\n specified components. For example, using stroke is equivalent\n to stroke fill markers.The example would be rendered as\n follows:\n  \nThe stroke under effect could be achieved\n via the following CSS property:BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "pathLength": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The pathLength attribute lets authors specify a total length\n for the path, in user units. This value is then used to\n calibrate the browser's distance calculations with those\n of the author, by scaling all distance computations using\n the ratio pathLength/(computed value of path length).This\n can affect the actual rendered lengths of paths; including\n text paths, animation paths, and various stroke operations.\n Basically, all computations that require the length of\n the path. stroke-dasharray, for example, will assume the\n start of the path being 0 and the end point the value\n defined in the pathLength attribute.You can use this attribute\n with the following SVG elements:For <circle>, pathLength\n lets authors specify a total length for the circle, in\n user units.For <ellipse>, pathLength lets authors specify\n a total length for the ellipse, in user units.For <line>,\n pathLength lets authors specify a total length for the\n line, in user units.For <path>, pathLength lets authors\n specify a total length for the path, in user units.For\n <polygon>, pathLength lets authors specify a total length\n for the shape, in user units.For <polyline>, pathLength\n lets authors specify a total length for the shape, in\n user units.For <rect>, pathLength lets authors specify\n a total length for the rectangle, in user units.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "pointerEvents": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The pointer-events attribute is a presentation attribute that\n allows defining whether or when an element may be the\n target of a mouse event.Note: As a presentation attribute\n pointer-events can be used as a CSS property.You can use\n this attribute with the following SVG elements:For a detailed\n explanation of each possible value, have a look at the\n CSS pointer-events documentation.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "requiredFeatures": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The requiredFeatures attribute\n takes a list of feature strings, with the individual strings\n separated by white space. It determines whether or not\n all of the named features are supported by the browser;\n if all of them are supported, the attribute evaluates\n to true end the element is rendered; otherwise, the attribute\n evaluates to false and the current element and its children\n are skipped and thus will not be rendered. This provides\n a way to design SVG that gracefully falls back when features\n aren't available.If the attribute is not present, then\n its implicit evaluated value is true. If a null string\n or empty string value is given to attribute requiredFeatures,\n the attribute is evaluate to false.requiredFeatures is\n often used in conjunction with the <switch> element. If\n requiredFeatures is used in other situations, it represents\n a simple switch on the given element whether to render\n the element or not.To detect availability of an SVG feature\n from script, there is the (also deprecated) DOMImplementation.hasFeature()\n method.You can use this attribute with the following SVG\n elements:This is a list of feature strings, separated\n using white space. Determines whether all of the named\n features are supported by the browser. See Feature strings\n below for a list of allowed values.The following are the\n feature strings for the requiredFeatures attribute. These\n same feature strings apply to the hasFeature method call\n that is part of the SVG DOM's support for the DOMImplementation\n interface. In some cases the feature strings map directly\n to a set of attributes, properties or elements, in others\n they represent some functionality of the browser. Note\n that the format and naming for feature strings changed\n from SVG 1.0 to SVG 1.1. The SVG 1.0 feature strings are\n not listed here but can be found in the SVG Specification.\n Some browser support SVG 1.0 Feature strings for compatibility\n reasons. However, the SVG 1.0 feature strings are considered\n deprecated.At least one of the following feature is supported:At\n least one of the following feature is supported:The browser\n supports all the following features:The browser supports\n all of the DOM interfaces and methods that correspond\n to the language features for http://www.w3.org/TR/SVG11/feature#SVG-static.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-static\n plus the feature http://www.w3.org/TR/SVG11/feature#Animation.The\n browser supports all of the DOM interfaces and methods\n that correspond to the language features for http://www.w3.org/TR/SVG11/feature#SVG-animation.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-animation\n plus the following features:The browser supports all of\n the DOM interfaces and methods that correspond to the\n language features for http://www.w3.org/TR/SVG11/feature#SVG-dynamic.The\n browser supports the id, xml:base, xml:lang and xml:space\n attributesThe browser supports <svg>, <g>, <defs>, <desc>,\n <title>, <metadata>, <symbol> and <use> elements.The browser\n supports <svg>, <g>, <defs>, <desc>, <title>, <metadata>\n and <use> elements.The browser supports the enable-background\n attributeThe browser supports the <switch> element, and\n the requiredFeatures, requiredExtensions, systemLanguage\n attributesThe browser supports the <image> element.The\n browser supports the <style> element.The browser supports\n the clip and overflow attributes.The browser supports\n the <rect>, <circle>, <line>, <polyline>, <polygon>, <ellipse>\n and <path> elements.The browser supports the <text>, <tspan>,\n <tref>, <textPath>, <altGlyph>, <altGlyphDef>, <altGlyphItem>\n and <glyphRef> elements.The browser supports the <text>\n elementThe browser supports the color, fill, fill-rule,\n stroke, stroke-dasharray, stroke-dashoffset, stroke-linecap,\n stroke-linejoin, stroke-miterlimit, stroke-width, color-interpolation\n and color-rendering attributesThe browser supports the\n color, fill, fill-rule, stroke, stroke-dasharray, stroke-dashoffset,\n stroke-linecap, stroke-linejoin, stroke-miterlimit, stroke-width\n and color-rendering attributesThe browser supports the\n opacity, stroke-opacity and fill-opacity attributesThe\n browser supports the display, image-rendering, pointer-events,\n shape-rendering, text-rendering and visibility attributesThe\n browser supports the display and visibility attributesThe\n browser supports the <marker> elementThe browser supports\n the <linearGradient>, <radialGradient> and <stop> elementsThe\n browser supports the <pattern> elementThe browser supports\n the <clipPath> element and the clip-path, clip-rule attributesThe\n browser supports the <clipPath> element and the clip-path\n attributeThe browser supports the <mask> elementThe browser\n supports the <filter>, <feBlend>, <feColorMatrix>, <feComponentTransfer>,\n <feComposite>, <feConvolveMatrix>, <feDiffuseLighting>,\n <feDisplacementMap>, <feFlood>, <feGaussianBlur>, <feImage>,\n <feMerge>, <feMergeNode>, <feMorphology>, <feOffset>,\n <feSpecularLighting>, <feTile>, <feDistantLight>, <fePointLight>,\n <feSpotLight>, <feFuncR>, <feFuncG>, <feFuncB> and <feFuncA>\n elementsThe browser supports the <filter>, <feBlend>,\n <feColorMatrix>, <feComponentTransfer>, <feComposite>,\n <feFlood>, <feGaussianBlur>, <feImage>, <feMerge>, <feMergeNode>,\n <feOffset>, <feTile>, <feFuncR>, <feFuncG>, <feFuncB>\n and <feFuncA> elementsThe browser supports the onunload,\n onabort, onerror, onresize, onscroll and onzoom attributesThe\n browser supports the onfocusin, onfocusout, onactivate,\n onclick, onmousedown, onmouseup, onmouseover, onmousemove,\n onmouseout and onload attributesThe browser supports the\n onbegin, onend, onrepeat and onload attributesThe browser\n supports the <cursor> elementThe browser supports the\n <a> elementThe browser supports the xlink:type, xlink:href,\n xlink:role, xlink:arcrole, xlink:title, xlink:show and\n xlink:actuate attributesThe browser supports the <view>\n elementThe browser supports the <script> elementThe browser\n supports the <animate>, <set>, <animateMotion>, <animateTransform>,\n <animateColor> and <mpath> elementsThe browser supports\n the <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <vkern>, <font-face-src>, <font-face-uri>, <font-face-format>\n and <font-face-name> elementsThe browser supports the\n <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <font-face-src> and <font-face-name> elementsThe browser\n supports the <foreignObject> elementSee also requiredFeatures.svgBCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "shapeRendering": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The shape-rendering attribute provides hints to the renderer\n about what tradeoffs to make when rendering shapes like\n paths, circles, or rectangles.Note: As a presentation\n attribute, shape-rendering can be used as a CSS property.You\n can use this attribute with the following SVG elements:This\n value indicates that the user agent shall make appropriate\n tradeoffs to balance speed, crisp edges and geometric\n precision, but with geometric precision given more importance\n than speed and crisp edges.This value indicates that the\n user agent shall emphasize rendering speed over geometric\n precision and crisp edges. This option will sometimes\n cause the user agent to turn off shape anti-aliasing.This\n value indicates that the user agent shall attempt to emphasize\n the contrast between clean edges of artwork over rendering\n speed and geometric precision. To achieve crisp edges,\n the user agent might turn off anti-aliasing for all lines\n and curves or possibly just for straight lines which are\n close to vertical or horizontal. Also, the user agent\n might adjust line positions and line widths to align edges\n with device pixels.Indicates that the user agent shall\n emphasize geometric precision over speed and crisp edges.BCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "stroke": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "stroke color"
      },
      "strokeDasharray": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-dasharray attribute is a presentation attribute defining\n the pattern of dashes and gaps used to paint the outline\n of the shape;Note: As a presentation attribute, stroke-dasharray\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:A list of comma and/or\n white space separated <length>s and <percentage>s that\n specify the lengths of alternating dashes and gaps.If\n an odd number of values is provided, then the list of\n values is repeated to yield an even number of values.\n Thus, 5,3,2 is equivalent to 5,3,2,5,3,2.BCD tables only\n load in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "strokeDashoffset": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-dashoffset attribute is a presentation attribute defining\n an offset on the rendering of the associated dash array.Note:\n As a presentation attribute stroke-dashoffset can be used\n as a CSS property.You can use this attribute with the\n following SVG elements:The offset is usually expressed\n in user units resolved against the pathLength but if a\n <percentage> is used, the value is resolved as a percentage\n of the current viewport.BCD tables only load in the browser\n with JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "strokeLinecap": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"butt\"",
              "computed": false
            },
            {
              "value": "\"inherit\"",
              "computed": false
            },
            {
              "value": "\"round\"",
              "computed": false
            },
            {
              "value": "\"square\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The stroke-linecap attribute is a presentation attribute defining\n the shape to be used at the end of open subpaths when\n they are stroked.Note: As a presentation attribute stroke-linecap\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:The butt value indicates\n that the stroke for each subpath does not extend beyond\n its two endpoints. On a zero length subpath, the path\n will not be rendered at all.The round value indicates\n that at the end of each subpath the stroke will be extended\n by a half circle with a diameter equal to the stroke width.\n On a zero length subpath, the stroke consists of a full\n circle centered at the subpath's point.The square value\n indicates that at the end of each subpath the stroke will\n be extended by a rectangle with a width equal to half\n the width of the stroke and a height equal to the width\n of the stroke. On a zero length subpath, the stroke consists\n of a square with its width equal to the stroke width,\n centered at the subpath's point.BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "strokeOpacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-opacity attribute is a presentation attribute defining\n the opacity of the paint server (color, gradient, pattern,\n etc) applied to the stroke of a shape.Note: As a presentation\n attribute stroke-opacity can be used as a CSS property.You\n can use this attribute with the following SVG elements:Note:\n SVG2 introduces percentage values for stroke-opacity,\n however, it is not widely supported yet (See Browser compatibility\n below) as a consequence, it is best practices to set opacity\n with a value in the range [0-1].It's important to know\n that the stroke partially covers the fill of a shape,\n so a stroke with an opacity different than 1 will partially\n show the fill underneath. To avoid this effect, it is\n possible to apply a global opacity with the opacity attribute\n or to put the stroke behind the fill with the paint-order\n attribute.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "strokeWidth": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-width attribute is a presentation attribute defining\n the width of the stroke to be applied to the shape.You\n can use this attribute with the following SVG elements:Note:\n A percentage value is always computed as a percentage\n of the normalized viewBox diagonal length.BCD tables only\n load in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "systemLanguage": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The systemLanguage attribute represents a list of supported language\n tags. This list is matched against the language defined\n in the user preferences.You can use this attribute with\n the following SVG elements:The value is a set of comma-separated\n tokens, each of which must be a language tag, as defined\n in RFC 5646: Tags for Identifying Languages (also known\n as BCP 47).systemLanguage is often used in conjunction\n with the <switch> element. If the attribute is used in\n other situations, then it represents a simple switch on\n the given element whether to render the element or not.Note:\n If several alternative language objects are enclosed in\n a <switch> and none of them matches, this may lead to\n situations where no content is displayed. It is thus recommended\n to include a \"catch-all\" choice at the end of such a <switch>\n which is acceptable in all cases.The attribute evaluates\n to \"true\" if one of the language tags indicated by user\n preferences is a case-insensitive match or prefix (followed\n by a \"-\") of one of the language tags given in the value\n of this parameter. Otherwise it evaluates to \"false\".Note:\n The prefix matching rule does not imply that if a user\n understands a language with a certain tag, that the user\n will also understand all languages with the tag as prefix.If\n the attribute is not present, then it implicitly evaluates\n to \"true\". If a null string or empty string value is given,\n the attribute evaluates to \"false\".The prefix rule allows\n the use of prefix tags if this is the case.Multiple languages\n may be listed for content that is intended for multiple\n audiences. For example, content that is presented simultaneously\n in the original Maori and English versions, would call\n for:However, just because multiple languages are present\n within the object on which the systemLanguage test attribute\n is placed, this does not mean that it is intended for\n multiple linguistic audiences. An example would be a beginner's\n language primer, such as \"A First Lesson in Latin,\" which\n is clearly intended to be used by an English-literate\n audience. In this case, the attribute should only include\n en.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "vectorEffect": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The vector-effect property specifies the vector effect to use\n when drawing an object. Vector effects are applied before\n any of the other compositing operations, i.e. filters,\n masks and clips.Note: As a presentation attribute, vector-effect\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:This value specifies that\n no vector effect shall be applied, i.e. the default rendering\n behavior is used which is to first fill the geometry of\n a shape with a specified paint, then stroke the outline\n with a specified paint.This value modifies the way an\n object is stroked. Normally stroking involves calculating\n stroke outline of the shape's path in current user coordinate\n system and filling that outline with the stroke paint\n (color or gradient). The resulting visual effect of this\n value is that the stroke width is not dependent on the\n transformations of the element (including non-uniform\n scaling and shear transformations) and zoom level.This\n value specifies a special user coordinate system used\n by the element and its descendants. The scale of that\n user coordinate system does not change in spite of any\n transformation changes from a host coordinate space. However,\n it does not specify the suppression of rotation and skew.\n Also, it does not specify the origin of the user coordinate\n system. Since this value suppresses scaling of the user\n coordinate system, it also has the characteristics of\n non-scaling-stroke.This value specifies a special user\n coordinate system used by the element and its descendants.\n The rotation and skew of that user coordinate system is\n suppressed in spite of any transformation changes from\n a host coordinate space. However, it does not specify\n the suppression of scaling. Also, it does not specify\n the origin of user coordinate system.This value specifies\n a special user coordinate system used by the element and\n its descendants. The position of user coordinate system\n is fixed in spite of any transformation changes from a\n host coordinate space. However, it does not specify the\n suppression of rotation, skew and scaling. When this vector\n effect and the transform property are defined at the same\n time, that property is consumed for this effect.BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "visibility": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The visibility attribute lets you control the visibility of graphical\n elements. With a value of hidden or collapse the current\n graphics element is invisible.Note: If the visibility\n attribute is set to hidden on a text element, then the\n text is invisible but still takes up space in text layout\n calculations.Depending on the value of attribute pointer-events,\n graphics elements which have their visibility attribute\n set to hidden still might receive events.Note: As a presentation\n attribute, visibility can be used as a CSS property. See\n the css visibility property for more information.You can\n use this attribute with the following SVG elements:The\n following example toggles the CSS visibility of the SVG\n image path.This value indicates that the element will\n be painted.This value indicates that the element will\n not be painted. Though it is still part of the rendering\n tree, i.e. it may receive pointer events depending on\n the pointer-events attribute, may receive focus depending\n on the tabindex attribute, contributes to bounding box\n calculations and clipping paths, and does affect text\n layout.This value is equal to hidden.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "x1": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The x1 attribute is used to specify the first x-coordinate for\n drawing an SVG element that requires more than one coordinate.\n Elements that only need one coordinate use the x attribute\n instead.You can use this attribute with the following\n SVG elements:For <line>, x1 defines the x coordinate of\n the starting point of the line.For <linearGradient>, x1\n defines the x coordinate of the starting point of the\n gradient vector used to map the gradient stop values.\n The exact behavior of this attribute is influenced by\n the gradientUnits attributesLast modified: May 13, 2022,\n by MDN contributors"
      },
      "x2": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The x2 attribute is used to specify the second x-coordinate for\n drawing an SVG element that requires more than one coordinate.\n Elements that only need one coordinate use the x attribute\n instead.You can use this attribute with the following\n SVG elements:For <line>, x2 defines the x coordinate of\n the ending point of the line.For <linearGradient>, x2\n defines the x coordinate of the ending point of the gradient\n vector used to map the gradient stop values. The exact\n behavior of this attribute is influenced by the gradientUnits\n attributesLast modified: May 13, 2022, by MDN contributors"
      },
      "y1": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The y1 attribute is used to specify the first y-coordinate for\n drawing an SVG element that requires more than one coordinate.\n Elements that only need one coordinate use the y attribute\n instead.You can use this attribute with the following\n SVG elements:For <line>, y1 defines the y coordinate of\n the starting point of the line.For <linearGradient>, y1\n defines the y coordinate of the starting point of the\n gradient vector used to map the gradient stop values.\n The exact behavior of this attribute is influenced by\n the gradientUnits attributesLast modified: May 13, 2022,\n by MDN contributors"
      },
      "y2": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The y2 attribute is used to specify the second y-coordinate for\n drawing an SVG element that requires more than one coordinate.\n Elements that only need one coordinate use the y attribute\n instead.You can use this attribute with the following\n SVG elements:For <line>, y2 defines the y coordinate of\n the ending point of the line.For <linearGradient>, y2\n defines the y coordinate of the ending point of the gradient\n vector used to map the gradient stop values. The exact\n behavior of this attribute is influenced by the gradientUnits\n attributesLast modified: May 13, 2022, by MDN contributors"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/LinearGradient.react.js": {
    "description": "LinearGradient is a wrapper for the <linearGradient> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/linearGradient",
    "displayName": "LinearGradient",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "colorInterpolation": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation attribute specifies the color space for\n gradient interpolations, color animations, and alpha compositing.Note:\n For filter effects, the color-interpolation-filters property\n controls which color space is used.The color-interpolation\n property chooses between color operations occurring in\n the sRGB color space or in a (light energy linear) linearized\n RGB color space. Having chosen the appropriate color space,\n component-wise linear interpolation is used.When a child\n element is blended into a background, the value of the\n color-interpolation property on the child determines the\n type of blending, not the value of the color-interpolation\n on the parent. For gradients which make use of the href\n or the deprecated xlink:href attribute to reference another\n gradient, the gradient uses the property's value from\n the gradient element which is directly referenced by the\n fill or stroke property. When animating colors, color\n interpolation is performed according to the value of the\n color-interpolation property on the element being animated.Note:\n As a presentation attribute, color-interpolation can be\n used as a CSS property.You can use this attribute with\n the following SVG elements:Indicates that the user agent\n can choose either the sRGB or linearRGB spaces for color\n interpolation. This option indicates that the author doesn't\n require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "gradientTransform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The gradientTransform attribute contains the definition of an\n optional additional transformation from the gradient coordinate\n system onto the target coordinate system (i.e., userSpaceOnUse\n or objectBoundingBox). This allows for things such as\n skewing the gradient. This additional transformation matrix\n is post-multiplied to (i.e., inserted to the right of)\n any previously defined transformations, including the\n implicit transformation necessary to convert from object\n bounding box units to user space.You can use this attribute\n with the following SVG elements:A list of transformation\n functions specifying some additional transformation from\n the gradient coordinate system onto the target coordinate\n system.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "gradientUnits": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The gradientUnits attribute defines the coordinate system used\n for attributes specified on the gradient elements.You\n can use this attribute with the following SVG elements:For\n <linearGradient>, gradientUnits defines the coordinate\n system used for the attributes x1, y1, x2, and y2.\n  \n    This value indicates that the attributes represent\n values in the coordinate system that results from taking\n the current user coordinate system in place at the time\n when the gradient element is referenced (i.e., the user\n coordinate system for the element referencing the gradient\n element via a fill or stroke property) and then applying\n the transform specified by attribute gradientTransform.\n\n      Percentages represent values relative to the current\n SVG viewport.\n    This value indicates that the user coordinate\n system for the attributes is established using the bounding\n box of the element to which the gradient is applied and\n then applying the transform specified by attribute gradientTransform.Percentages\n represent values relative to the bounding box for the\n object.With this value and gradientTransform being the\n identity matrix, the normal of the linear gradient is\n perpendicular to the gradient vector in object bounding\n box space (i.e., the abstract coordinate system where\n (0,0) is at the top/left of the object bounding box and\n (1,1) is at the bottom/right of the object bounding box).\n When the object's bounding box is not square, the gradient\n normal which is initially perpendicular to the gradient\n vector within object bounding box space may render non-perpendicular\n relative to the gradient vector in user space. If the\n gradient vector is parallel to one of the axes of the\n bounding box, the gradient normal will remain perpendicular.\n This transformation is due to application of the non-uniform\n scaling transformation from bounding box space to user\n space.For <radialGradient>, gradientUnits defines the\n coordinate system used for the attributes cx, cy, r, fx,\n fy, and fr.cx, cy, r, fx, fy, and fr represent values\n in the coordinate system that results from taking the\n current user coordinate system in place at the time when\n the gradient element is referenced (i.e., the user coordinate\n system for the element referencing the gradient element\n via a fill or stroke property) and then applying the transform\n specified by attribute gradientTransform.\n      for <radialGradient>:\n the user coordinate system for attributes cx, cy, r, fx,\n fy, and fr is established using the bounding box of the\n element to which the gradient is applied (see Object bounding\n box units) and then applying the transform specified by\n attribute gradientTransform.\n      With this value and\n gradientTransform being the identity matrix, the rings\n of the radial gradient are circular with respect to the\n object bounding box space (i.e., the abstract coordinate\n system where (0,0) is at the top/left of the object bounding\n box and (1,1) is at the bottom/right of the object bounding\n box). When the object's bounding box is not square, the\n rings that are conceptually circular within object bounding\n box space will render as elliptical due to application\n of the non-uniform scaling transformation from bounding\n box space to user space.\n    Last modified: May 13, 2022,\n by MDN contributors"
      },
      "spreadMethod": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The spreadMethod attribute determines how a shape is filled beyond\n the defined edges of a gradient.You can use this attribute\n with the following SVG elements:This value indicates that\n the final color of the gradient fills the shape beyond\n the gradient's edges.This value indicates that the gradient\n repeats in reverse beyond its edges.This value specifies\n that the gradient repeats in the original order beyond\n its edges.By default, a gradient reaches to the edges\n of the shape being filled. To see the effects of this\n attribute, you will need to set the size of the gradient\n smaller than the shape.In the case of a linear gradient,\n the edges may be defined as a rectangle by the x1, x2,\n y1 and y2 attributes. In the case of a radial gradient,\n the edges may be defined as outer and inner circles by\n the cx, cy and r (outer) and fx, fy and fr (inner) attributes.Notice\n that the middle third of each gradient is the same. The\n outer thirds show the difference between the three spread\n methods.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "x1": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The x1 attribute is used to specify the first x-coordinate for\n drawing an SVG element that requires more than one coordinate.\n Elements that only need one coordinate use the x attribute\n instead.You can use this attribute with the following\n SVG elements:For <line>, x1 defines the x coordinate of\n the starting point of the line.For <linearGradient>, x1\n defines the x coordinate of the starting point of the\n gradient vector used to map the gradient stop values.\n The exact behavior of this attribute is influenced by\n the gradientUnits attributesLast modified: May 13, 2022,\n by MDN contributors"
      },
      "x2": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The x2 attribute is used to specify the second x-coordinate for\n drawing an SVG element that requires more than one coordinate.\n Elements that only need one coordinate use the x attribute\n instead.You can use this attribute with the following\n SVG elements:For <line>, x2 defines the x coordinate of\n the ending point of the line.For <linearGradient>, x2\n defines the x coordinate of the ending point of the gradient\n vector used to map the gradient stop values. The exact\n behavior of this attribute is influenced by the gradientUnits\n attributesLast modified: May 13, 2022, by MDN contributors"
      },
      "y1": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The y1 attribute is used to specify the first y-coordinate for\n drawing an SVG element that requires more than one coordinate.\n Elements that only need one coordinate use the y attribute\n instead.You can use this attribute with the following\n SVG elements:For <line>, y1 defines the y coordinate of\n the starting point of the line.For <linearGradient>, y1\n defines the y coordinate of the starting point of the\n gradient vector used to map the gradient stop values.\n The exact behavior of this attribute is influenced by\n the gradientUnits attributesLast modified: May 13, 2022,\n by MDN contributors"
      },
      "y2": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The y2 attribute is used to specify the second y-coordinate for\n drawing an SVG element that requires more than one coordinate.\n Elements that only need one coordinate use the y attribute\n instead.You can use this attribute with the following\n SVG elements:For <line>, y2 defines the y coordinate of\n the ending point of the line.For <linearGradient>, y2\n defines the y coordinate of the ending point of the gradient\n vector used to map the gradient stop values. The exact\n behavior of this attribute is influenced by the gradientUnits\n attributesLast modified: May 13, 2022, by MDN contributors"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/Marker.react.js": {
    "description": "Marker is a wrapper for the <marker> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/marker",
    "displayName": "Marker",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "clip": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The clip attribute is a\n presentation attribute defining the visible region of\n an element.This attribute has the same parameter values\n as defined for the css clip property. Unitless values,\n which indicate current user coordinates, are permitted\n on the coordinate values on the rect(). The value of auto\n defines a clipping path along the bounds of the viewport\n created by the given element.You can use this attribute\n with the following SVG elements:Warning: This property\n is deprecated. Use clip-path instead.The value auto defines\n a clipping path along the bounds of the viewport created\n by the given element. The value rect() defines a clipping\n rectangle following the following syntax: rect(<top>,\n <right>, <bottom>, <left>). The <top> and <bottom> values\n specify offsets from the top border edge of the element\n viewport, while <right> and <left> specify offsets from\n the left border edge of the element viewport.BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: Jun 28, 2022, by\n MDN contributors"
      },
      "clipPath": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The clip-path presentation attribute defines or associates a\n clipping path with the element it is related to.Note:\n As a presentation attribute clip-path can be used as a\n CSS property.You can use this attribute with the following\n SVG elements:An extra information to tell how a <basic-shape>\n is applied to an element: fill-box indicates to use the\n object bounding box; stroke-box indicates to use the object\n bounding box extended with the stroke; view-box indicates\n to use the nearest SVG viewport as the reference box.Note:\n For more details on the clip-path syntax, see the CSS\n property clip-path reference page.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "colorInterpolation": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation attribute specifies the color space for\n gradient interpolations, color animations, and alpha compositing.Note:\n For filter effects, the color-interpolation-filters property\n controls which color space is used.The color-interpolation\n property chooses between color operations occurring in\n the sRGB color space or in a (light energy linear) linearized\n RGB color space. Having chosen the appropriate color space,\n component-wise linear interpolation is used.When a child\n element is blended into a background, the value of the\n color-interpolation property on the child determines the\n type of blending, not the value of the color-interpolation\n on the parent. For gradients which make use of the href\n or the deprecated xlink:href attribute to reference another\n gradient, the gradient uses the property's value from\n the gradient element which is directly referenced by the\n fill or stroke property. When animating colors, color\n interpolation is performed according to the value of the\n color-interpolation property on the element being animated.Note:\n As a presentation attribute, color-interpolation can be\n used as a CSS property.You can use this attribute with\n the following SVG elements:Indicates that the user agent\n can choose either the sRGB or linearRGB spaces for color\n interpolation. This option indicates that the author doesn't\n require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "enableBackground": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The enable-background attribute\n specifies how the accumulation of the background image\n is managed.Note: As a presentation attribute, enable-background\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:If an ancestor container\n element has a property value of enable-background: new,\n then all graphics elements within the current container\n element are rendered both onto the parent container element's\n background image canvas and onto the target device.Otherwise,\n there is no current background image canvas, so graphics\n elements are only rendered onto the target device.This\n value enables the ability of children of the current container\n element to access the background image.It also indicates\n that a new (i.e., initially transparent black) background\n image canvas is established and that in effect all children\n of the current container element shall be rendered into\n the new background image canvas in addition to being rendered\n onto the target device.\n      The optional <x>, <y>, <width>,\n and <height> parameters are <number> values that indicate\n the subregion of the container element's user space where\n access to the background image is allowed to happen. Those\n values act as a clipping rectangle on the background image\n canvas.\n      Negative values for <width> or <height>\n are forbidden. If one, two, or three values are specified\n or if neither <width> nor <height> are specified, the\n BackgroundImage and BackgroundAlpha of a filter primitive\n are processed as if background image processing were not\n enabled.\n    BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 17, 2022, by MDN contributors"
      },
      "markerHeight": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The markerHeight attribute represents the height of the viewport\n into which the <marker> is to be fitted when it is rendered\n according to the viewBox and preserveAspectRatio attributes.You\n can use this attribute with the following SVG elements:\n\n      This value defines either an absolute or a relative\n height of the marker.\n      Relative values refer to the\n height specified via the viewBox and preserveAspectRatio\n attributes.\n    This value defines the height of the marker\n in the units defined by the markerUnits attribute.A value\n of zero disables rendering of the element and negative\n values are an error.BCD tables only load in the browser\n with JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "markerUnits": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The markerUnits attribute defines the coordinate system for the\n markerWidth and markerHeight attributes and the contents\n of the <marker>.You can use this attribute with the following\n SVG elements:This value specifies that the markerWidth\n and markerHeight attributes and the contents of the <marker>\n element represent values in the current user coordinate\n system in place for the graphic object referencing the\n marker (i.e., the user coordinate system for the element\n referencing the <marker> element via a marker, marker-start,\n marker-mid, or marker-end property).This value specifies\n that the markerWidth and markerHeight attributes and the\n contents of the <marker> element represent values in a\n coordinate system which has a single unit equal the size\n in user units of the current stroke width (see the stroke-width\n attribute) in place for the graphic object referencing\n the marker.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "markerWidth": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The markerWidth attribute represents the width of the viewport\n into which the <marker> is to be fitted when it is rendered\n according to the viewBox and preserveAspectRatio attributes.You\n can use this attribute with the following SVG elements:\n\n      This value defines either an absolute or a relative\n width of the marker.\n      Relative values refer to the\n width specified via the viewBox and preserveAspectRatio\n attributes.\n    This value defines the width of the marker\n in the units defined by the markerUnits attribute.A value\n of zero disables rendering of the element and negative\n values are an error.BCD tables only load in the browser\n with JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "mask": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The mask attribute is a presentation attribute mainly used to\n bind a given <mask> element with the element the attribute\n belongs to.Note: As a presentation attribute mask can\n be used as a CSS property.You can use this attribute with\n the following SVG elements:Since SVG2, the mask attribute\n is defined as a css property and is a shorthand for many\n other properties: mask-image, mask-mode, mask-repeat,\n mask-position, mask-clip, mask-origin, mask-size, and\n mask-composite.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "opacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The opacity attribute specifies the transparency of an object\n or of a group of objects, that is, the degree to which\n the background behind the element is overlaid.Note: As\n a presentation attribute, opacity can be used as a CSS\n property. See the css opacity property for more information.You\n can use this attribute with the following SVG elements:The\n uniform opacity setting to be applied across an entire\n object, as a <number>. Any values outside the range 0.0\n (fully transparent) to 1.0 (fully opaque) will be clamped\n to this range.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "orient": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The orient attribute indicates how a marker is rotated when it\n is placed at its position on the shape.You can use this\n attribute with the following SVG elements:This value indicates\n that the marker is oriented such that its positive x-axis\n is pointing in a direction relative to the path at the\n position the marker is placed.If placed by marker-start,\n the marker is oriented 180\u00b0 different from the orientation\n that would be used if auto where specified. For all other\n markers, auto-start-reverse means the same as auto.Note:\n This allows a single arrowhead marker to be defined that\n can be used for both the start and end of a path, i.e.\n which points outwards from both ends.This value indicates\n that the marker is oriented such that the specified angle\n is that measured between the shape's positive x-axis and\n the marker's positive x-axis.Note: For example, if a value\n of 45 is given, then the marker's positive x-axis would\n be pointing down and right in the shape's coordinate system.This\n value indicates an angle in degrees. The marker is oriented\n such that the specified angle is that measured between\n the shape's positive x-axis and the marker's positive\n x-axis.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "overflow": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The overflow attribute sets what to do when an element's content\n is too big to fit in its block formatting context. This\n feature is not widely implemented yet.This attribute has\n the same parameter values and meaning as the css overflow\n property, however, the following additional points apply:Note:\n Although the initial value for overflow is auto, it is\n overwritten in the User Agent style sheet for the <svg>\n element when it is not the root element of a stand-alone\n document, the <pattern> element, and the <marker> element\n to be hidden by default.Note: As a presentation attribute,\n overflow can be used as a CSS property. See the CSS overflow\n property for more information.You can use this attribute\n with the following SVG elements:For a description of the\n values, please see the css overflow property.BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "pointerEvents": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The pointer-events attribute is a presentation attribute that\n allows defining whether or when an element may be the\n target of a mouse event.Note: As a presentation attribute\n pointer-events can be used as a CSS property.You can use\n this attribute with the following SVG elements:For a detailed\n explanation of each possible value, have a look at the\n CSS pointer-events documentation.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "preserveAspectRatio": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The preserveAspectRatio attribute indicates how an element with\n a viewBox providing a given aspect ratio must fit into\n a viewport with a different aspect ratio.Because the aspect\n ratio of an SVG image is defined by the viewBox attribute,\n if this attribute isn't set, the preserveAspectRatio attribute\n has no effect (with one exception, the <image> element,\n as described below).Its value is made of one or two keywords:\n A required alignment value and an optional \"meet or slice\"\n reference as described below:The alignment value indicates\n whether to force uniform scaling and, if so, the alignment\n method to use in case the aspect ratio of the viewBox\n doesn't match the aspect ratio of the viewport. The alignment\n value must be one of the following keywords:The meet or\n slice reference is optional and, if provided, must be\n one of the following keywords:You can use this attribute\n with the following SVG elements:For <feImage>, preserveAspectRatio\n defines how the referenced image should fit in the rectangle\n define by the <feImage> element.For <image>, preserveAspectRatio\n defines how the referenced image should fit in the rectangle\n define by the <image> element.For <marker>, preserveAspectRatio\n indicates if a uniform scaling must be performed to fit\n the element viewport.For <pattern>, preserveAspectRatio\n indicates if a uniform scaling must be performed to fit\n the element viewport.For <svg>, preserveAspectRatio indicates\n if a uniform scaling must be performed to fit the element\n viewport.For <symbol>, preserveAspectRatio indicates if\n a uniform scaling must be performed to fit the element\n viewport.For <view>, preserveAspectRatio indicates if\n a uniform scaling must be performed to fit the element\n viewport.Last modified: May 13, 2022, by MDN contributors"
      },
      "refX": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The refX attribute defines the x coordinate of an element's reference\n point.You can use this attribute with the following SVG\n elements:For <marker>, refX defines the x coordinate of\n the marker's reference point, which is to be placed exactly\n at the marker's position on the shape.Lengths are interpreted\n as being in the coordinate system of the marker contents,\n after application of the viewBox and preserveAspectRatio\n attributes.Percentage values are interpreted as being\n a percentage of the viewBox width.Numbers are interpreted\n as being in the coordinate system of the marker contents,\n after application of the viewBox and preserveAspectRatio\n attributes.The reference point of the marker is placed\n at the left edge of the shape.The reference point of the\n marker is placed at the horizontal center of the shape.The\n reference point of the marker is placed at the right edge\n of the shape.For <symbol>, refX defines the x coordinate\n of the symbol, which is defined by the cumulative effect\n of the x attribute and any transformations on the <symbol>\n and its host <use> element.Unlike other positioning attributes,\n refX is interpreted as being in the coordinate system\n of the symbol contents, after application of the viewBox\n and preserveAspectRatio attributes. If the attribute is\n not specified, no horizontal adjustment is made, and the\n left side of the symbol's rectangular viewport region\n (regardless of the viewBox coordinate) is positioned at\n the x coordinate.Note: For backwards compatibility, the\n behavior when refX is not specified on a <symbol> element\n is different from when it is specified with a value of\n 0, and therefore different from the behavior when an equivalent\n attribute is not specified on a <marker> element.Lengths\n are interpreted as being in the coordinate system of the\n marker contents, after application of the viewBox and\n preserveAspectRatio attributes.Percentage values are interpreted\n as being a percentage of the viewBox width.Numbers are\n interpreted as being in the coordinate system of the marker\n contents, after application of the viewBox and preserveAspectRatio\n attributes.The reference point of the marker is placed\n at the left edge of the shape.The reference point of the\n marker is placed at the horizontal center of the shape.The\n reference point of the marker is placed at the right edge\n of the shape.Last modified: May 13, 2022, by MDN contributors"
      },
      "refY": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The refY attribute defines the y coordinate of an element's reference\n point.You can use this attribute with the following SVG\n elements:For <marker>, refY defines the y coordinate of\n the marker's reference point, which is to be placed exactly\n at the marker's position on the shape.Lengths are interpreted\n as being in the coordinate system of the marker contents,\n after application of the viewBox and preserveAspectRatio\n attributes.Percentage values are interpreted as being\n a percentage of the viewBox height.Numbers are interpreted\n as being in the coordinate system of the marker contents,\n after application of the viewBox and preserveAspectRatio\n attributes.The reference point of the marker is placed\n at the top edge of the shape.The reference point of the\n marker is placed at the vertical center of the shape.The\n reference point of the marker is placed at the bottom\n edge of the shape.For <symbol>, refY defines the y coordinate\n of the symbol, which is defined by the cumulative effect\n of the y attribute and any transformations on the <symbol>\n and its host <use> element.Unlike other positioning attributes,\n refY is interpreted as being in the coordinate system\n of the symbol contents, after application of the viewBox\n and preserveAspectRatio attributes. If the attribute is\n not specified, no vertical adjustment is made, and the\n top side of the symbol's rectangular viewport region (regardless\n of the viewBox coordinate) is positioned at the y coordinate.Note:\n For backwards compatibility, the behavior when refY is\n not specified on a <symbol> element is different from\n when it is specified with a value of 0, and therefore\n different from the behavior when an equivalent attribute\n is not specified on a <marker> element.Lengths are interpreted\n as being in the coordinate system of the marker contents,\n after application of the viewBox and preserveAspectRatio\n attributes.Percentage values are interpreted as being\n a percentage of the viewBox height.Numbers are interpreted\n as being in the coordinate system of the marker contents,\n after application of the viewBox and preserveAspectRatio\n attributes.The reference point of the marker is placed\n at the top edge of the shape.The reference point of the\n marker is placed at the vertical center of the shape.The\n reference point of the marker is placed at the bottom\n edge of the shape.Last modified: May 13, 2022, by MDN\n contributors"
      },
      "viewBox": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The viewBox attribute defines the position and dimension, in\n user space, of an SVG viewport.The value of the viewBox\n attribute is a list of four numbers: min-x, min-y, width\n and height. The numbers, which are separated by whitespace\n and/or a comma, specify a rectangle in user space which\n is mapped to the bounds of the viewport established for\n the associated SVG element (not the browser viewport).You\n can use this attribute with the following SVG elements:The\n exact effect of this attribute is influenced by the preserveAspectRatio\n attribute.Note: Values for width or height lower or equal\n to 0 disable rendering of the element.For <marker>, viewBox\n defines the position and dimension for the content of\n the <marker> element.For <pattern>, viewBox defines the\n position and dimension for the content of the pattern\n tile.For <svg>, viewBox defines the position and dimension\n for the content of the <svg> element.For <symbol>, viewBox\n defines the position and dimension for the content of\n the <symbol> element.For <view>, viewBox defines the position\n and dimension for the content of the <view> element.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/Mask.react.js": {
    "description": "Mask is a wrapper for the <mask> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/mask",
    "displayName": "Mask",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "clipPath": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The clip-path presentation attribute defines or associates a\n clipping path with the element it is related to.Note:\n As a presentation attribute clip-path can be used as a\n CSS property.You can use this attribute with the following\n SVG elements:An extra information to tell how a <basic-shape>\n is applied to an element: fill-box indicates to use the\n object bounding box; stroke-box indicates to use the object\n bounding box extended with the stroke; view-box indicates\n to use the nearest SVG viewport as the reference box.Note:\n For more details on the clip-path syntax, see the CSS\n property clip-path reference page.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "colorInterpolation": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation attribute specifies the color space for\n gradient interpolations, color animations, and alpha compositing.Note:\n For filter effects, the color-interpolation-filters property\n controls which color space is used.The color-interpolation\n property chooses between color operations occurring in\n the sRGB color space or in a (light energy linear) linearized\n RGB color space. Having chosen the appropriate color space,\n component-wise linear interpolation is used.When a child\n element is blended into a background, the value of the\n color-interpolation property on the child determines the\n type of blending, not the value of the color-interpolation\n on the parent. For gradients which make use of the href\n or the deprecated xlink:href attribute to reference another\n gradient, the gradient uses the property's value from\n the gradient element which is directly referenced by the\n fill or stroke property. When animating colors, color\n interpolation is performed according to the value of the\n color-interpolation property on the element being animated.Note:\n As a presentation attribute, color-interpolation can be\n used as a CSS property.You can use this attribute with\n the following SVG elements:Indicates that the user agent\n can choose either the sRGB or linearRGB spaces for color\n interpolation. This option indicates that the author doesn't\n require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "enableBackground": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The enable-background attribute\n specifies how the accumulation of the background image\n is managed.Note: As a presentation attribute, enable-background\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:If an ancestor container\n element has a property value of enable-background: new,\n then all graphics elements within the current container\n element are rendered both onto the parent container element's\n background image canvas and onto the target device.Otherwise,\n there is no current background image canvas, so graphics\n elements are only rendered onto the target device.This\n value enables the ability of children of the current container\n element to access the background image.It also indicates\n that a new (i.e., initially transparent black) background\n image canvas is established and that in effect all children\n of the current container element shall be rendered into\n the new background image canvas in addition to being rendered\n onto the target device.\n      The optional <x>, <y>, <width>,\n and <height> parameters are <number> values that indicate\n the subregion of the container element's user space where\n access to the background image is allowed to happen. Those\n values act as a clipping rectangle on the background image\n canvas.\n      Negative values for <width> or <height>\n are forbidden. If one, two, or three values are specified\n or if neither <width> nor <height> are specified, the\n BackgroundImage and BackgroundAlpha of a filter primitive\n are processed as if background image processing were not\n enabled.\n    BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 17, 2022, by MDN contributors"
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "mask": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The mask attribute is a presentation attribute mainly used to\n bind a given <mask> element with the element the attribute\n belongs to.Note: As a presentation attribute mask can\n be used as a CSS property.You can use this attribute with\n the following SVG elements:Since SVG2, the mask attribute\n is defined as a css property and is a shorthand for many\n other properties: mask-image, mask-mode, mask-repeat,\n mask-position, mask-clip, mask-origin, mask-size, and\n mask-composite.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "maskContentUnits": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The maskContentUnits attribute indicates which coordinate system\n to use for the contents of the <mask> element.You can\n use this attribute with the following SVG elements:For\n <mask>, maskContentUnits defines the coordinate system\n in use for the content of the element.This value indicates\n that all coordinates inside the <mask> element refer to\n the user coordinate system as defined when the mask was\n created.This value indicates that all coordinates inside\n the <mask> element are relative to the bounding box of\n the element the mask is applied to. A bounding box could\n be considered the same as if the content of the <mask>\n were bound to a \"0 0 1 1\" viewbox.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "maskUnits": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The maskUnits attribute indicates which coordinate system to\n use for the geometry properties of the <mask> element.You\n can use this attribute with the following SVG elements:For\n <mask>, maskUnits defines the coordinate system in use\n for the geometry attributes (x, y, width and height) of\n the element.This value indicates that all coordinates\n for the geometry attributes refer to the user coordinate\n system as defined when the mask was created.This value\n indicates that all coordinates for the geometry attributes\n represent fractions or percentages of the bounding box\n of the element to which the mask is applied. A bounding\n box could be considered the same as if the content of\n the <mask> were bound to a \"0 0 1 1\" viewbox.BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "pointerEvents": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The pointer-events attribute is a presentation attribute that\n allows defining whether or when an element may be the\n target of a mouse event.Note: As a presentation attribute\n pointer-events can be used as a CSS property.You can use\n this attribute with the following SVG elements:For a detailed\n explanation of each possible value, have a look at the\n CSS pointer-events documentation.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "requiredFeatures": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The requiredFeatures attribute\n takes a list of feature strings, with the individual strings\n separated by white space. It determines whether or not\n all of the named features are supported by the browser;\n if all of them are supported, the attribute evaluates\n to true end the element is rendered; otherwise, the attribute\n evaluates to false and the current element and its children\n are skipped and thus will not be rendered. This provides\n a way to design SVG that gracefully falls back when features\n aren't available.If the attribute is not present, then\n its implicit evaluated value is true. If a null string\n or empty string value is given to attribute requiredFeatures,\n the attribute is evaluate to false.requiredFeatures is\n often used in conjunction with the <switch> element. If\n requiredFeatures is used in other situations, it represents\n a simple switch on the given element whether to render\n the element or not.To detect availability of an SVG feature\n from script, there is the (also deprecated) DOMImplementation.hasFeature()\n method.You can use this attribute with the following SVG\n elements:This is a list of feature strings, separated\n using white space. Determines whether all of the named\n features are supported by the browser. See Feature strings\n below for a list of allowed values.The following are the\n feature strings for the requiredFeatures attribute. These\n same feature strings apply to the hasFeature method call\n that is part of the SVG DOM's support for the DOMImplementation\n interface. In some cases the feature strings map directly\n to a set of attributes, properties or elements, in others\n they represent some functionality of the browser. Note\n that the format and naming for feature strings changed\n from SVG 1.0 to SVG 1.1. The SVG 1.0 feature strings are\n not listed here but can be found in the SVG Specification.\n Some browser support SVG 1.0 Feature strings for compatibility\n reasons. However, the SVG 1.0 feature strings are considered\n deprecated.At least one of the following feature is supported:At\n least one of the following feature is supported:The browser\n supports all the following features:The browser supports\n all of the DOM interfaces and methods that correspond\n to the language features for http://www.w3.org/TR/SVG11/feature#SVG-static.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-static\n plus the feature http://www.w3.org/TR/SVG11/feature#Animation.The\n browser supports all of the DOM interfaces and methods\n that correspond to the language features for http://www.w3.org/TR/SVG11/feature#SVG-animation.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-animation\n plus the following features:The browser supports all of\n the DOM interfaces and methods that correspond to the\n language features for http://www.w3.org/TR/SVG11/feature#SVG-dynamic.The\n browser supports the id, xml:base, xml:lang and xml:space\n attributesThe browser supports <svg>, <g>, <defs>, <desc>,\n <title>, <metadata>, <symbol> and <use> elements.The browser\n supports <svg>, <g>, <defs>, <desc>, <title>, <metadata>\n and <use> elements.The browser supports the enable-background\n attributeThe browser supports the <switch> element, and\n the requiredFeatures, requiredExtensions, systemLanguage\n attributesThe browser supports the <image> element.The\n browser supports the <style> element.The browser supports\n the clip and overflow attributes.The browser supports\n the <rect>, <circle>, <line>, <polyline>, <polygon>, <ellipse>\n and <path> elements.The browser supports the <text>, <tspan>,\n <tref>, <textPath>, <altGlyph>, <altGlyphDef>, <altGlyphItem>\n and <glyphRef> elements.The browser supports the <text>\n elementThe browser supports the color, fill, fill-rule,\n stroke, stroke-dasharray, stroke-dashoffset, stroke-linecap,\n stroke-linejoin, stroke-miterlimit, stroke-width, color-interpolation\n and color-rendering attributesThe browser supports the\n color, fill, fill-rule, stroke, stroke-dasharray, stroke-dashoffset,\n stroke-linecap, stroke-linejoin, stroke-miterlimit, stroke-width\n and color-rendering attributesThe browser supports the\n opacity, stroke-opacity and fill-opacity attributesThe\n browser supports the display, image-rendering, pointer-events,\n shape-rendering, text-rendering and visibility attributesThe\n browser supports the display and visibility attributesThe\n browser supports the <marker> elementThe browser supports\n the <linearGradient>, <radialGradient> and <stop> elementsThe\n browser supports the <pattern> elementThe browser supports\n the <clipPath> element and the clip-path, clip-rule attributesThe\n browser supports the <clipPath> element and the clip-path\n attributeThe browser supports the <mask> elementThe browser\n supports the <filter>, <feBlend>, <feColorMatrix>, <feComponentTransfer>,\n <feComposite>, <feConvolveMatrix>, <feDiffuseLighting>,\n <feDisplacementMap>, <feFlood>, <feGaussianBlur>, <feImage>,\n <feMerge>, <feMergeNode>, <feMorphology>, <feOffset>,\n <feSpecularLighting>, <feTile>, <feDistantLight>, <fePointLight>,\n <feSpotLight>, <feFuncR>, <feFuncG>, <feFuncB> and <feFuncA>\n elementsThe browser supports the <filter>, <feBlend>,\n <feColorMatrix>, <feComponentTransfer>, <feComposite>,\n <feFlood>, <feGaussianBlur>, <feImage>, <feMerge>, <feMergeNode>,\n <feOffset>, <feTile>, <feFuncR>, <feFuncG>, <feFuncB>\n and <feFuncA> elementsThe browser supports the onunload,\n onabort, onerror, onresize, onscroll and onzoom attributesThe\n browser supports the onfocusin, onfocusout, onactivate,\n onclick, onmousedown, onmouseup, onmouseover, onmousemove,\n onmouseout and onload attributesThe browser supports the\n onbegin, onend, onrepeat and onload attributesThe browser\n supports the <cursor> elementThe browser supports the\n <a> elementThe browser supports the xlink:type, xlink:href,\n xlink:role, xlink:arcrole, xlink:title, xlink:show and\n xlink:actuate attributesThe browser supports the <view>\n elementThe browser supports the <script> elementThe browser\n supports the <animate>, <set>, <animateMotion>, <animateTransform>,\n <animateColor> and <mpath> elementsThe browser supports\n the <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <vkern>, <font-face-src>, <font-face-uri>, <font-face-format>\n and <font-face-name> elementsThe browser supports the\n <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <font-face-src> and <font-face-name> elementsThe browser\n supports the <foreignObject> elementSee also requiredFeatures.svgBCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "systemLanguage": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The systemLanguage attribute represents a list of supported language\n tags. This list is matched against the language defined\n in the user preferences.You can use this attribute with\n the following SVG elements:The value is a set of comma-separated\n tokens, each of which must be a language tag, as defined\n in RFC 5646: Tags for Identifying Languages (also known\n as BCP 47).systemLanguage is often used in conjunction\n with the <switch> element. If the attribute is used in\n other situations, then it represents a simple switch on\n the given element whether to render the element or not.Note:\n If several alternative language objects are enclosed in\n a <switch> and none of them matches, this may lead to\n situations where no content is displayed. It is thus recommended\n to include a \"catch-all\" choice at the end of such a <switch>\n which is acceptable in all cases.The attribute evaluates\n to \"true\" if one of the language tags indicated by user\n preferences is a case-insensitive match or prefix (followed\n by a \"-\") of one of the language tags given in the value\n of this parameter. Otherwise it evaluates to \"false\".Note:\n The prefix matching rule does not imply that if a user\n understands a language with a certain tag, that the user\n will also understand all languages with the tag as prefix.If\n the attribute is not present, then it implicitly evaluates\n to \"true\". If a null string or empty string value is given,\n the attribute evaluates to \"false\".The prefix rule allows\n the use of prefix tags if this is the case.Multiple languages\n may be listed for content that is intended for multiple\n audiences. For example, content that is presented simultaneously\n in the original Maori and English versions, would call\n for:However, just because multiple languages are present\n within the object on which the systemLanguage test attribute\n is placed, this does not mean that it is intended for\n multiple linguistic audiences. An example would be a beginner's\n language primer, such as \"A First Lesson in Latin,\" which\n is clearly intended to be used by an English-literate\n audience. In this case, the attribute should only include\n en.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/Metadata.react.js": {
    "description": "Metadata is a wrapper for the <metadata> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/metadata",
    "displayName": "Metadata",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/Path.react.js": {
    "description": "Path is a wrapper for the <path> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/path",
    "displayName": "Path",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "clipPath": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The clip-path presentation attribute defines or associates a\n clipping path with the element it is related to.Note:\n As a presentation attribute clip-path can be used as a\n CSS property.You can use this attribute with the following\n SVG elements:An extra information to tell how a <basic-shape>\n is applied to an element: fill-box indicates to use the\n object bounding box; stroke-box indicates to use the object\n bounding box extended with the stroke; view-box indicates\n to use the nearest SVG viewport as the reference box.Note:\n For more details on the clip-path syntax, see the CSS\n property clip-path reference page.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "colorInterpolation": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation attribute specifies the color space for\n gradient interpolations, color animations, and alpha compositing.Note:\n For filter effects, the color-interpolation-filters property\n controls which color space is used.The color-interpolation\n property chooses between color operations occurring in\n the sRGB color space or in a (light energy linear) linearized\n RGB color space. Having chosen the appropriate color space,\n component-wise linear interpolation is used.When a child\n element is blended into a background, the value of the\n color-interpolation property on the child determines the\n type of blending, not the value of the color-interpolation\n on the parent. For gradients which make use of the href\n or the deprecated xlink:href attribute to reference another\n gradient, the gradient uses the property's value from\n the gradient element which is directly referenced by the\n fill or stroke property. When animating colors, color\n interpolation is performed according to the value of the\n color-interpolation property on the element being animated.Note:\n As a presentation attribute, color-interpolation can be\n used as a CSS property.You can use this attribute with\n the following SVG elements:Indicates that the user agent\n can choose either the sRGB or linearRGB spaces for color\n interpolation. This option indicates that the author doesn't\n require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "d": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The d attribute defines a path to be drawn.\n  A path definition\n is a list of path commands where each command is composed\n of a command letter and numbers that represent the command\n parameters.\n  The commands are detailed below.\nYou can\n use this attribute with the following SVG elements: <path>,\n <glyph>, <missing-glyph>.d is a presentation attribute,\n and hence can also be used as a CSS property.For <path>,\n d is a string containing a series of path commands that\n define the path to be drawn.Warning: As of SVG2 <glyph>\n is deprecated and shouldn't be used.For <glyph>, d is\n a string containing a series of path commands that define\n the outline shape of the glyph.Note: The point of origin\n (the coordinate 0,0) is usually the upper left corner\n of the context. However the <glyph> element has its origin\n in the bottom left corner of its letterbox.Warning: As\n of SVG2 <missing-glyph> is deprecated and shouldn't be\n used.For <missing-glyph>, d is a string containing a series\n of path commands that define the outline shape of the\n glyph.\n  d is a presentation attribute, and hence can\n be also be modified using CSS.\n  The property takes either\n path() or none.\n\n  The example below shows how you might\n apply a new path on hover over an element.\n  The new path\n is the same as the old one, but adds a line across the\n heart.\nPath commands are instructions that define a path\n to be drawn. Each command is composed of a command letter\n and numbers that represent the command parameters.SVG\n defines 6 types of path commands, for a total of 20 commands:Note:\n Commands are case-sensitive. An upper-case command specifies\n absolute coordinates, while a lower-case command specifies\n coordinates relative to the current position.It is always\n possible to specify a negative value as an argument to\n a command:MoveTo instructions can be thought of as picking\n up the drawing instrument, and setting it down somewhere\n else\u2014in other words, moving the current point (Po; {xo,\n yo}). There is no line drawn between Po and the new current\n point (Pn; {xn, yn}).\n          Move the current point\n to the coordinate\n          x,y. Any subsequent coordinate\n pair(s) are interpreted as parameter(s)\n          for\n implicit absolute LineTo (L) command(s) (see below).\n\n        Formula: Pn = {x, y}\n          Move the current\n point by shifting the last known position of\n        \n  the path by dx along the x-axis and by\n          dy along\n the y-axis. Any subsequent coordinate\n          pair(s)\n are interpreted as parameter(s) for implicit relative\n LineTo\n          (l) command(s) (see below).\n        \n\n          Formula: Pn = {xo\n          + dx, yo + dy}\n \n       LineTo instructions draw a straight line from the\n current point (Po; {xo, yo}) to the end point (Pn; {xn,\n yn}), based on the parameters specified. The end point\n (Pn) then becomes the current point for the next command\n (Po\u2032).\n          Draw a line from the current point to\n the\n          end point specified by x,y. Any subsequent\n coordinate pair(s) are interpreted as parameter(s)\n  \n        for implicit absolute LineTo (L) command(s).\n \n       \n          Formula: Po\u2032 =\n          Pn = {x, y}\n\n        \n          Draw a line from the current point to\n the\n          end point, which is the current point shifted\n by\n          dx along the x-axis and\n          dy along\n the y-axis. Any subsequent coordinate\n          pair(s)\n are interpreted as parameter(s) for implicit relative\n LineTo\n          (l) command(s) (see below).\n        \n\n          Formula: Po\u2032 =\n          Pn = {xo +\n        \n  dx, yo + dy}\n        \n          Draw a horizontal line\n from the current point to the\n          end point, which\n is specified by the\n          x parameter and the current\n point's\n          y coordinate. Any subsequent value(s)\n are interpreted as\n          parameter(s) for implicit\n absolute horizontal LineTo (H)\n          command(s).\n\n        \n          Formula: Po\u2032 =\n          Pn = {x, yo}\n\n        \n          Draw a horizontal line from the current\n point to the\n          end point, which is specified by\n the\n          current point shifted by dx along the\n \n         x-axis and the current point's y coordinate. Any\n\n          subsequent value(s) are interpreted as parameter(s)\n for implicit\n          relative horizontal LineTo (h)\n command(s).\n        \n          Formula: Po\u2032 =\n       \n   Pn = {xo +\n          dx, yo}\n        \n          Draw\n a vertical line from the current point to the\n       \n   end point, which is specified by the\n          y parameter\n and the current point's\n          x coordinate. Any subsequent\n values are interpreted as\n          parameters for implicit\n absolute vertical LineTo (V)\n          command(s).\n  \n      \n          Formula: Po\u2032 =\n          Pn = {xo, y}\n\n        \n          Draw a vertical line from the current\n point to the\n          end point, which is specified by\n the\n          current point shifted by dy along the\n \n         y-axis and the current point's x coordinate. Any\n\n          subsequent value(s) are interpreted as parameter(s)\n for implicit\n          relative vertical LineTo (v) command(s).\n\n        \n          Formula: Po\u2032 =\n          Pn = {xo, yo\n + dy}\n        Cubic B\u00e9zier curves are smooth curve definitions\n using four points:(Po = {xo, yo})(Pn = {xn, yn})\n    \n  (Pcs = {xcs, ycs})\n      (controls curvature near the\n start of the curve)\n    \n      (Pce = {xce, yce})\n   \n   (controls curvature near the end of the curve)\n    After\n drawing, the end point (Pn) becomes the current point\n for the next command (Po\u2032).\n          Draw a cubic B\u00e9zier\n curve from the current point to the\n          end point\n specified by x,y. The start control point is specified\n by\n          x1,y1 and the end control point is\n     \n     specified by x2,y2. Any subsequent triplet(s) of coordinate\n pairs are interpreted as\n          parameter(s) for implicit\n absolute cubic B\u00e9zier curve (C)\n          command(s).\n\n        \n          Draw a cubic B\u00e9zier curve from the current\n point to the\n          end point, which is the current\n point shifted by\n          dx along the x-axis and\n  \n        dy along the y-axis. The\n          start control\n point is the current point (starting\n          point of\n the curve) shifted by dx1 along the\n          x-axis and\n dy1 along the y-axis. The\n          end control point\n is the current point (starting\n          point of the\n curve) shifted by dx2 along the\n          x-axis and dy2\n along the y-axis. Any\n          subsequent triplet(s)\n of coordinate pairs are interpreted as\n          parameter(s)\n for implicit relative cubic B\u00e9zier curve (c)\n        \n  command(s).\n        Quadratic B\u00e9zier curves are smooth\n curve definitions using three points:Po = {xo, yo}Pn =\n {xn, yn}\n      Pc = {xc, yc}\n      (controls curvature)\n\n    After drawing, the end point (Pn) becomes the current\n point for the next command (Po\u2032).\n          Draw a quadratic\n B\u00e9zier curve from the current point to the\n          end\n point specified by x,y. The control point is specified\n by\n          x1,y1. Any subsequent pair(s) of coordinate\n pairs are interpreted as\n          parameter(s) for implicit\n absolute quadratic B\u00e9zier curve\n          (Q) command(s).\n\n        \n          Draw a quadratic B\u00e9zier curve from the\n current point to the\n          end point, which is the\n current point shifted by\n          dx along the x-axis\n and\n          dy along the y-axis. The\n          control\n point is the current point (starting point\n          of\n the curve) shifted by dx1 along the x-axis\n          and\n dy1 along the y-axis. Any subsequent\n          pair(s)\n of coordinate pairs are interpreted as parameter(s) for\n\n          implicit relative quadratic B\u00e9zier curve (q)\n command(s).\n        \n          Draw a smooth quadratic\n B\u00e9zier curve from the\n          current point to the end\n point specified by\n          x,y. The control point is\n a reflection of the\n          control point of the previous\n curve command. If the previous\n          command wasn't\n a quadratic B\u00e9zier curve, the control point is\n      \n    the same as the curve starting point (current point).\n Any\n          subsequent coordinate pair(s) are interpreted\n as parameter(s) for\n          implicit absolute smooth\n quadratic B\u00e9zier curve (T)\n          command(s).\n    \n    \n          Draw a smooth quadratic B\u00e9zier curve from\n the\n          current point to the end point, which is\n the\n          current point shifted by dx along the\n \n         x-axis and dy along the y-axis. The\n         \n control point is a reflection of the\n          control\n point of the previous curve command. If the previous\n\n          command wasn't a quadratic B\u00e9zier curve, the\n control point is\n          the same as the curve starting\n point (current point). Any\n          subsequent coordinate\n pair(s) are interpreted as parameter(s) for\n         \n implicit relative smooth quadratic B\u00e9zier curve (t)\n \n         command(s).\n        Elliptical arc curves are\n curves defined as a portion of an ellipse. It is sometimes\n easier to draw highly regular curves with an elliptical\n arc than with a B\u00e9zier curve.\n          Draw an Arc curve\n from the current point to the coordinate\n          x,y.\n The center of the ellipse used to draw the arc is determined\n\n          automatically based on the other parameters of\n the command:\n        \n          Draw an Arc curve from\n the current point to a point for which\n          coordinates\n are those of the current point shifted by\n          dx\n along the x-axis and\n          dy along the y-axis. The\n center of the ellipse\n          used to draw the arc is\n determined automatically based on the other\n         \n parameters of the command:\n        ClosePath instructions\n draw a straight line from the current position to the\n first point in the path.Note: The appearance of a shape\n closed with ClosePath may be different to that of one\n closed by drawing a line to the origin, using one of the\n other commands, because the line ends are joined together\n (according to the stroke-linejoin setting), rather than\n just being placed at the same coordinates.BCD tables only\n load in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 15, 2022, by MDN contributors"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "fillOpacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The fill-opacity attribute is a presentation attribute defining\n the opacity of the paint server (color, gradient, pattern,\n etc) applied to a shape.Note: As a presentation attribute\n fill-opacity can be used as a CSS property.You can use\n this attribute with the following SVG elements:Note: SVG2\n introduces percentage values for fill-opacity, however,\n it is not widely supported yet (See Browser compatibility\n below) as a consequence, it is best practices to set opacity\n with a value in the range [0-1].BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "fillRule": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"evenodd\"",
              "computed": false
            },
            {
              "value": "\"inherit\"",
              "computed": false
            },
            {
              "value": "\"nonzero\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The fill-rule attribute is a presentation attribute defining\n the algorithm to use to determine the inside part of a\n shape.Note: As a presentation attribute, fill-rule can\n be used as a CSS property.You can use this attribute with\n the following SVG elements:The fill-rule attribute provides\n two options for how the inside (that is, the area to be\n filled) of a shape is determined:The value nonzero determines\n the \"insideness\" of a point in the shape by drawing a\n ray from that point to infinity in any direction, and\n then examining the places where a segment of the shape\n crosses the ray. Starting with a count of zero, add one\n each time a path segment crosses the ray from left to\n right and subtract one each time a path segment crosses\n the ray from right to left. After counting the crossings,\n if the result is zero then the point is outside the path.\n Otherwise, it is inside.The value evenodd determines the\n \"insideness\" of a point in the shape by drawing a ray\n from that point to infinity in any direction and counting\n the number of path segments from the given shape that\n the ray crosses. If this number is odd, the point is inside;\n if even, the point is outside.BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "markerEnd": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The marker-end attribute defines the arrowhead or polymarker\n that will be drawn at the final vertex of the given shape.For\n all shape elements, except <polyline> and <path>, the\n last vertex is the same as the first vertex. In this case,\n if the value of marker-start and marker-end are both not\n none, then two markers will be rendered on that final\n vertex. For <path> elements, for each closed subpath,\n the last vertex is the same as the first vertex. marker-end\n is only rendered on the final vertex of the path data.Note:\n As a presentation attribute, marker-end can be used as\n a CSS property.You can use this attribute with the following\n SVG elements:Indicates that no marker symbol shall be\n drawn at the final vertex.This value is a reference to\n a <marker> element, which will be drawn at the final vertex.\n If the reference is not valid, then no marker will be\n drawn.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 17, 2022, by MDN contributors"
      },
      "markerMid": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The marker-mid attribute defines the arrowhead or polymarker\n that will be drawn at all interior vertices of the given\n shape.The marker is rendered on every vertex other than\n the first and last vertices of the path data.Note: As\n a presentation attribute, marker-mid can be used as a\n CSS property.You can use this attribute with the following\n SVG elements:Indicates that no marker symbol shall be\n drawn at the given vertices.This value is a reference\n to a <marker> element, which will be drawn at the given\n vertices. If the reference is not valid, then no marker\n will be drawn.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 17, 2022, by MDN contributors"
      },
      "markerStart": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The marker-start attribute defines the arrowhead or polymarker\n that will be drawn at the first vertex of the given shape.For\n all shape elements, except <polyline> and <path>, the\n last vertex is the same as the first vertex. In this case,\n if the value of marker-start and marker-end are both not\n none, then two markers will be rendered on that final\n vertex. For <path> elements, for each closed subpath,\n the last vertex is the same as the first vertex. marker-start\n is only rendered on the first vertex of the path data.Note:\n As a presentation attribute, marker-start can be used\n as a CSS property.You can use this attribute with the\n following SVG elements:Indicates that no marker symbol\n shall be drawn at the first vertex.This value is a reference\n to a <marker> element, which will be drawn at the first\n vertex. If the reference is not valid, then no marker\n will be drawn.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 17, 2022, by MDN contributors"
      },
      "mask": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The mask attribute is a presentation attribute mainly used to\n bind a given <mask> element with the element the attribute\n belongs to.Note: As a presentation attribute mask can\n be used as a CSS property.You can use this attribute with\n the following SVG elements:Since SVG2, the mask attribute\n is defined as a css property and is a shorthand for many\n other properties: mask-image, mask-mode, mask-repeat,\n mask-position, mask-clip, mask-origin, mask-size, and\n mask-composite.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "opacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The opacity attribute specifies the transparency of an object\n or of a group of objects, that is, the degree to which\n the background behind the element is overlaid.Note: As\n a presentation attribute, opacity can be used as a CSS\n property. See the css opacity property for more information.You\n can use this attribute with the following SVG elements:The\n uniform opacity setting to be applied across an entire\n object, as a <number>. Any values outside the range 0.0\n (fully transparent) to 1.0 (fully opaque) will be clamped\n to this range.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "paintOrder": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The paint-order attribute specifies the order that the fill,\n stroke, and markers of a given shape or text element are\n painted.Note: As a presentation attribute, paint-order\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:This value indicates that\n the fill will be painted first, then the stroke, and finally\n the markers.The order of these three keywords indicates\n the order in which the painting happens, from left to\n right. If any of the three painting components is omitted,\n they will be painted in their default order after the\n specified components. For example, using stroke is equivalent\n to stroke fill markers.The example would be rendered as\n follows:\n  \nThe stroke under effect could be achieved\n via the following CSS property:BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "pathLength": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The pathLength attribute lets authors specify a total length\n for the path, in user units. This value is then used to\n calibrate the browser's distance calculations with those\n of the author, by scaling all distance computations using\n the ratio pathLength/(computed value of path length).This\n can affect the actual rendered lengths of paths; including\n text paths, animation paths, and various stroke operations.\n Basically, all computations that require the length of\n the path. stroke-dasharray, for example, will assume the\n start of the path being 0 and the end point the value\n defined in the pathLength attribute.You can use this attribute\n with the following SVG elements:For <circle>, pathLength\n lets authors specify a total length for the circle, in\n user units.For <ellipse>, pathLength lets authors specify\n a total length for the ellipse, in user units.For <line>,\n pathLength lets authors specify a total length for the\n line, in user units.For <path>, pathLength lets authors\n specify a total length for the path, in user units.For\n <polygon>, pathLength lets authors specify a total length\n for the shape, in user units.For <polyline>, pathLength\n lets authors specify a total length for the shape, in\n user units.For <rect>, pathLength lets authors specify\n a total length for the rectangle, in user units.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "pointerEvents": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The pointer-events attribute is a presentation attribute that\n allows defining whether or when an element may be the\n target of a mouse event.Note: As a presentation attribute\n pointer-events can be used as a CSS property.You can use\n this attribute with the following SVG elements:For a detailed\n explanation of each possible value, have a look at the\n CSS pointer-events documentation.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "requiredFeatures": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The requiredFeatures attribute\n takes a list of feature strings, with the individual strings\n separated by white space. It determines whether or not\n all of the named features are supported by the browser;\n if all of them are supported, the attribute evaluates\n to true end the element is rendered; otherwise, the attribute\n evaluates to false and the current element and its children\n are skipped and thus will not be rendered. This provides\n a way to design SVG that gracefully falls back when features\n aren't available.If the attribute is not present, then\n its implicit evaluated value is true. If a null string\n or empty string value is given to attribute requiredFeatures,\n the attribute is evaluate to false.requiredFeatures is\n often used in conjunction with the <switch> element. If\n requiredFeatures is used in other situations, it represents\n a simple switch on the given element whether to render\n the element or not.To detect availability of an SVG feature\n from script, there is the (also deprecated) DOMImplementation.hasFeature()\n method.You can use this attribute with the following SVG\n elements:This is a list of feature strings, separated\n using white space. Determines whether all of the named\n features are supported by the browser. See Feature strings\n below for a list of allowed values.The following are the\n feature strings for the requiredFeatures attribute. These\n same feature strings apply to the hasFeature method call\n that is part of the SVG DOM's support for the DOMImplementation\n interface. In some cases the feature strings map directly\n to a set of attributes, properties or elements, in others\n they represent some functionality of the browser. Note\n that the format and naming for feature strings changed\n from SVG 1.0 to SVG 1.1. The SVG 1.0 feature strings are\n not listed here but can be found in the SVG Specification.\n Some browser support SVG 1.0 Feature strings for compatibility\n reasons. However, the SVG 1.0 feature strings are considered\n deprecated.At least one of the following feature is supported:At\n least one of the following feature is supported:The browser\n supports all the following features:The browser supports\n all of the DOM interfaces and methods that correspond\n to the language features for http://www.w3.org/TR/SVG11/feature#SVG-static.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-static\n plus the feature http://www.w3.org/TR/SVG11/feature#Animation.The\n browser supports all of the DOM interfaces and methods\n that correspond to the language features for http://www.w3.org/TR/SVG11/feature#SVG-animation.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-animation\n plus the following features:The browser supports all of\n the DOM interfaces and methods that correspond to the\n language features for http://www.w3.org/TR/SVG11/feature#SVG-dynamic.The\n browser supports the id, xml:base, xml:lang and xml:space\n attributesThe browser supports <svg>, <g>, <defs>, <desc>,\n <title>, <metadata>, <symbol> and <use> elements.The browser\n supports <svg>, <g>, <defs>, <desc>, <title>, <metadata>\n and <use> elements.The browser supports the enable-background\n attributeThe browser supports the <switch> element, and\n the requiredFeatures, requiredExtensions, systemLanguage\n attributesThe browser supports the <image> element.The\n browser supports the <style> element.The browser supports\n the clip and overflow attributes.The browser supports\n the <rect>, <circle>, <line>, <polyline>, <polygon>, <ellipse>\n and <path> elements.The browser supports the <text>, <tspan>,\n <tref>, <textPath>, <altGlyph>, <altGlyphDef>, <altGlyphItem>\n and <glyphRef> elements.The browser supports the <text>\n elementThe browser supports the color, fill, fill-rule,\n stroke, stroke-dasharray, stroke-dashoffset, stroke-linecap,\n stroke-linejoin, stroke-miterlimit, stroke-width, color-interpolation\n and color-rendering attributesThe browser supports the\n color, fill, fill-rule, stroke, stroke-dasharray, stroke-dashoffset,\n stroke-linecap, stroke-linejoin, stroke-miterlimit, stroke-width\n and color-rendering attributesThe browser supports the\n opacity, stroke-opacity and fill-opacity attributesThe\n browser supports the display, image-rendering, pointer-events,\n shape-rendering, text-rendering and visibility attributesThe\n browser supports the display and visibility attributesThe\n browser supports the <marker> elementThe browser supports\n the <linearGradient>, <radialGradient> and <stop> elementsThe\n browser supports the <pattern> elementThe browser supports\n the <clipPath> element and the clip-path, clip-rule attributesThe\n browser supports the <clipPath> element and the clip-path\n attributeThe browser supports the <mask> elementThe browser\n supports the <filter>, <feBlend>, <feColorMatrix>, <feComponentTransfer>,\n <feComposite>, <feConvolveMatrix>, <feDiffuseLighting>,\n <feDisplacementMap>, <feFlood>, <feGaussianBlur>, <feImage>,\n <feMerge>, <feMergeNode>, <feMorphology>, <feOffset>,\n <feSpecularLighting>, <feTile>, <feDistantLight>, <fePointLight>,\n <feSpotLight>, <feFuncR>, <feFuncG>, <feFuncB> and <feFuncA>\n elementsThe browser supports the <filter>, <feBlend>,\n <feColorMatrix>, <feComponentTransfer>, <feComposite>,\n <feFlood>, <feGaussianBlur>, <feImage>, <feMerge>, <feMergeNode>,\n <feOffset>, <feTile>, <feFuncR>, <feFuncG>, <feFuncB>\n and <feFuncA> elementsThe browser supports the onunload,\n onabort, onerror, onresize, onscroll and onzoom attributesThe\n browser supports the onfocusin, onfocusout, onactivate,\n onclick, onmousedown, onmouseup, onmouseover, onmousemove,\n onmouseout and onload attributesThe browser supports the\n onbegin, onend, onrepeat and onload attributesThe browser\n supports the <cursor> elementThe browser supports the\n <a> elementThe browser supports the xlink:type, xlink:href,\n xlink:role, xlink:arcrole, xlink:title, xlink:show and\n xlink:actuate attributesThe browser supports the <view>\n elementThe browser supports the <script> elementThe browser\n supports the <animate>, <set>, <animateMotion>, <animateTransform>,\n <animateColor> and <mpath> elementsThe browser supports\n the <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <vkern>, <font-face-src>, <font-face-uri>, <font-face-format>\n and <font-face-name> elementsThe browser supports the\n <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <font-face-src> and <font-face-name> elementsThe browser\n supports the <foreignObject> elementSee also requiredFeatures.svgBCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "shapeRendering": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The shape-rendering attribute provides hints to the renderer\n about what tradeoffs to make when rendering shapes like\n paths, circles, or rectangles.Note: As a presentation\n attribute, shape-rendering can be used as a CSS property.You\n can use this attribute with the following SVG elements:This\n value indicates that the user agent shall make appropriate\n tradeoffs to balance speed, crisp edges and geometric\n precision, but with geometric precision given more importance\n than speed and crisp edges.This value indicates that the\n user agent shall emphasize rendering speed over geometric\n precision and crisp edges. This option will sometimes\n cause the user agent to turn off shape anti-aliasing.This\n value indicates that the user agent shall attempt to emphasize\n the contrast between clean edges of artwork over rendering\n speed and geometric precision. To achieve crisp edges,\n the user agent might turn off anti-aliasing for all lines\n and curves or possibly just for straight lines which are\n close to vertical or horizontal. Also, the user agent\n might adjust line positions and line widths to align edges\n with device pixels.Indicates that the user agent shall\n emphasize geometric precision over speed and crisp edges.BCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "stroke": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "stroke color"
      },
      "strokeDasharray": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-dasharray attribute is a presentation attribute defining\n the pattern of dashes and gaps used to paint the outline\n of the shape;Note: As a presentation attribute, stroke-dasharray\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:A list of comma and/or\n white space separated <length>s and <percentage>s that\n specify the lengths of alternating dashes and gaps.If\n an odd number of values is provided, then the list of\n values is repeated to yield an even number of values.\n Thus, 5,3,2 is equivalent to 5,3,2,5,3,2.BCD tables only\n load in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "strokeDashoffset": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-dashoffset attribute is a presentation attribute defining\n an offset on the rendering of the associated dash array.Note:\n As a presentation attribute stroke-dashoffset can be used\n as a CSS property.You can use this attribute with the\n following SVG elements:The offset is usually expressed\n in user units resolved against the pathLength but if a\n <percentage> is used, the value is resolved as a percentage\n of the current viewport.BCD tables only load in the browser\n with JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "strokeLinecap": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"butt\"",
              "computed": false
            },
            {
              "value": "\"inherit\"",
              "computed": false
            },
            {
              "value": "\"round\"",
              "computed": false
            },
            {
              "value": "\"square\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The stroke-linecap attribute is a presentation attribute defining\n the shape to be used at the end of open subpaths when\n they are stroked.Note: As a presentation attribute stroke-linecap\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:The butt value indicates\n that the stroke for each subpath does not extend beyond\n its two endpoints. On a zero length subpath, the path\n will not be rendered at all.The round value indicates\n that at the end of each subpath the stroke will be extended\n by a half circle with a diameter equal to the stroke width.\n On a zero length subpath, the stroke consists of a full\n circle centered at the subpath's point.The square value\n indicates that at the end of each subpath the stroke will\n be extended by a rectangle with a width equal to half\n the width of the stroke and a height equal to the width\n of the stroke. On a zero length subpath, the stroke consists\n of a square with its width equal to the stroke width,\n centered at the subpath's point.BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "strokeLinejoin": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"bevel\"",
              "computed": false
            },
            {
              "value": "\"inherit\"",
              "computed": false
            },
            {
              "value": "\"miter\"",
              "computed": false
            },
            {
              "value": "\"round\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The stroke-linejoin attribute is a presentation attribute defining\n the shape to be used at the corners of paths when they\n are stroked.Note: As a presentation attribute stroke-linejoin\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:Note: The arcs value as\n been introduced in SVG2 and it isn't widely supported\n yet, see Browser compatibility below for details.The arcs\n value indicates that an arcs corner is to be used to join\n path segments. The arcs shape is formed by extending the\n outer edges of the stroke at the join point with arcs\n that have the same curvature as the outer edges at the\n join point.The bevel value indicates that a bevelled corner\n is to be used to join path segments.The miter value indicates\n that a sharp corner is to be used to join path segments.\n The corner is formed by extending the outer edges of the\n stroke at the tangents of the path segments until they\n intersect.Note: If the stroke-miterlimit is exceeded,\n the line join falls back to bevel.Note: the miter-clip\n value as been introduced in SVG2 and it isn't widely supported\n yet, see Browser compatibility below for details.The miter-clip\n value indicates that a sharp corner is to be used to join\n path segments. The corner is formed by extending the outer\n edges of the stroke at the tangents of the path segments\n until they intersect.If the stroke-miterlimit is exceeded,\n the miter is clipped at a distance equal to half the stroke-miterlimit\n value multiplied by the stroke width from the intersection\n of the path segments. This provides a better rendering\n than miter on very sharp join or in case of an animation.The\n round value indicates that a round corner is to be used\n to join path segments.BCD tables only load in the browser\n with JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "strokeMiterlimit": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-miterlimit attribute is a presentation attribute defining\n a limit on the ratio of the miter length to the stroke-width\n used to draw a miter join. When the limit is exceeded,\n the join is converted from a miter to a bevel.Note: As\n a presentation attribute stroke-miterlimit can be used\n as a CSS property.You can use this attribute with the\n following SVG elements:When two line segments meet at\n a sharp angle and miter joins have been specified for\n stroke-linejoin, it is possible for the miter to extend\n far beyond the thickness of the line stroking the path.\n The stroke-miterlimit ratio is used to define when the\n limit is exceeded, if so the join is converted from a\n miter to a bevel.The ratio of miter length (distance between\n the outer tip and the inner corner of the miter) to stroke-width\n is directly related to the angle (theta) between the segments\n in user space by the formula:\n  \n    \n      stroke-miterlimit\n\n      =\n      \n        \n          miterLength\n        \n\n        \n          stroke-width\n        \n      \n      =\n\n      \n        \n          1\n        \n        \n        \n  \n            sin\n            \n              (\n      \n        \n                \n                  \u03b8\n        \n        \n                \n                  2\n        \n        \n              \n              )\n            \n \n         \n        \n      \n    \n  \nFor example, a miter\n limit of 1.414 converts miters to bevels for theta less\n than 90 degrees, a limit of 4.0 converts them for theta\n less than approximately 29 degrees, and a limit of 10.0\n converts them for theta less than approximately 11.5 degrees.The\n value of stroke-miterlimit must be greater than or equal\n to 1.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "strokeOpacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-opacity attribute is a presentation attribute defining\n the opacity of the paint server (color, gradient, pattern,\n etc) applied to the stroke of a shape.Note: As a presentation\n attribute stroke-opacity can be used as a CSS property.You\n can use this attribute with the following SVG elements:Note:\n SVG2 introduces percentage values for stroke-opacity,\n however, it is not widely supported yet (See Browser compatibility\n below) as a consequence, it is best practices to set opacity\n with a value in the range [0-1].It's important to know\n that the stroke partially covers the fill of a shape,\n so a stroke with an opacity different than 1 will partially\n show the fill underneath. To avoid this effect, it is\n possible to apply a global opacity with the opacity attribute\n or to put the stroke behind the fill with the paint-order\n attribute.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "strokeWidth": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-width attribute is a presentation attribute defining\n the width of the stroke to be applied to the shape.You\n can use this attribute with the following SVG elements:Note:\n A percentage value is always computed as a percentage\n of the normalized viewBox diagonal length.BCD tables only\n load in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "systemLanguage": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The systemLanguage attribute represents a list of supported language\n tags. This list is matched against the language defined\n in the user preferences.You can use this attribute with\n the following SVG elements:The value is a set of comma-separated\n tokens, each of which must be a language tag, as defined\n in RFC 5646: Tags for Identifying Languages (also known\n as BCP 47).systemLanguage is often used in conjunction\n with the <switch> element. If the attribute is used in\n other situations, then it represents a simple switch on\n the given element whether to render the element or not.Note:\n If several alternative language objects are enclosed in\n a <switch> and none of them matches, this may lead to\n situations where no content is displayed. It is thus recommended\n to include a \"catch-all\" choice at the end of such a <switch>\n which is acceptable in all cases.The attribute evaluates\n to \"true\" if one of the language tags indicated by user\n preferences is a case-insensitive match or prefix (followed\n by a \"-\") of one of the language tags given in the value\n of this parameter. Otherwise it evaluates to \"false\".Note:\n The prefix matching rule does not imply that if a user\n understands a language with a certain tag, that the user\n will also understand all languages with the tag as prefix.If\n the attribute is not present, then it implicitly evaluates\n to \"true\". If a null string or empty string value is given,\n the attribute evaluates to \"false\".The prefix rule allows\n the use of prefix tags if this is the case.Multiple languages\n may be listed for content that is intended for multiple\n audiences. For example, content that is presented simultaneously\n in the original Maori and English versions, would call\n for:However, just because multiple languages are present\n within the object on which the systemLanguage test attribute\n is placed, this does not mean that it is intended for\n multiple linguistic audiences. An example would be a beginner's\n language primer, such as \"A First Lesson in Latin,\" which\n is clearly intended to be used by an English-literate\n audience. In this case, the attribute should only include\n en.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "vectorEffect": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The vector-effect property specifies the vector effect to use\n when drawing an object. Vector effects are applied before\n any of the other compositing operations, i.e. filters,\n masks and clips.Note: As a presentation attribute, vector-effect\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:This value specifies that\n no vector effect shall be applied, i.e. the default rendering\n behavior is used which is to first fill the geometry of\n a shape with a specified paint, then stroke the outline\n with a specified paint.This value modifies the way an\n object is stroked. Normally stroking involves calculating\n stroke outline of the shape's path in current user coordinate\n system and filling that outline with the stroke paint\n (color or gradient). The resulting visual effect of this\n value is that the stroke width is not dependent on the\n transformations of the element (including non-uniform\n scaling and shear transformations) and zoom level.This\n value specifies a special user coordinate system used\n by the element and its descendants. The scale of that\n user coordinate system does not change in spite of any\n transformation changes from a host coordinate space. However,\n it does not specify the suppression of rotation and skew.\n Also, it does not specify the origin of the user coordinate\n system. Since this value suppresses scaling of the user\n coordinate system, it also has the characteristics of\n non-scaling-stroke.This value specifies a special user\n coordinate system used by the element and its descendants.\n The rotation and skew of that user coordinate system is\n suppressed in spite of any transformation changes from\n a host coordinate space. However, it does not specify\n the suppression of scaling. Also, it does not specify\n the origin of user coordinate system.This value specifies\n a special user coordinate system used by the element and\n its descendants. The position of user coordinate system\n is fixed in spite of any transformation changes from a\n host coordinate space. However, it does not specify the\n suppression of rotation, skew and scaling. When this vector\n effect and the transform property are defined at the same\n time, that property is consumed for this effect.BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "visibility": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The visibility attribute lets you control the visibility of graphical\n elements. With a value of hidden or collapse the current\n graphics element is invisible.Note: If the visibility\n attribute is set to hidden on a text element, then the\n text is invisible but still takes up space in text layout\n calculations.Depending on the value of attribute pointer-events,\n graphics elements which have their visibility attribute\n set to hidden still might receive events.Note: As a presentation\n attribute, visibility can be used as a CSS property. See\n the css visibility property for more information.You can\n use this attribute with the following SVG elements:The\n following example toggles the CSS visibility of the SVG\n image path.This value indicates that the element will\n be painted.This value indicates that the element will\n not be painted. Though it is still part of the rendering\n tree, i.e. it may receive pointer events depending on\n the pointer-events attribute, may receive focus depending\n on the tabindex attribute, contributes to bounding box\n calculations and clipping paths, and does affect text\n layout.This value is equal to hidden.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "clipRule": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "\u00ab SVG Attribute reference homeThe clip-rule attribute only applies\n to graphics elements that are contained within a <clipPath>\n element. The clip-rule attribute basically works as the\n fill-rule attribute, except that it applies to <clipPath>\n definitions.The following fragment of code will cause\n an evenodd clipping rule to be applied to the clipping\n path because clip-rule is specified on the <path> element\n that defines the clipping shape:whereas the following\n fragment of code will not cause an evenodd clipping rule\n to be applied because the clip-rule is specified on the\n referencing element, not on the object defining the clipping\n shape:As a presentation attribute, it also can be used\n as a property directly inside a CSS stylesheetSee description\n of fill-rule property.See description of fill-rule property.The\n following elements can use the clip-rule attribute, but\n only if they are inside a <clipPath> element.BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: May 17, 2022, by\n MDN contributors"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/Pattern.react.js": {
    "description": "Pattern is a wrapper for the <pattern> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/pattern",
    "displayName": "Pattern",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "clip": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The clip attribute is a\n presentation attribute defining the visible region of\n an element.This attribute has the same parameter values\n as defined for the css clip property. Unitless values,\n which indicate current user coordinates, are permitted\n on the coordinate values on the rect(). The value of auto\n defines a clipping path along the bounds of the viewport\n created by the given element.You can use this attribute\n with the following SVG elements:Warning: This property\n is deprecated. Use clip-path instead.The value auto defines\n a clipping path along the bounds of the viewport created\n by the given element. The value rect() defines a clipping\n rectangle following the following syntax: rect(<top>,\n <right>, <bottom>, <left>). The <top> and <bottom> values\n specify offsets from the top border edge of the element\n viewport, while <right> and <left> specify offsets from\n the left border edge of the element viewport.BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: Jun 28, 2022, by\n MDN contributors"
      },
      "clipPath": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The clip-path presentation attribute defines or associates a\n clipping path with the element it is related to.Note:\n As a presentation attribute clip-path can be used as a\n CSS property.You can use this attribute with the following\n SVG elements:An extra information to tell how a <basic-shape>\n is applied to an element: fill-box indicates to use the\n object bounding box; stroke-box indicates to use the object\n bounding box extended with the stroke; view-box indicates\n to use the nearest SVG viewport as the reference box.Note:\n For more details on the clip-path syntax, see the CSS\n property clip-path reference page.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "colorInterpolation": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation attribute specifies the color space for\n gradient interpolations, color animations, and alpha compositing.Note:\n For filter effects, the color-interpolation-filters property\n controls which color space is used.The color-interpolation\n property chooses between color operations occurring in\n the sRGB color space or in a (light energy linear) linearized\n RGB color space. Having chosen the appropriate color space,\n component-wise linear interpolation is used.When a child\n element is blended into a background, the value of the\n color-interpolation property on the child determines the\n type of blending, not the value of the color-interpolation\n on the parent. For gradients which make use of the href\n or the deprecated xlink:href attribute to reference another\n gradient, the gradient uses the property's value from\n the gradient element which is directly referenced by the\n fill or stroke property. When animating colors, color\n interpolation is performed according to the value of the\n color-interpolation property on the element being animated.Note:\n As a presentation attribute, color-interpolation can be\n used as a CSS property.You can use this attribute with\n the following SVG elements:Indicates that the user agent\n can choose either the sRGB or linearRGB spaces for color\n interpolation. This option indicates that the author doesn't\n require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "enableBackground": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The enable-background attribute\n specifies how the accumulation of the background image\n is managed.Note: As a presentation attribute, enable-background\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:If an ancestor container\n element has a property value of enable-background: new,\n then all graphics elements within the current container\n element are rendered both onto the parent container element's\n background image canvas and onto the target device.Otherwise,\n there is no current background image canvas, so graphics\n elements are only rendered onto the target device.This\n value enables the ability of children of the current container\n element to access the background image.It also indicates\n that a new (i.e., initially transparent black) background\n image canvas is established and that in effect all children\n of the current container element shall be rendered into\n the new background image canvas in addition to being rendered\n onto the target device.\n      The optional <x>, <y>, <width>,\n and <height> parameters are <number> values that indicate\n the subregion of the container element's user space where\n access to the background image is allowed to happen. Those\n values act as a clipping rectangle on the background image\n canvas.\n      Negative values for <width> or <height>\n are forbidden. If one, two, or three values are specified\n or if neither <width> nor <height> are specified, the\n BackgroundImage and BackgroundAlpha of a filter primitive\n are processed as if background image processing were not\n enabled.\n    BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 17, 2022, by MDN contributors"
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "mask": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The mask attribute is a presentation attribute mainly used to\n bind a given <mask> element with the element the attribute\n belongs to.Note: As a presentation attribute mask can\n be used as a CSS property.You can use this attribute with\n the following SVG elements:Since SVG2, the mask attribute\n is defined as a css property and is a shorthand for many\n other properties: mask-image, mask-mode, mask-repeat,\n mask-position, mask-clip, mask-origin, mask-size, and\n mask-composite.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "overflow": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The overflow attribute sets what to do when an element's content\n is too big to fit in its block formatting context. This\n feature is not widely implemented yet.This attribute has\n the same parameter values and meaning as the css overflow\n property, however, the following additional points apply:Note:\n Although the initial value for overflow is auto, it is\n overwritten in the User Agent style sheet for the <svg>\n element when it is not the root element of a stand-alone\n document, the <pattern> element, and the <marker> element\n to be hidden by default.Note: As a presentation attribute,\n overflow can be used as a CSS property. See the CSS overflow\n property for more information.You can use this attribute\n with the following SVG elements:For a description of the\n values, please see the css overflow property.BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "patternContentUnits": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The patternContentUnits attribute indicates which coordinate\n system to use for the contents of the <pattern> element.Note:\n That this attribute has no effect if attribute viewBox\n is specified on the <pattern> element.You can use this\n attribute with the following SVG elements:For <pattern>,\n patternContentUnits defines the coordinate system in use\n for the content of the element.This value indicates that\n all coordinates inside the <pattern> element refer to\n the user coordinate system as defined when the pattern\n tile was created.This value indicates that all coordinates\n inside the <pattern> element are relative to the bounding\n box of the element the pattern is applied to. A bounding\n box could be considered the same as if the content of\n the <pattern> were bound to a \"0 0 1 1\" viewbox for a\n pattern tile of width and height of 100%.BCD tables only\n load in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "patternTransform": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The patternTransform attribute defines a list of transform definitions\n that are applied to a pattern tile.You can use this attribute\n with the following SVG elements:For <pattern>, patternTransform\n defines a list of transform definitions that are applied\n to a pattern tile.Note: As of SVG2, it is also allowed\n to use the CSS transform property. However, the current\n state of implementation isn't very good. For backward\n compatibility reason, it is highly suggested to keep using\n the patternTransform attribute.To know more about the\n definition of transform functions, see the transform attribute\n definition.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "patternUnits": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The patternUnits attribute indicates which coordinate system\n to use for the geometry properties of the <pattern> element.You\n can use this attribute with the following SVG elements:For\n <pattern>, patternUnits defines the coordinate system\n in use for the geometry properties (x, y, width and height)\n of the element.This value indicates that all coordinates\n for the geometry properties refer to the user coordinate\n system as defined when the pattern was applied.This value\n indicates that all coordinates for the geometry properties\n represent fractions or percentages of the bounding box\n of the element to which the pattern is applied. A bounding\n box could be considered the same as if the content of\n the <pattern> were bound to a \"0 0 1 1\" viewbox.BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "pointerEvents": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The pointer-events attribute is a presentation attribute that\n allows defining whether or when an element may be the\n target of a mouse event.Note: As a presentation attribute\n pointer-events can be used as a CSS property.You can use\n this attribute with the following SVG elements:For a detailed\n explanation of each possible value, have a look at the\n CSS pointer-events documentation.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "preserveAspectRatio": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The preserveAspectRatio attribute indicates how an element with\n a viewBox providing a given aspect ratio must fit into\n a viewport with a different aspect ratio.Because the aspect\n ratio of an SVG image is defined by the viewBox attribute,\n if this attribute isn't set, the preserveAspectRatio attribute\n has no effect (with one exception, the <image> element,\n as described below).Its value is made of one or two keywords:\n A required alignment value and an optional \"meet or slice\"\n reference as described below:The alignment value indicates\n whether to force uniform scaling and, if so, the alignment\n method to use in case the aspect ratio of the viewBox\n doesn't match the aspect ratio of the viewport. The alignment\n value must be one of the following keywords:The meet or\n slice reference is optional and, if provided, must be\n one of the following keywords:You can use this attribute\n with the following SVG elements:For <feImage>, preserveAspectRatio\n defines how the referenced image should fit in the rectangle\n define by the <feImage> element.For <image>, preserveAspectRatio\n defines how the referenced image should fit in the rectangle\n define by the <image> element.For <marker>, preserveAspectRatio\n indicates if a uniform scaling must be performed to fit\n the element viewport.For <pattern>, preserveAspectRatio\n indicates if a uniform scaling must be performed to fit\n the element viewport.For <svg>, preserveAspectRatio indicates\n if a uniform scaling must be performed to fit the element\n viewport.For <symbol>, preserveAspectRatio indicates if\n a uniform scaling must be performed to fit the element\n viewport.For <view>, preserveAspectRatio indicates if\n a uniform scaling must be performed to fit the element\n viewport.Last modified: May 13, 2022, by MDN contributors"
      },
      "requiredFeatures": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The requiredFeatures attribute\n takes a list of feature strings, with the individual strings\n separated by white space. It determines whether or not\n all of the named features are supported by the browser;\n if all of them are supported, the attribute evaluates\n to true end the element is rendered; otherwise, the attribute\n evaluates to false and the current element and its children\n are skipped and thus will not be rendered. This provides\n a way to design SVG that gracefully falls back when features\n aren't available.If the attribute is not present, then\n its implicit evaluated value is true. If a null string\n or empty string value is given to attribute requiredFeatures,\n the attribute is evaluate to false.requiredFeatures is\n often used in conjunction with the <switch> element. If\n requiredFeatures is used in other situations, it represents\n a simple switch on the given element whether to render\n the element or not.To detect availability of an SVG feature\n from script, there is the (also deprecated) DOMImplementation.hasFeature()\n method.You can use this attribute with the following SVG\n elements:This is a list of feature strings, separated\n using white space. Determines whether all of the named\n features are supported by the browser. See Feature strings\n below for a list of allowed values.The following are the\n feature strings for the requiredFeatures attribute. These\n same feature strings apply to the hasFeature method call\n that is part of the SVG DOM's support for the DOMImplementation\n interface. In some cases the feature strings map directly\n to a set of attributes, properties or elements, in others\n they represent some functionality of the browser. Note\n that the format and naming for feature strings changed\n from SVG 1.0 to SVG 1.1. The SVG 1.0 feature strings are\n not listed here but can be found in the SVG Specification.\n Some browser support SVG 1.0 Feature strings for compatibility\n reasons. However, the SVG 1.0 feature strings are considered\n deprecated.At least one of the following feature is supported:At\n least one of the following feature is supported:The browser\n supports all the following features:The browser supports\n all of the DOM interfaces and methods that correspond\n to the language features for http://www.w3.org/TR/SVG11/feature#SVG-static.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-static\n plus the feature http://www.w3.org/TR/SVG11/feature#Animation.The\n browser supports all of the DOM interfaces and methods\n that correspond to the language features for http://www.w3.org/TR/SVG11/feature#SVG-animation.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-animation\n plus the following features:The browser supports all of\n the DOM interfaces and methods that correspond to the\n language features for http://www.w3.org/TR/SVG11/feature#SVG-dynamic.The\n browser supports the id, xml:base, xml:lang and xml:space\n attributesThe browser supports <svg>, <g>, <defs>, <desc>,\n <title>, <metadata>, <symbol> and <use> elements.The browser\n supports <svg>, <g>, <defs>, <desc>, <title>, <metadata>\n and <use> elements.The browser supports the enable-background\n attributeThe browser supports the <switch> element, and\n the requiredFeatures, requiredExtensions, systemLanguage\n attributesThe browser supports the <image> element.The\n browser supports the <style> element.The browser supports\n the clip and overflow attributes.The browser supports\n the <rect>, <circle>, <line>, <polyline>, <polygon>, <ellipse>\n and <path> elements.The browser supports the <text>, <tspan>,\n <tref>, <textPath>, <altGlyph>, <altGlyphDef>, <altGlyphItem>\n and <glyphRef> elements.The browser supports the <text>\n elementThe browser supports the color, fill, fill-rule,\n stroke, stroke-dasharray, stroke-dashoffset, stroke-linecap,\n stroke-linejoin, stroke-miterlimit, stroke-width, color-interpolation\n and color-rendering attributesThe browser supports the\n color, fill, fill-rule, stroke, stroke-dasharray, stroke-dashoffset,\n stroke-linecap, stroke-linejoin, stroke-miterlimit, stroke-width\n and color-rendering attributesThe browser supports the\n opacity, stroke-opacity and fill-opacity attributesThe\n browser supports the display, image-rendering, pointer-events,\n shape-rendering, text-rendering and visibility attributesThe\n browser supports the display and visibility attributesThe\n browser supports the <marker> elementThe browser supports\n the <linearGradient>, <radialGradient> and <stop> elementsThe\n browser supports the <pattern> elementThe browser supports\n the <clipPath> element and the clip-path, clip-rule attributesThe\n browser supports the <clipPath> element and the clip-path\n attributeThe browser supports the <mask> elementThe browser\n supports the <filter>, <feBlend>, <feColorMatrix>, <feComponentTransfer>,\n <feComposite>, <feConvolveMatrix>, <feDiffuseLighting>,\n <feDisplacementMap>, <feFlood>, <feGaussianBlur>, <feImage>,\n <feMerge>, <feMergeNode>, <feMorphology>, <feOffset>,\n <feSpecularLighting>, <feTile>, <feDistantLight>, <fePointLight>,\n <feSpotLight>, <feFuncR>, <feFuncG>, <feFuncB> and <feFuncA>\n elementsThe browser supports the <filter>, <feBlend>,\n <feColorMatrix>, <feComponentTransfer>, <feComposite>,\n <feFlood>, <feGaussianBlur>, <feImage>, <feMerge>, <feMergeNode>,\n <feOffset>, <feTile>, <feFuncR>, <feFuncG>, <feFuncB>\n and <feFuncA> elementsThe browser supports the onunload,\n onabort, onerror, onresize, onscroll and onzoom attributesThe\n browser supports the onfocusin, onfocusout, onactivate,\n onclick, onmousedown, onmouseup, onmouseover, onmousemove,\n onmouseout and onload attributesThe browser supports the\n onbegin, onend, onrepeat and onload attributesThe browser\n supports the <cursor> elementThe browser supports the\n <a> elementThe browser supports the xlink:type, xlink:href,\n xlink:role, xlink:arcrole, xlink:title, xlink:show and\n xlink:actuate attributesThe browser supports the <view>\n elementThe browser supports the <script> elementThe browser\n supports the <animate>, <set>, <animateMotion>, <animateTransform>,\n <animateColor> and <mpath> elementsThe browser supports\n the <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <vkern>, <font-face-src>, <font-face-uri>, <font-face-format>\n and <font-face-name> elementsThe browser supports the\n <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <font-face-src> and <font-face-name> elementsThe browser\n supports the <foreignObject> elementSee also requiredFeatures.svgBCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "systemLanguage": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The systemLanguage attribute represents a list of supported language\n tags. This list is matched against the language defined\n in the user preferences.You can use this attribute with\n the following SVG elements:The value is a set of comma-separated\n tokens, each of which must be a language tag, as defined\n in RFC 5646: Tags for Identifying Languages (also known\n as BCP 47).systemLanguage is often used in conjunction\n with the <switch> element. If the attribute is used in\n other situations, then it represents a simple switch on\n the given element whether to render the element or not.Note:\n If several alternative language objects are enclosed in\n a <switch> and none of them matches, this may lead to\n situations where no content is displayed. It is thus recommended\n to include a \"catch-all\" choice at the end of such a <switch>\n which is acceptable in all cases.The attribute evaluates\n to \"true\" if one of the language tags indicated by user\n preferences is a case-insensitive match or prefix (followed\n by a \"-\") of one of the language tags given in the value\n of this parameter. Otherwise it evaluates to \"false\".Note:\n The prefix matching rule does not imply that if a user\n understands a language with a certain tag, that the user\n will also understand all languages with the tag as prefix.If\n the attribute is not present, then it implicitly evaluates\n to \"true\". If a null string or empty string value is given,\n the attribute evaluates to \"false\".The prefix rule allows\n the use of prefix tags if this is the case.Multiple languages\n may be listed for content that is intended for multiple\n audiences. For example, content that is presented simultaneously\n in the original Maori and English versions, would call\n for:However, just because multiple languages are present\n within the object on which the systemLanguage test attribute\n is placed, this does not mean that it is intended for\n multiple linguistic audiences. An example would be a beginner's\n language primer, such as \"A First Lesson in Latin,\" which\n is clearly intended to be used by an English-literate\n audience. In this case, the attribute should only include\n en.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "viewBox": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The viewBox attribute defines the position and dimension, in\n user space, of an SVG viewport.The value of the viewBox\n attribute is a list of four numbers: min-x, min-y, width\n and height. The numbers, which are separated by whitespace\n and/or a comma, specify a rectangle in user space which\n is mapped to the bounds of the viewport established for\n the associated SVG element (not the browser viewport).You\n can use this attribute with the following SVG elements:The\n exact effect of this attribute is influenced by the preserveAspectRatio\n attribute.Note: Values for width or height lower or equal\n to 0 disable rendering of the element.For <marker>, viewBox\n defines the position and dimension for the content of\n the <marker> element.For <pattern>, viewBox defines the\n position and dimension for the content of the pattern\n tile.For <svg>, viewBox defines the position and dimension\n for the content of the <svg> element.For <symbol>, viewBox\n defines the position and dimension for the content of\n the <symbol> element.For <view>, viewBox defines the position\n and dimension for the content of the <view> element.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/Polygon.react.js": {
    "description": "Polygon is a wrapper for the <polygon> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/polygon",
    "displayName": "Polygon",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "clipPath": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The clip-path presentation attribute defines or associates a\n clipping path with the element it is related to.Note:\n As a presentation attribute clip-path can be used as a\n CSS property.You can use this attribute with the following\n SVG elements:An extra information to tell how a <basic-shape>\n is applied to an element: fill-box indicates to use the\n object bounding box; stroke-box indicates to use the object\n bounding box extended with the stroke; view-box indicates\n to use the nearest SVG viewport as the reference box.Note:\n For more details on the clip-path syntax, see the CSS\n property clip-path reference page.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "colorInterpolation": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation attribute specifies the color space for\n gradient interpolations, color animations, and alpha compositing.Note:\n For filter effects, the color-interpolation-filters property\n controls which color space is used.The color-interpolation\n property chooses between color operations occurring in\n the sRGB color space or in a (light energy linear) linearized\n RGB color space. Having chosen the appropriate color space,\n component-wise linear interpolation is used.When a child\n element is blended into a background, the value of the\n color-interpolation property on the child determines the\n type of blending, not the value of the color-interpolation\n on the parent. For gradients which make use of the href\n or the deprecated xlink:href attribute to reference another\n gradient, the gradient uses the property's value from\n the gradient element which is directly referenced by the\n fill or stroke property. When animating colors, color\n interpolation is performed according to the value of the\n color-interpolation property on the element being animated.Note:\n As a presentation attribute, color-interpolation can be\n used as a CSS property.You can use this attribute with\n the following SVG elements:Indicates that the user agent\n can choose either the sRGB or linearRGB spaces for color\n interpolation. This option indicates that the author doesn't\n require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "fillOpacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The fill-opacity attribute is a presentation attribute defining\n the opacity of the paint server (color, gradient, pattern,\n etc) applied to a shape.Note: As a presentation attribute\n fill-opacity can be used as a CSS property.You can use\n this attribute with the following SVG elements:Note: SVG2\n introduces percentage values for fill-opacity, however,\n it is not widely supported yet (See Browser compatibility\n below) as a consequence, it is best practices to set opacity\n with a value in the range [0-1].BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "fillRule": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"evenodd\"",
              "computed": false
            },
            {
              "value": "\"inherit\"",
              "computed": false
            },
            {
              "value": "\"nonzero\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The fill-rule attribute is a presentation attribute defining\n the algorithm to use to determine the inside part of a\n shape.Note: As a presentation attribute, fill-rule can\n be used as a CSS property.You can use this attribute with\n the following SVG elements:The fill-rule attribute provides\n two options for how the inside (that is, the area to be\n filled) of a shape is determined:The value nonzero determines\n the \"insideness\" of a point in the shape by drawing a\n ray from that point to infinity in any direction, and\n then examining the places where a segment of the shape\n crosses the ray. Starting with a count of zero, add one\n each time a path segment crosses the ray from left to\n right and subtract one each time a path segment crosses\n the ray from right to left. After counting the crossings,\n if the result is zero then the point is outside the path.\n Otherwise, it is inside.The value evenodd determines the\n \"insideness\" of a point in the shape by drawing a ray\n from that point to infinity in any direction and counting\n the number of path segments from the given shape that\n the ray crosses. If this number is odd, the point is inside;\n if even, the point is outside.BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "markerEnd": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The marker-end attribute defines the arrowhead or polymarker\n that will be drawn at the final vertex of the given shape.For\n all shape elements, except <polyline> and <path>, the\n last vertex is the same as the first vertex. In this case,\n if the value of marker-start and marker-end are both not\n none, then two markers will be rendered on that final\n vertex. For <path> elements, for each closed subpath,\n the last vertex is the same as the first vertex. marker-end\n is only rendered on the final vertex of the path data.Note:\n As a presentation attribute, marker-end can be used as\n a CSS property.You can use this attribute with the following\n SVG elements:Indicates that no marker symbol shall be\n drawn at the final vertex.This value is a reference to\n a <marker> element, which will be drawn at the final vertex.\n If the reference is not valid, then no marker will be\n drawn.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 17, 2022, by MDN contributors"
      },
      "markerMid": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The marker-mid attribute defines the arrowhead or polymarker\n that will be drawn at all interior vertices of the given\n shape.The marker is rendered on every vertex other than\n the first and last vertices of the path data.Note: As\n a presentation attribute, marker-mid can be used as a\n CSS property.You can use this attribute with the following\n SVG elements:Indicates that no marker symbol shall be\n drawn at the given vertices.This value is a reference\n to a <marker> element, which will be drawn at the given\n vertices. If the reference is not valid, then no marker\n will be drawn.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 17, 2022, by MDN contributors"
      },
      "markerStart": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The marker-start attribute defines the arrowhead or polymarker\n that will be drawn at the first vertex of the given shape.For\n all shape elements, except <polyline> and <path>, the\n last vertex is the same as the first vertex. In this case,\n if the value of marker-start and marker-end are both not\n none, then two markers will be rendered on that final\n vertex. For <path> elements, for each closed subpath,\n the last vertex is the same as the first vertex. marker-start\n is only rendered on the first vertex of the path data.Note:\n As a presentation attribute, marker-start can be used\n as a CSS property.You can use this attribute with the\n following SVG elements:Indicates that no marker symbol\n shall be drawn at the first vertex.This value is a reference\n to a <marker> element, which will be drawn at the first\n vertex. If the reference is not valid, then no marker\n will be drawn.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 17, 2022, by MDN contributors"
      },
      "mask": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The mask attribute is a presentation attribute mainly used to\n bind a given <mask> element with the element the attribute\n belongs to.Note: As a presentation attribute mask can\n be used as a CSS property.You can use this attribute with\n the following SVG elements:Since SVG2, the mask attribute\n is defined as a css property and is a shorthand for many\n other properties: mask-image, mask-mode, mask-repeat,\n mask-position, mask-clip, mask-origin, mask-size, and\n mask-composite.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "opacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The opacity attribute specifies the transparency of an object\n or of a group of objects, that is, the degree to which\n the background behind the element is overlaid.Note: As\n a presentation attribute, opacity can be used as a CSS\n property. See the css opacity property for more information.You\n can use this attribute with the following SVG elements:The\n uniform opacity setting to be applied across an entire\n object, as a <number>. Any values outside the range 0.0\n (fully transparent) to 1.0 (fully opaque) will be clamped\n to this range.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "paintOrder": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The paint-order attribute specifies the order that the fill,\n stroke, and markers of a given shape or text element are\n painted.Note: As a presentation attribute, paint-order\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:This value indicates that\n the fill will be painted first, then the stroke, and finally\n the markers.The order of these three keywords indicates\n the order in which the painting happens, from left to\n right. If any of the three painting components is omitted,\n they will be painted in their default order after the\n specified components. For example, using stroke is equivalent\n to stroke fill markers.The example would be rendered as\n follows:\n  \nThe stroke under effect could be achieved\n via the following CSS property:BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "pathLength": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The pathLength attribute lets authors specify a total length\n for the path, in user units. This value is then used to\n calibrate the browser's distance calculations with those\n of the author, by scaling all distance computations using\n the ratio pathLength/(computed value of path length).This\n can affect the actual rendered lengths of paths; including\n text paths, animation paths, and various stroke operations.\n Basically, all computations that require the length of\n the path. stroke-dasharray, for example, will assume the\n start of the path being 0 and the end point the value\n defined in the pathLength attribute.You can use this attribute\n with the following SVG elements:For <circle>, pathLength\n lets authors specify a total length for the circle, in\n user units.For <ellipse>, pathLength lets authors specify\n a total length for the ellipse, in user units.For <line>,\n pathLength lets authors specify a total length for the\n line, in user units.For <path>, pathLength lets authors\n specify a total length for the path, in user units.For\n <polygon>, pathLength lets authors specify a total length\n for the shape, in user units.For <polyline>, pathLength\n lets authors specify a total length for the shape, in\n user units.For <rect>, pathLength lets authors specify\n a total length for the rectangle, in user units.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "pointerEvents": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The pointer-events attribute is a presentation attribute that\n allows defining whether or when an element may be the\n target of a mouse event.Note: As a presentation attribute\n pointer-events can be used as a CSS property.You can use\n this attribute with the following SVG elements:For a detailed\n explanation of each possible value, have a look at the\n CSS pointer-events documentation.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "points": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The points attribute defines a list of points. Each point is\n defined by a pair of number representing a X and a Y coordinate\n in the user coordinate system. If the attribute contains\n an odd number of coordinates, the last one will be ignored.You\n can use this attribute with the following SVG elements:For\n <polyline>, points defines a list of points, each representing\n a vertex of the line to be drawn. Each point is define\n by a X and Y coordinate in the user coordinate system.Note:\n A polyline is an open shape, meaning the last point is\n not connected to the first point.For <polygon>, points\n defines a list of points, each representing a vertex of\n the shape to be drawn. Each point is define by a X and\n Y coordinate in the user coordinate system.Note: A polygon\n is a closed shape, meaning the last point is connected\n to the first point.Last modified: May 13, 2022, by MDN\n contributors"
      },
      "requiredFeatures": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The requiredFeatures attribute\n takes a list of feature strings, with the individual strings\n separated by white space. It determines whether or not\n all of the named features are supported by the browser;\n if all of them are supported, the attribute evaluates\n to true end the element is rendered; otherwise, the attribute\n evaluates to false and the current element and its children\n are skipped and thus will not be rendered. This provides\n a way to design SVG that gracefully falls back when features\n aren't available.If the attribute is not present, then\n its implicit evaluated value is true. If a null string\n or empty string value is given to attribute requiredFeatures,\n the attribute is evaluate to false.requiredFeatures is\n often used in conjunction with the <switch> element. If\n requiredFeatures is used in other situations, it represents\n a simple switch on the given element whether to render\n the element or not.To detect availability of an SVG feature\n from script, there is the (also deprecated) DOMImplementation.hasFeature()\n method.You can use this attribute with the following SVG\n elements:This is a list of feature strings, separated\n using white space. Determines whether all of the named\n features are supported by the browser. See Feature strings\n below for a list of allowed values.The following are the\n feature strings for the requiredFeatures attribute. These\n same feature strings apply to the hasFeature method call\n that is part of the SVG DOM's support for the DOMImplementation\n interface. In some cases the feature strings map directly\n to a set of attributes, properties or elements, in others\n they represent some functionality of the browser. Note\n that the format and naming for feature strings changed\n from SVG 1.0 to SVG 1.1. The SVG 1.0 feature strings are\n not listed here but can be found in the SVG Specification.\n Some browser support SVG 1.0 Feature strings for compatibility\n reasons. However, the SVG 1.0 feature strings are considered\n deprecated.At least one of the following feature is supported:At\n least one of the following feature is supported:The browser\n supports all the following features:The browser supports\n all of the DOM interfaces and methods that correspond\n to the language features for http://www.w3.org/TR/SVG11/feature#SVG-static.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-static\n plus the feature http://www.w3.org/TR/SVG11/feature#Animation.The\n browser supports all of the DOM interfaces and methods\n that correspond to the language features for http://www.w3.org/TR/SVG11/feature#SVG-animation.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-animation\n plus the following features:The browser supports all of\n the DOM interfaces and methods that correspond to the\n language features for http://www.w3.org/TR/SVG11/feature#SVG-dynamic.The\n browser supports the id, xml:base, xml:lang and xml:space\n attributesThe browser supports <svg>, <g>, <defs>, <desc>,\n <title>, <metadata>, <symbol> and <use> elements.The browser\n supports <svg>, <g>, <defs>, <desc>, <title>, <metadata>\n and <use> elements.The browser supports the enable-background\n attributeThe browser supports the <switch> element, and\n the requiredFeatures, requiredExtensions, systemLanguage\n attributesThe browser supports the <image> element.The\n browser supports the <style> element.The browser supports\n the clip and overflow attributes.The browser supports\n the <rect>, <circle>, <line>, <polyline>, <polygon>, <ellipse>\n and <path> elements.The browser supports the <text>, <tspan>,\n <tref>, <textPath>, <altGlyph>, <altGlyphDef>, <altGlyphItem>\n and <glyphRef> elements.The browser supports the <text>\n elementThe browser supports the color, fill, fill-rule,\n stroke, stroke-dasharray, stroke-dashoffset, stroke-linecap,\n stroke-linejoin, stroke-miterlimit, stroke-width, color-interpolation\n and color-rendering attributesThe browser supports the\n color, fill, fill-rule, stroke, stroke-dasharray, stroke-dashoffset,\n stroke-linecap, stroke-linejoin, stroke-miterlimit, stroke-width\n and color-rendering attributesThe browser supports the\n opacity, stroke-opacity and fill-opacity attributesThe\n browser supports the display, image-rendering, pointer-events,\n shape-rendering, text-rendering and visibility attributesThe\n browser supports the display and visibility attributesThe\n browser supports the <marker> elementThe browser supports\n the <linearGradient>, <radialGradient> and <stop> elementsThe\n browser supports the <pattern> elementThe browser supports\n the <clipPath> element and the clip-path, clip-rule attributesThe\n browser supports the <clipPath> element and the clip-path\n attributeThe browser supports the <mask> elementThe browser\n supports the <filter>, <feBlend>, <feColorMatrix>, <feComponentTransfer>,\n <feComposite>, <feConvolveMatrix>, <feDiffuseLighting>,\n <feDisplacementMap>, <feFlood>, <feGaussianBlur>, <feImage>,\n <feMerge>, <feMergeNode>, <feMorphology>, <feOffset>,\n <feSpecularLighting>, <feTile>, <feDistantLight>, <fePointLight>,\n <feSpotLight>, <feFuncR>, <feFuncG>, <feFuncB> and <feFuncA>\n elementsThe browser supports the <filter>, <feBlend>,\n <feColorMatrix>, <feComponentTransfer>, <feComposite>,\n <feFlood>, <feGaussianBlur>, <feImage>, <feMerge>, <feMergeNode>,\n <feOffset>, <feTile>, <feFuncR>, <feFuncG>, <feFuncB>\n and <feFuncA> elementsThe browser supports the onunload,\n onabort, onerror, onresize, onscroll and onzoom attributesThe\n browser supports the onfocusin, onfocusout, onactivate,\n onclick, onmousedown, onmouseup, onmouseover, onmousemove,\n onmouseout and onload attributesThe browser supports the\n onbegin, onend, onrepeat and onload attributesThe browser\n supports the <cursor> elementThe browser supports the\n <a> elementThe browser supports the xlink:type, xlink:href,\n xlink:role, xlink:arcrole, xlink:title, xlink:show and\n xlink:actuate attributesThe browser supports the <view>\n elementThe browser supports the <script> elementThe browser\n supports the <animate>, <set>, <animateMotion>, <animateTransform>,\n <animateColor> and <mpath> elementsThe browser supports\n the <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <vkern>, <font-face-src>, <font-face-uri>, <font-face-format>\n and <font-face-name> elementsThe browser supports the\n <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <font-face-src> and <font-face-name> elementsThe browser\n supports the <foreignObject> elementSee also requiredFeatures.svgBCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "shapeRendering": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The shape-rendering attribute provides hints to the renderer\n about what tradeoffs to make when rendering shapes like\n paths, circles, or rectangles.Note: As a presentation\n attribute, shape-rendering can be used as a CSS property.You\n can use this attribute with the following SVG elements:This\n value indicates that the user agent shall make appropriate\n tradeoffs to balance speed, crisp edges and geometric\n precision, but with geometric precision given more importance\n than speed and crisp edges.This value indicates that the\n user agent shall emphasize rendering speed over geometric\n precision and crisp edges. This option will sometimes\n cause the user agent to turn off shape anti-aliasing.This\n value indicates that the user agent shall attempt to emphasize\n the contrast between clean edges of artwork over rendering\n speed and geometric precision. To achieve crisp edges,\n the user agent might turn off anti-aliasing for all lines\n and curves or possibly just for straight lines which are\n close to vertical or horizontal. Also, the user agent\n might adjust line positions and line widths to align edges\n with device pixels.Indicates that the user agent shall\n emphasize geometric precision over speed and crisp edges.BCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "stroke": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "stroke color"
      },
      "strokeDasharray": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-dasharray attribute is a presentation attribute defining\n the pattern of dashes and gaps used to paint the outline\n of the shape;Note: As a presentation attribute, stroke-dasharray\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:A list of comma and/or\n white space separated <length>s and <percentage>s that\n specify the lengths of alternating dashes and gaps.If\n an odd number of values is provided, then the list of\n values is repeated to yield an even number of values.\n Thus, 5,3,2 is equivalent to 5,3,2,5,3,2.BCD tables only\n load in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "strokeDashoffset": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-dashoffset attribute is a presentation attribute defining\n an offset on the rendering of the associated dash array.Note:\n As a presentation attribute stroke-dashoffset can be used\n as a CSS property.You can use this attribute with the\n following SVG elements:The offset is usually expressed\n in user units resolved against the pathLength but if a\n <percentage> is used, the value is resolved as a percentage\n of the current viewport.BCD tables only load in the browser\n with JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "strokeLinejoin": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"bevel\"",
              "computed": false
            },
            {
              "value": "\"inherit\"",
              "computed": false
            },
            {
              "value": "\"miter\"",
              "computed": false
            },
            {
              "value": "\"round\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The stroke-linejoin attribute is a presentation attribute defining\n the shape to be used at the corners of paths when they\n are stroked.Note: As a presentation attribute stroke-linejoin\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:Note: The arcs value as\n been introduced in SVG2 and it isn't widely supported\n yet, see Browser compatibility below for details.The arcs\n value indicates that an arcs corner is to be used to join\n path segments. The arcs shape is formed by extending the\n outer edges of the stroke at the join point with arcs\n that have the same curvature as the outer edges at the\n join point.The bevel value indicates that a bevelled corner\n is to be used to join path segments.The miter value indicates\n that a sharp corner is to be used to join path segments.\n The corner is formed by extending the outer edges of the\n stroke at the tangents of the path segments until they\n intersect.Note: If the stroke-miterlimit is exceeded,\n the line join falls back to bevel.Note: the miter-clip\n value as been introduced in SVG2 and it isn't widely supported\n yet, see Browser compatibility below for details.The miter-clip\n value indicates that a sharp corner is to be used to join\n path segments. The corner is formed by extending the outer\n edges of the stroke at the tangents of the path segments\n until they intersect.If the stroke-miterlimit is exceeded,\n the miter is clipped at a distance equal to half the stroke-miterlimit\n value multiplied by the stroke width from the intersection\n of the path segments. This provides a better rendering\n than miter on very sharp join or in case of an animation.The\n round value indicates that a round corner is to be used\n to join path segments.BCD tables only load in the browser\n with JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "strokeMiterlimit": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-miterlimit attribute is a presentation attribute defining\n a limit on the ratio of the miter length to the stroke-width\n used to draw a miter join. When the limit is exceeded,\n the join is converted from a miter to a bevel.Note: As\n a presentation attribute stroke-miterlimit can be used\n as a CSS property.You can use this attribute with the\n following SVG elements:When two line segments meet at\n a sharp angle and miter joins have been specified for\n stroke-linejoin, it is possible for the miter to extend\n far beyond the thickness of the line stroking the path.\n The stroke-miterlimit ratio is used to define when the\n limit is exceeded, if so the join is converted from a\n miter to a bevel.The ratio of miter length (distance between\n the outer tip and the inner corner of the miter) to stroke-width\n is directly related to the angle (theta) between the segments\n in user space by the formula:\n  \n    \n      stroke-miterlimit\n\n      =\n      \n        \n          miterLength\n        \n\n        \n          stroke-width\n        \n      \n      =\n\n      \n        \n          1\n        \n        \n        \n  \n            sin\n            \n              (\n      \n        \n                \n                  \u03b8\n        \n        \n                \n                  2\n        \n        \n              \n              )\n            \n \n         \n        \n      \n    \n  \nFor example, a miter\n limit of 1.414 converts miters to bevels for theta less\n than 90 degrees, a limit of 4.0 converts them for theta\n less than approximately 29 degrees, and a limit of 10.0\n converts them for theta less than approximately 11.5 degrees.The\n value of stroke-miterlimit must be greater than or equal\n to 1.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "strokeOpacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-opacity attribute is a presentation attribute defining\n the opacity of the paint server (color, gradient, pattern,\n etc) applied to the stroke of a shape.Note: As a presentation\n attribute stroke-opacity can be used as a CSS property.You\n can use this attribute with the following SVG elements:Note:\n SVG2 introduces percentage values for stroke-opacity,\n however, it is not widely supported yet (See Browser compatibility\n below) as a consequence, it is best practices to set opacity\n with a value in the range [0-1].It's important to know\n that the stroke partially covers the fill of a shape,\n so a stroke with an opacity different than 1 will partially\n show the fill underneath. To avoid this effect, it is\n possible to apply a global opacity with the opacity attribute\n or to put the stroke behind the fill with the paint-order\n attribute.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "strokeWidth": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-width attribute is a presentation attribute defining\n the width of the stroke to be applied to the shape.You\n can use this attribute with the following SVG elements:Note:\n A percentage value is always computed as a percentage\n of the normalized viewBox diagonal length.BCD tables only\n load in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "systemLanguage": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The systemLanguage attribute represents a list of supported language\n tags. This list is matched against the language defined\n in the user preferences.You can use this attribute with\n the following SVG elements:The value is a set of comma-separated\n tokens, each of which must be a language tag, as defined\n in RFC 5646: Tags for Identifying Languages (also known\n as BCP 47).systemLanguage is often used in conjunction\n with the <switch> element. If the attribute is used in\n other situations, then it represents a simple switch on\n the given element whether to render the element or not.Note:\n If several alternative language objects are enclosed in\n a <switch> and none of them matches, this may lead to\n situations where no content is displayed. It is thus recommended\n to include a \"catch-all\" choice at the end of such a <switch>\n which is acceptable in all cases.The attribute evaluates\n to \"true\" if one of the language tags indicated by user\n preferences is a case-insensitive match or prefix (followed\n by a \"-\") of one of the language tags given in the value\n of this parameter. Otherwise it evaluates to \"false\".Note:\n The prefix matching rule does not imply that if a user\n understands a language with a certain tag, that the user\n will also understand all languages with the tag as prefix.If\n the attribute is not present, then it implicitly evaluates\n to \"true\". If a null string or empty string value is given,\n the attribute evaluates to \"false\".The prefix rule allows\n the use of prefix tags if this is the case.Multiple languages\n may be listed for content that is intended for multiple\n audiences. For example, content that is presented simultaneously\n in the original Maori and English versions, would call\n for:However, just because multiple languages are present\n within the object on which the systemLanguage test attribute\n is placed, this does not mean that it is intended for\n multiple linguistic audiences. An example would be a beginner's\n language primer, such as \"A First Lesson in Latin,\" which\n is clearly intended to be used by an English-literate\n audience. In this case, the attribute should only include\n en.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "vectorEffect": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The vector-effect property specifies the vector effect to use\n when drawing an object. Vector effects are applied before\n any of the other compositing operations, i.e. filters,\n masks and clips.Note: As a presentation attribute, vector-effect\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:This value specifies that\n no vector effect shall be applied, i.e. the default rendering\n behavior is used which is to first fill the geometry of\n a shape with a specified paint, then stroke the outline\n with a specified paint.This value modifies the way an\n object is stroked. Normally stroking involves calculating\n stroke outline of the shape's path in current user coordinate\n system and filling that outline with the stroke paint\n (color or gradient). The resulting visual effect of this\n value is that the stroke width is not dependent on the\n transformations of the element (including non-uniform\n scaling and shear transformations) and zoom level.This\n value specifies a special user coordinate system used\n by the element and its descendants. The scale of that\n user coordinate system does not change in spite of any\n transformation changes from a host coordinate space. However,\n it does not specify the suppression of rotation and skew.\n Also, it does not specify the origin of the user coordinate\n system. Since this value suppresses scaling of the user\n coordinate system, it also has the characteristics of\n non-scaling-stroke.This value specifies a special user\n coordinate system used by the element and its descendants.\n The rotation and skew of that user coordinate system is\n suppressed in spite of any transformation changes from\n a host coordinate space. However, it does not specify\n the suppression of scaling. Also, it does not specify\n the origin of user coordinate system.This value specifies\n a special user coordinate system used by the element and\n its descendants. The position of user coordinate system\n is fixed in spite of any transformation changes from a\n host coordinate space. However, it does not specify the\n suppression of rotation, skew and scaling. When this vector\n effect and the transform property are defined at the same\n time, that property is consumed for this effect.BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "visibility": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The visibility attribute lets you control the visibility of graphical\n elements. With a value of hidden or collapse the current\n graphics element is invisible.Note: If the visibility\n attribute is set to hidden on a text element, then the\n text is invisible but still takes up space in text layout\n calculations.Depending on the value of attribute pointer-events,\n graphics elements which have their visibility attribute\n set to hidden still might receive events.Note: As a presentation\n attribute, visibility can be used as a CSS property. See\n the css visibility property for more information.You can\n use this attribute with the following SVG elements:The\n following example toggles the CSS visibility of the SVG\n image path.This value indicates that the element will\n be painted.This value indicates that the element will\n not be painted. Though it is still part of the rendering\n tree, i.e. it may receive pointer events depending on\n the pointer-events attribute, may receive focus depending\n on the tabindex attribute, contributes to bounding box\n calculations and clipping paths, and does affect text\n layout.This value is equal to hidden.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/Polyline.react.js": {
    "description": "Polyline is a wrapper for the <polyline> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/polyline",
    "displayName": "Polyline",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "clipPath": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The clip-path presentation attribute defines or associates a\n clipping path with the element it is related to.Note:\n As a presentation attribute clip-path can be used as a\n CSS property.You can use this attribute with the following\n SVG elements:An extra information to tell how a <basic-shape>\n is applied to an element: fill-box indicates to use the\n object bounding box; stroke-box indicates to use the object\n bounding box extended with the stroke; view-box indicates\n to use the nearest SVG viewport as the reference box.Note:\n For more details on the clip-path syntax, see the CSS\n property clip-path reference page.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "colorInterpolation": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation attribute specifies the color space for\n gradient interpolations, color animations, and alpha compositing.Note:\n For filter effects, the color-interpolation-filters property\n controls which color space is used.The color-interpolation\n property chooses between color operations occurring in\n the sRGB color space or in a (light energy linear) linearized\n RGB color space. Having chosen the appropriate color space,\n component-wise linear interpolation is used.When a child\n element is blended into a background, the value of the\n color-interpolation property on the child determines the\n type of blending, not the value of the color-interpolation\n on the parent. For gradients which make use of the href\n or the deprecated xlink:href attribute to reference another\n gradient, the gradient uses the property's value from\n the gradient element which is directly referenced by the\n fill or stroke property. When animating colors, color\n interpolation is performed according to the value of the\n color-interpolation property on the element being animated.Note:\n As a presentation attribute, color-interpolation can be\n used as a CSS property.You can use this attribute with\n the following SVG elements:Indicates that the user agent\n can choose either the sRGB or linearRGB spaces for color\n interpolation. This option indicates that the author doesn't\n require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "fillOpacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The fill-opacity attribute is a presentation attribute defining\n the opacity of the paint server (color, gradient, pattern,\n etc) applied to a shape.Note: As a presentation attribute\n fill-opacity can be used as a CSS property.You can use\n this attribute with the following SVG elements:Note: SVG2\n introduces percentage values for fill-opacity, however,\n it is not widely supported yet (See Browser compatibility\n below) as a consequence, it is best practices to set opacity\n with a value in the range [0-1].BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "fillRule": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"evenodd\"",
              "computed": false
            },
            {
              "value": "\"inherit\"",
              "computed": false
            },
            {
              "value": "\"nonzero\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The fill-rule attribute is a presentation attribute defining\n the algorithm to use to determine the inside part of a\n shape.Note: As a presentation attribute, fill-rule can\n be used as a CSS property.You can use this attribute with\n the following SVG elements:The fill-rule attribute provides\n two options for how the inside (that is, the area to be\n filled) of a shape is determined:The value nonzero determines\n the \"insideness\" of a point in the shape by drawing a\n ray from that point to infinity in any direction, and\n then examining the places where a segment of the shape\n crosses the ray. Starting with a count of zero, add one\n each time a path segment crosses the ray from left to\n right and subtract one each time a path segment crosses\n the ray from right to left. After counting the crossings,\n if the result is zero then the point is outside the path.\n Otherwise, it is inside.The value evenodd determines the\n \"insideness\" of a point in the shape by drawing a ray\n from that point to infinity in any direction and counting\n the number of path segments from the given shape that\n the ray crosses. If this number is odd, the point is inside;\n if even, the point is outside.BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "markerEnd": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The marker-end attribute defines the arrowhead or polymarker\n that will be drawn at the final vertex of the given shape.For\n all shape elements, except <polyline> and <path>, the\n last vertex is the same as the first vertex. In this case,\n if the value of marker-start and marker-end are both not\n none, then two markers will be rendered on that final\n vertex. For <path> elements, for each closed subpath,\n the last vertex is the same as the first vertex. marker-end\n is only rendered on the final vertex of the path data.Note:\n As a presentation attribute, marker-end can be used as\n a CSS property.You can use this attribute with the following\n SVG elements:Indicates that no marker symbol shall be\n drawn at the final vertex.This value is a reference to\n a <marker> element, which will be drawn at the final vertex.\n If the reference is not valid, then no marker will be\n drawn.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 17, 2022, by MDN contributors"
      },
      "markerMid": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The marker-mid attribute defines the arrowhead or polymarker\n that will be drawn at all interior vertices of the given\n shape.The marker is rendered on every vertex other than\n the first and last vertices of the path data.Note: As\n a presentation attribute, marker-mid can be used as a\n CSS property.You can use this attribute with the following\n SVG elements:Indicates that no marker symbol shall be\n drawn at the given vertices.This value is a reference\n to a <marker> element, which will be drawn at the given\n vertices. If the reference is not valid, then no marker\n will be drawn.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 17, 2022, by MDN contributors"
      },
      "markerStart": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The marker-start attribute defines the arrowhead or polymarker\n that will be drawn at the first vertex of the given shape.For\n all shape elements, except <polyline> and <path>, the\n last vertex is the same as the first vertex. In this case,\n if the value of marker-start and marker-end are both not\n none, then two markers will be rendered on that final\n vertex. For <path> elements, for each closed subpath,\n the last vertex is the same as the first vertex. marker-start\n is only rendered on the first vertex of the path data.Note:\n As a presentation attribute, marker-start can be used\n as a CSS property.You can use this attribute with the\n following SVG elements:Indicates that no marker symbol\n shall be drawn at the first vertex.This value is a reference\n to a <marker> element, which will be drawn at the first\n vertex. If the reference is not valid, then no marker\n will be drawn.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 17, 2022, by MDN contributors"
      },
      "mask": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The mask attribute is a presentation attribute mainly used to\n bind a given <mask> element with the element the attribute\n belongs to.Note: As a presentation attribute mask can\n be used as a CSS property.You can use this attribute with\n the following SVG elements:Since SVG2, the mask attribute\n is defined as a css property and is a shorthand for many\n other properties: mask-image, mask-mode, mask-repeat,\n mask-position, mask-clip, mask-origin, mask-size, and\n mask-composite.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "opacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The opacity attribute specifies the transparency of an object\n or of a group of objects, that is, the degree to which\n the background behind the element is overlaid.Note: As\n a presentation attribute, opacity can be used as a CSS\n property. See the css opacity property for more information.You\n can use this attribute with the following SVG elements:The\n uniform opacity setting to be applied across an entire\n object, as a <number>. Any values outside the range 0.0\n (fully transparent) to 1.0 (fully opaque) will be clamped\n to this range.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "paintOrder": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The paint-order attribute specifies the order that the fill,\n stroke, and markers of a given shape or text element are\n painted.Note: As a presentation attribute, paint-order\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:This value indicates that\n the fill will be painted first, then the stroke, and finally\n the markers.The order of these three keywords indicates\n the order in which the painting happens, from left to\n right. If any of the three painting components is omitted,\n they will be painted in their default order after the\n specified components. For example, using stroke is equivalent\n to stroke fill markers.The example would be rendered as\n follows:\n  \nThe stroke under effect could be achieved\n via the following CSS property:BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "pathLength": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The pathLength attribute lets authors specify a total length\n for the path, in user units. This value is then used to\n calibrate the browser's distance calculations with those\n of the author, by scaling all distance computations using\n the ratio pathLength/(computed value of path length).This\n can affect the actual rendered lengths of paths; including\n text paths, animation paths, and various stroke operations.\n Basically, all computations that require the length of\n the path. stroke-dasharray, for example, will assume the\n start of the path being 0 and the end point the value\n defined in the pathLength attribute.You can use this attribute\n with the following SVG elements:For <circle>, pathLength\n lets authors specify a total length for the circle, in\n user units.For <ellipse>, pathLength lets authors specify\n a total length for the ellipse, in user units.For <line>,\n pathLength lets authors specify a total length for the\n line, in user units.For <path>, pathLength lets authors\n specify a total length for the path, in user units.For\n <polygon>, pathLength lets authors specify a total length\n for the shape, in user units.For <polyline>, pathLength\n lets authors specify a total length for the shape, in\n user units.For <rect>, pathLength lets authors specify\n a total length for the rectangle, in user units.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "pointerEvents": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The pointer-events attribute is a presentation attribute that\n allows defining whether or when an element may be the\n target of a mouse event.Note: As a presentation attribute\n pointer-events can be used as a CSS property.You can use\n this attribute with the following SVG elements:For a detailed\n explanation of each possible value, have a look at the\n CSS pointer-events documentation.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "points": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The points attribute defines a list of points. Each point is\n defined by a pair of number representing a X and a Y coordinate\n in the user coordinate system. If the attribute contains\n an odd number of coordinates, the last one will be ignored.You\n can use this attribute with the following SVG elements:For\n <polyline>, points defines a list of points, each representing\n a vertex of the line to be drawn. Each point is define\n by a X and Y coordinate in the user coordinate system.Note:\n A polyline is an open shape, meaning the last point is\n not connected to the first point.For <polygon>, points\n defines a list of points, each representing a vertex of\n the shape to be drawn. Each point is define by a X and\n Y coordinate in the user coordinate system.Note: A polygon\n is a closed shape, meaning the last point is connected\n to the first point.Last modified: May 13, 2022, by MDN\n contributors"
      },
      "requiredFeatures": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The requiredFeatures attribute\n takes a list of feature strings, with the individual strings\n separated by white space. It determines whether or not\n all of the named features are supported by the browser;\n if all of them are supported, the attribute evaluates\n to true end the element is rendered; otherwise, the attribute\n evaluates to false and the current element and its children\n are skipped and thus will not be rendered. This provides\n a way to design SVG that gracefully falls back when features\n aren't available.If the attribute is not present, then\n its implicit evaluated value is true. If a null string\n or empty string value is given to attribute requiredFeatures,\n the attribute is evaluate to false.requiredFeatures is\n often used in conjunction with the <switch> element. If\n requiredFeatures is used in other situations, it represents\n a simple switch on the given element whether to render\n the element or not.To detect availability of an SVG feature\n from script, there is the (also deprecated) DOMImplementation.hasFeature()\n method.You can use this attribute with the following SVG\n elements:This is a list of feature strings, separated\n using white space. Determines whether all of the named\n features are supported by the browser. See Feature strings\n below for a list of allowed values.The following are the\n feature strings for the requiredFeatures attribute. These\n same feature strings apply to the hasFeature method call\n that is part of the SVG DOM's support for the DOMImplementation\n interface. In some cases the feature strings map directly\n to a set of attributes, properties or elements, in others\n they represent some functionality of the browser. Note\n that the format and naming for feature strings changed\n from SVG 1.0 to SVG 1.1. The SVG 1.0 feature strings are\n not listed here but can be found in the SVG Specification.\n Some browser support SVG 1.0 Feature strings for compatibility\n reasons. However, the SVG 1.0 feature strings are considered\n deprecated.At least one of the following feature is supported:At\n least one of the following feature is supported:The browser\n supports all the following features:The browser supports\n all of the DOM interfaces and methods that correspond\n to the language features for http://www.w3.org/TR/SVG11/feature#SVG-static.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-static\n plus the feature http://www.w3.org/TR/SVG11/feature#Animation.The\n browser supports all of the DOM interfaces and methods\n that correspond to the language features for http://www.w3.org/TR/SVG11/feature#SVG-animation.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-animation\n plus the following features:The browser supports all of\n the DOM interfaces and methods that correspond to the\n language features for http://www.w3.org/TR/SVG11/feature#SVG-dynamic.The\n browser supports the id, xml:base, xml:lang and xml:space\n attributesThe browser supports <svg>, <g>, <defs>, <desc>,\n <title>, <metadata>, <symbol> and <use> elements.The browser\n supports <svg>, <g>, <defs>, <desc>, <title>, <metadata>\n and <use> elements.The browser supports the enable-background\n attributeThe browser supports the <switch> element, and\n the requiredFeatures, requiredExtensions, systemLanguage\n attributesThe browser supports the <image> element.The\n browser supports the <style> element.The browser supports\n the clip and overflow attributes.The browser supports\n the <rect>, <circle>, <line>, <polyline>, <polygon>, <ellipse>\n and <path> elements.The browser supports the <text>, <tspan>,\n <tref>, <textPath>, <altGlyph>, <altGlyphDef>, <altGlyphItem>\n and <glyphRef> elements.The browser supports the <text>\n elementThe browser supports the color, fill, fill-rule,\n stroke, stroke-dasharray, stroke-dashoffset, stroke-linecap,\n stroke-linejoin, stroke-miterlimit, stroke-width, color-interpolation\n and color-rendering attributesThe browser supports the\n color, fill, fill-rule, stroke, stroke-dasharray, stroke-dashoffset,\n stroke-linecap, stroke-linejoin, stroke-miterlimit, stroke-width\n and color-rendering attributesThe browser supports the\n opacity, stroke-opacity and fill-opacity attributesThe\n browser supports the display, image-rendering, pointer-events,\n shape-rendering, text-rendering and visibility attributesThe\n browser supports the display and visibility attributesThe\n browser supports the <marker> elementThe browser supports\n the <linearGradient>, <radialGradient> and <stop> elementsThe\n browser supports the <pattern> elementThe browser supports\n the <clipPath> element and the clip-path, clip-rule attributesThe\n browser supports the <clipPath> element and the clip-path\n attributeThe browser supports the <mask> elementThe browser\n supports the <filter>, <feBlend>, <feColorMatrix>, <feComponentTransfer>,\n <feComposite>, <feConvolveMatrix>, <feDiffuseLighting>,\n <feDisplacementMap>, <feFlood>, <feGaussianBlur>, <feImage>,\n <feMerge>, <feMergeNode>, <feMorphology>, <feOffset>,\n <feSpecularLighting>, <feTile>, <feDistantLight>, <fePointLight>,\n <feSpotLight>, <feFuncR>, <feFuncG>, <feFuncB> and <feFuncA>\n elementsThe browser supports the <filter>, <feBlend>,\n <feColorMatrix>, <feComponentTransfer>, <feComposite>,\n <feFlood>, <feGaussianBlur>, <feImage>, <feMerge>, <feMergeNode>,\n <feOffset>, <feTile>, <feFuncR>, <feFuncG>, <feFuncB>\n and <feFuncA> elementsThe browser supports the onunload,\n onabort, onerror, onresize, onscroll and onzoom attributesThe\n browser supports the onfocusin, onfocusout, onactivate,\n onclick, onmousedown, onmouseup, onmouseover, onmousemove,\n onmouseout and onload attributesThe browser supports the\n onbegin, onend, onrepeat and onload attributesThe browser\n supports the <cursor> elementThe browser supports the\n <a> elementThe browser supports the xlink:type, xlink:href,\n xlink:role, xlink:arcrole, xlink:title, xlink:show and\n xlink:actuate attributesThe browser supports the <view>\n elementThe browser supports the <script> elementThe browser\n supports the <animate>, <set>, <animateMotion>, <animateTransform>,\n <animateColor> and <mpath> elementsThe browser supports\n the <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <vkern>, <font-face-src>, <font-face-uri>, <font-face-format>\n and <font-face-name> elementsThe browser supports the\n <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <font-face-src> and <font-face-name> elementsThe browser\n supports the <foreignObject> elementSee also requiredFeatures.svgBCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "shapeRendering": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The shape-rendering attribute provides hints to the renderer\n about what tradeoffs to make when rendering shapes like\n paths, circles, or rectangles.Note: As a presentation\n attribute, shape-rendering can be used as a CSS property.You\n can use this attribute with the following SVG elements:This\n value indicates that the user agent shall make appropriate\n tradeoffs to balance speed, crisp edges and geometric\n precision, but with geometric precision given more importance\n than speed and crisp edges.This value indicates that the\n user agent shall emphasize rendering speed over geometric\n precision and crisp edges. This option will sometimes\n cause the user agent to turn off shape anti-aliasing.This\n value indicates that the user agent shall attempt to emphasize\n the contrast between clean edges of artwork over rendering\n speed and geometric precision. To achieve crisp edges,\n the user agent might turn off anti-aliasing for all lines\n and curves or possibly just for straight lines which are\n close to vertical or horizontal. Also, the user agent\n might adjust line positions and line widths to align edges\n with device pixels.Indicates that the user agent shall\n emphasize geometric precision over speed and crisp edges.BCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "stroke": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "stroke color"
      },
      "strokeDasharray": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-dasharray attribute is a presentation attribute defining\n the pattern of dashes and gaps used to paint the outline\n of the shape;Note: As a presentation attribute, stroke-dasharray\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:A list of comma and/or\n white space separated <length>s and <percentage>s that\n specify the lengths of alternating dashes and gaps.If\n an odd number of values is provided, then the list of\n values is repeated to yield an even number of values.\n Thus, 5,3,2 is equivalent to 5,3,2,5,3,2.BCD tables only\n load in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "strokeDashoffset": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-dashoffset attribute is a presentation attribute defining\n an offset on the rendering of the associated dash array.Note:\n As a presentation attribute stroke-dashoffset can be used\n as a CSS property.You can use this attribute with the\n following SVG elements:The offset is usually expressed\n in user units resolved against the pathLength but if a\n <percentage> is used, the value is resolved as a percentage\n of the current viewport.BCD tables only load in the browser\n with JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "strokeLinecap": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"butt\"",
              "computed": false
            },
            {
              "value": "\"inherit\"",
              "computed": false
            },
            {
              "value": "\"round\"",
              "computed": false
            },
            {
              "value": "\"square\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The stroke-linecap attribute is a presentation attribute defining\n the shape to be used at the end of open subpaths when\n they are stroked.Note: As a presentation attribute stroke-linecap\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:The butt value indicates\n that the stroke for each subpath does not extend beyond\n its two endpoints. On a zero length subpath, the path\n will not be rendered at all.The round value indicates\n that at the end of each subpath the stroke will be extended\n by a half circle with a diameter equal to the stroke width.\n On a zero length subpath, the stroke consists of a full\n circle centered at the subpath's point.The square value\n indicates that at the end of each subpath the stroke will\n be extended by a rectangle with a width equal to half\n the width of the stroke and a height equal to the width\n of the stroke. On a zero length subpath, the stroke consists\n of a square with its width equal to the stroke width,\n centered at the subpath's point.BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "strokeLinejoin": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"bevel\"",
              "computed": false
            },
            {
              "value": "\"inherit\"",
              "computed": false
            },
            {
              "value": "\"miter\"",
              "computed": false
            },
            {
              "value": "\"round\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The stroke-linejoin attribute is a presentation attribute defining\n the shape to be used at the corners of paths when they\n are stroked.Note: As a presentation attribute stroke-linejoin\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:Note: The arcs value as\n been introduced in SVG2 and it isn't widely supported\n yet, see Browser compatibility below for details.The arcs\n value indicates that an arcs corner is to be used to join\n path segments. The arcs shape is formed by extending the\n outer edges of the stroke at the join point with arcs\n that have the same curvature as the outer edges at the\n join point.The bevel value indicates that a bevelled corner\n is to be used to join path segments.The miter value indicates\n that a sharp corner is to be used to join path segments.\n The corner is formed by extending the outer edges of the\n stroke at the tangents of the path segments until they\n intersect.Note: If the stroke-miterlimit is exceeded,\n the line join falls back to bevel.Note: the miter-clip\n value as been introduced in SVG2 and it isn't widely supported\n yet, see Browser compatibility below for details.The miter-clip\n value indicates that a sharp corner is to be used to join\n path segments. The corner is formed by extending the outer\n edges of the stroke at the tangents of the path segments\n until they intersect.If the stroke-miterlimit is exceeded,\n the miter is clipped at a distance equal to half the stroke-miterlimit\n value multiplied by the stroke width from the intersection\n of the path segments. This provides a better rendering\n than miter on very sharp join or in case of an animation.The\n round value indicates that a round corner is to be used\n to join path segments.BCD tables only load in the browser\n with JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "strokeMiterlimit": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-miterlimit attribute is a presentation attribute defining\n a limit on the ratio of the miter length to the stroke-width\n used to draw a miter join. When the limit is exceeded,\n the join is converted from a miter to a bevel.Note: As\n a presentation attribute stroke-miterlimit can be used\n as a CSS property.You can use this attribute with the\n following SVG elements:When two line segments meet at\n a sharp angle and miter joins have been specified for\n stroke-linejoin, it is possible for the miter to extend\n far beyond the thickness of the line stroking the path.\n The stroke-miterlimit ratio is used to define when the\n limit is exceeded, if so the join is converted from a\n miter to a bevel.The ratio of miter length (distance between\n the outer tip and the inner corner of the miter) to stroke-width\n is directly related to the angle (theta) between the segments\n in user space by the formula:\n  \n    \n      stroke-miterlimit\n\n      =\n      \n        \n          miterLength\n        \n\n        \n          stroke-width\n        \n      \n      =\n\n      \n        \n          1\n        \n        \n        \n  \n            sin\n            \n              (\n      \n        \n                \n                  \u03b8\n        \n        \n                \n                  2\n        \n        \n              \n              )\n            \n \n         \n        \n      \n    \n  \nFor example, a miter\n limit of 1.414 converts miters to bevels for theta less\n than 90 degrees, a limit of 4.0 converts them for theta\n less than approximately 29 degrees, and a limit of 10.0\n converts them for theta less than approximately 11.5 degrees.The\n value of stroke-miterlimit must be greater than or equal\n to 1.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "strokeOpacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-opacity attribute is a presentation attribute defining\n the opacity of the paint server (color, gradient, pattern,\n etc) applied to the stroke of a shape.Note: As a presentation\n attribute stroke-opacity can be used as a CSS property.You\n can use this attribute with the following SVG elements:Note:\n SVG2 introduces percentage values for stroke-opacity,\n however, it is not widely supported yet (See Browser compatibility\n below) as a consequence, it is best practices to set opacity\n with a value in the range [0-1].It's important to know\n that the stroke partially covers the fill of a shape,\n so a stroke with an opacity different than 1 will partially\n show the fill underneath. To avoid this effect, it is\n possible to apply a global opacity with the opacity attribute\n or to put the stroke behind the fill with the paint-order\n attribute.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "strokeWidth": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-width attribute is a presentation attribute defining\n the width of the stroke to be applied to the shape.You\n can use this attribute with the following SVG elements:Note:\n A percentage value is always computed as a percentage\n of the normalized viewBox diagonal length.BCD tables only\n load in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "systemLanguage": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The systemLanguage attribute represents a list of supported language\n tags. This list is matched against the language defined\n in the user preferences.You can use this attribute with\n the following SVG elements:The value is a set of comma-separated\n tokens, each of which must be a language tag, as defined\n in RFC 5646: Tags for Identifying Languages (also known\n as BCP 47).systemLanguage is often used in conjunction\n with the <switch> element. If the attribute is used in\n other situations, then it represents a simple switch on\n the given element whether to render the element or not.Note:\n If several alternative language objects are enclosed in\n a <switch> and none of them matches, this may lead to\n situations where no content is displayed. It is thus recommended\n to include a \"catch-all\" choice at the end of such a <switch>\n which is acceptable in all cases.The attribute evaluates\n to \"true\" if one of the language tags indicated by user\n preferences is a case-insensitive match or prefix (followed\n by a \"-\") of one of the language tags given in the value\n of this parameter. Otherwise it evaluates to \"false\".Note:\n The prefix matching rule does not imply that if a user\n understands a language with a certain tag, that the user\n will also understand all languages with the tag as prefix.If\n the attribute is not present, then it implicitly evaluates\n to \"true\". If a null string or empty string value is given,\n the attribute evaluates to \"false\".The prefix rule allows\n the use of prefix tags if this is the case.Multiple languages\n may be listed for content that is intended for multiple\n audiences. For example, content that is presented simultaneously\n in the original Maori and English versions, would call\n for:However, just because multiple languages are present\n within the object on which the systemLanguage test attribute\n is placed, this does not mean that it is intended for\n multiple linguistic audiences. An example would be a beginner's\n language primer, such as \"A First Lesson in Latin,\" which\n is clearly intended to be used by an English-literate\n audience. In this case, the attribute should only include\n en.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "vectorEffect": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The vector-effect property specifies the vector effect to use\n when drawing an object. Vector effects are applied before\n any of the other compositing operations, i.e. filters,\n masks and clips.Note: As a presentation attribute, vector-effect\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:This value specifies that\n no vector effect shall be applied, i.e. the default rendering\n behavior is used which is to first fill the geometry of\n a shape with a specified paint, then stroke the outline\n with a specified paint.This value modifies the way an\n object is stroked. Normally stroking involves calculating\n stroke outline of the shape's path in current user coordinate\n system and filling that outline with the stroke paint\n (color or gradient). The resulting visual effect of this\n value is that the stroke width is not dependent on the\n transformations of the element (including non-uniform\n scaling and shear transformations) and zoom level.This\n value specifies a special user coordinate system used\n by the element and its descendants. The scale of that\n user coordinate system does not change in spite of any\n transformation changes from a host coordinate space. However,\n it does not specify the suppression of rotation and skew.\n Also, it does not specify the origin of the user coordinate\n system. Since this value suppresses scaling of the user\n coordinate system, it also has the characteristics of\n non-scaling-stroke.This value specifies a special user\n coordinate system used by the element and its descendants.\n The rotation and skew of that user coordinate system is\n suppressed in spite of any transformation changes from\n a host coordinate space. However, it does not specify\n the suppression of scaling. Also, it does not specify\n the origin of user coordinate system.This value specifies\n a special user coordinate system used by the element and\n its descendants. The position of user coordinate system\n is fixed in spite of any transformation changes from a\n host coordinate space. However, it does not specify the\n suppression of rotation, skew and scaling. When this vector\n effect and the transform property are defined at the same\n time, that property is consumed for this effect.BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "visibility": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The visibility attribute lets you control the visibility of graphical\n elements. With a value of hidden or collapse the current\n graphics element is invisible.Note: If the visibility\n attribute is set to hidden on a text element, then the\n text is invisible but still takes up space in text layout\n calculations.Depending on the value of attribute pointer-events,\n graphics elements which have their visibility attribute\n set to hidden still might receive events.Note: As a presentation\n attribute, visibility can be used as a CSS property. See\n the css visibility property for more information.You can\n use this attribute with the following SVG elements:The\n following example toggles the CSS visibility of the SVG\n image path.This value indicates that the element will\n be painted.This value indicates that the element will\n not be painted. Though it is still part of the rendering\n tree, i.e. it may receive pointer events depending on\n the pointer-events attribute, may receive focus depending\n on the tabindex attribute, contributes to bounding box\n calculations and clipping paths, and does affect text\n layout.This value is equal to hidden.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/RadialGradient.react.js": {
    "description": "RadialGradient is a wrapper for the <radialGradient> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/radialGradient",
    "displayName": "RadialGradient",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "colorInterpolation": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation attribute specifies the color space for\n gradient interpolations, color animations, and alpha compositing.Note:\n For filter effects, the color-interpolation-filters property\n controls which color space is used.The color-interpolation\n property chooses between color operations occurring in\n the sRGB color space or in a (light energy linear) linearized\n RGB color space. Having chosen the appropriate color space,\n component-wise linear interpolation is used.When a child\n element is blended into a background, the value of the\n color-interpolation property on the child determines the\n type of blending, not the value of the color-interpolation\n on the parent. For gradients which make use of the href\n or the deprecated xlink:href attribute to reference another\n gradient, the gradient uses the property's value from\n the gradient element which is directly referenced by the\n fill or stroke property. When animating colors, color\n interpolation is performed according to the value of the\n color-interpolation property on the element being animated.Note:\n As a presentation attribute, color-interpolation can be\n used as a CSS property.You can use this attribute with\n the following SVG elements:Indicates that the user agent\n can choose either the sRGB or linearRGB spaces for color\n interpolation. This option indicates that the author doesn't\n require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "cx": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The cx attribute define the x-axis coordinate of a center point.You\n can use this attribute with the following SVG elements:For\n <circle>, cx defines the x-axis coordinate of the center\n of the shape.Note: Starting with SVG2 cx, is a Geometry\n Property, meaning this attribute can also be used as CSS\n property for circles.For <ellipse>, cx defines the x-axis\n coordinate of the center of the shape.Note: Starting with\n SVG2 cx, is a Geometry Property, meaning this attribute\n can also be used as CSS property for ellipses.For <radialGradient>,\n cx defines the x-axis coordinate of the end circle for\n the radial gradient.Last modified: May 13, 2022, by MDN\n contributors"
      },
      "cy": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The cy attribute define the y-axis coordinate of a center point.You\n can use this attribute with the following SVG elements:For\n <circle>, cy defines the y-axis coordinate of the center\n of the shape.Note: Starting with SVG2, cy is a Geometry\n Property meaning this attribute can also be used as a\n CSS property for circles.For <ellipse>, cy defines the\n y-axis coordinate of the center of the shape.Note: Starting\n with SVG2, cy is a Geometry Property meaning this attribute\n can also be used as a CSS property for ellipses.For <radialGradient>,\n cy defines the y-axis coordinate of the end circle for\n the radial gradient.Last modified: May 13, 2022, by MDN\n contributors"
      },
      "fx": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The fx attribute defines the x-axis coordinate of the focal point\n for a radial gradient.You can use this attribute with\n the following SVG elements:BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "fy": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The fy attribute defines the y-axis coordinate of the focal point\n for a radial gradient.You can use this attribute with\n the following SVG elements:BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "gradientTransform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The gradientTransform attribute contains the definition of an\n optional additional transformation from the gradient coordinate\n system onto the target coordinate system (i.e., userSpaceOnUse\n or objectBoundingBox). This allows for things such as\n skewing the gradient. This additional transformation matrix\n is post-multiplied to (i.e., inserted to the right of)\n any previously defined transformations, including the\n implicit transformation necessary to convert from object\n bounding box units to user space.You can use this attribute\n with the following SVG elements:A list of transformation\n functions specifying some additional transformation from\n the gradient coordinate system onto the target coordinate\n system.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "gradientUnits": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The gradientUnits attribute defines the coordinate system used\n for attributes specified on the gradient elements.You\n can use this attribute with the following SVG elements:For\n <linearGradient>, gradientUnits defines the coordinate\n system used for the attributes x1, y1, x2, and y2.\n  \n    This value indicates that the attributes represent\n values in the coordinate system that results from taking\n the current user coordinate system in place at the time\n when the gradient element is referenced (i.e., the user\n coordinate system for the element referencing the gradient\n element via a fill or stroke property) and then applying\n the transform specified by attribute gradientTransform.\n\n      Percentages represent values relative to the current\n SVG viewport.\n    This value indicates that the user coordinate\n system for the attributes is established using the bounding\n box of the element to which the gradient is applied and\n then applying the transform specified by attribute gradientTransform.Percentages\n represent values relative to the bounding box for the\n object.With this value and gradientTransform being the\n identity matrix, the normal of the linear gradient is\n perpendicular to the gradient vector in object bounding\n box space (i.e., the abstract coordinate system where\n (0,0) is at the top/left of the object bounding box and\n (1,1) is at the bottom/right of the object bounding box).\n When the object's bounding box is not square, the gradient\n normal which is initially perpendicular to the gradient\n vector within object bounding box space may render non-perpendicular\n relative to the gradient vector in user space. If the\n gradient vector is parallel to one of the axes of the\n bounding box, the gradient normal will remain perpendicular.\n This transformation is due to application of the non-uniform\n scaling transformation from bounding box space to user\n space.For <radialGradient>, gradientUnits defines the\n coordinate system used for the attributes cx, cy, r, fx,\n fy, and fr.cx, cy, r, fx, fy, and fr represent values\n in the coordinate system that results from taking the\n current user coordinate system in place at the time when\n the gradient element is referenced (i.e., the user coordinate\n system for the element referencing the gradient element\n via a fill or stroke property) and then applying the transform\n specified by attribute gradientTransform.\n      for <radialGradient>:\n the user coordinate system for attributes cx, cy, r, fx,\n fy, and fr is established using the bounding box of the\n element to which the gradient is applied (see Object bounding\n box units) and then applying the transform specified by\n attribute gradientTransform.\n      With this value and\n gradientTransform being the identity matrix, the rings\n of the radial gradient are circular with respect to the\n object bounding box space (i.e., the abstract coordinate\n system where (0,0) is at the top/left of the object bounding\n box and (1,1) is at the bottom/right of the object bounding\n box). When the object's bounding box is not square, the\n rings that are conceptually circular within object bounding\n box space will render as elliptical due to application\n of the non-uniform scaling transformation from bounding\n box space to user space.\n    Last modified: May 13, 2022,\n by MDN contributors"
      },
      "r": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The r attribute defines the radius of a circle.You can use this\n attribute with the following SVG elements:For <circle>,\n r defines the radius of the circle and therefor its size.\n With a value lower or equal to zero the circle won't be\n drawn at all.Note: Starting with SVG2, r is a Geometry\n Property meaning this attribute can also be used as a\n CSS property for circles.For <radialGradient>, r defines\n the radius of the end circle for the radial gradient.The\n gradient will be drawn such that the 100% gradient stop\n is mapped to the perimeter of this end circle. A value\n of lower or equal to zero will cause the area to be painted\n as a single color using the color and opacity of the last\n gradient <stop>.Last modified: May 13, 2022, by MDN contributors"
      },
      "spreadMethod": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The spreadMethod attribute determines how a shape is filled beyond\n the defined edges of a gradient.You can use this attribute\n with the following SVG elements:This value indicates that\n the final color of the gradient fills the shape beyond\n the gradient's edges.This value indicates that the gradient\n repeats in reverse beyond its edges.This value specifies\n that the gradient repeats in the original order beyond\n its edges.By default, a gradient reaches to the edges\n of the shape being filled. To see the effects of this\n attribute, you will need to set the size of the gradient\n smaller than the shape.In the case of a linear gradient,\n the edges may be defined as a rectangle by the x1, x2,\n y1 and y2 attributes. In the case of a radial gradient,\n the edges may be defined as outer and inner circles by\n the cx, cy and r (outer) and fx, fy and fr (inner) attributes.Notice\n that the middle third of each gradient is the same. The\n outer thirds show the difference between the three spread\n methods.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/Rect.react.js": {
    "description": "Rect is a wrapper for the <rect> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/rect",
    "displayName": "Rect",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "clipPath": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The clip-path presentation attribute defines or associates a\n clipping path with the element it is related to.Note:\n As a presentation attribute clip-path can be used as a\n CSS property.You can use this attribute with the following\n SVG elements:An extra information to tell how a <basic-shape>\n is applied to an element: fill-box indicates to use the\n object bounding box; stroke-box indicates to use the object\n bounding box extended with the stroke; view-box indicates\n to use the nearest SVG viewport as the reference box.Note:\n For more details on the clip-path syntax, see the CSS\n property clip-path reference page.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "colorInterpolation": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation attribute specifies the color space for\n gradient interpolations, color animations, and alpha compositing.Note:\n For filter effects, the color-interpolation-filters property\n controls which color space is used.The color-interpolation\n property chooses between color operations occurring in\n the sRGB color space or in a (light energy linear) linearized\n RGB color space. Having chosen the appropriate color space,\n component-wise linear interpolation is used.When a child\n element is blended into a background, the value of the\n color-interpolation property on the child determines the\n type of blending, not the value of the color-interpolation\n on the parent. For gradients which make use of the href\n or the deprecated xlink:href attribute to reference another\n gradient, the gradient uses the property's value from\n the gradient element which is directly referenced by the\n fill or stroke property. When animating colors, color\n interpolation is performed according to the value of the\n color-interpolation property on the element being animated.Note:\n As a presentation attribute, color-interpolation can be\n used as a CSS property.You can use this attribute with\n the following SVG elements:Indicates that the user agent\n can choose either the sRGB or linearRGB spaces for color\n interpolation. This option indicates that the author doesn't\n require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "fillOpacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The fill-opacity attribute is a presentation attribute defining\n the opacity of the paint server (color, gradient, pattern,\n etc) applied to a shape.Note: As a presentation attribute\n fill-opacity can be used as a CSS property.You can use\n this attribute with the following SVG elements:Note: SVG2\n introduces percentage values for fill-opacity, however,\n it is not widely supported yet (See Browser compatibility\n below) as a consequence, it is best practices to set opacity\n with a value in the range [0-1].BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "markerEnd": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The marker-end attribute defines the arrowhead or polymarker\n that will be drawn at the final vertex of the given shape.For\n all shape elements, except <polyline> and <path>, the\n last vertex is the same as the first vertex. In this case,\n if the value of marker-start and marker-end are both not\n none, then two markers will be rendered on that final\n vertex. For <path> elements, for each closed subpath,\n the last vertex is the same as the first vertex. marker-end\n is only rendered on the final vertex of the path data.Note:\n As a presentation attribute, marker-end can be used as\n a CSS property.You can use this attribute with the following\n SVG elements:Indicates that no marker symbol shall be\n drawn at the final vertex.This value is a reference to\n a <marker> element, which will be drawn at the final vertex.\n If the reference is not valid, then no marker will be\n drawn.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 17, 2022, by MDN contributors"
      },
      "markerMid": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The marker-mid attribute defines the arrowhead or polymarker\n that will be drawn at all interior vertices of the given\n shape.The marker is rendered on every vertex other than\n the first and last vertices of the path data.Note: As\n a presentation attribute, marker-mid can be used as a\n CSS property.You can use this attribute with the following\n SVG elements:Indicates that no marker symbol shall be\n drawn at the given vertices.This value is a reference\n to a <marker> element, which will be drawn at the given\n vertices. If the reference is not valid, then no marker\n will be drawn.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 17, 2022, by MDN contributors"
      },
      "markerStart": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The marker-start attribute defines the arrowhead or polymarker\n that will be drawn at the first vertex of the given shape.For\n all shape elements, except <polyline> and <path>, the\n last vertex is the same as the first vertex. In this case,\n if the value of marker-start and marker-end are both not\n none, then two markers will be rendered on that final\n vertex. For <path> elements, for each closed subpath,\n the last vertex is the same as the first vertex. marker-start\n is only rendered on the first vertex of the path data.Note:\n As a presentation attribute, marker-start can be used\n as a CSS property.You can use this attribute with the\n following SVG elements:Indicates that no marker symbol\n shall be drawn at the first vertex.This value is a reference\n to a <marker> element, which will be drawn at the first\n vertex. If the reference is not valid, then no marker\n will be drawn.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 17, 2022, by MDN contributors"
      },
      "mask": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The mask attribute is a presentation attribute mainly used to\n bind a given <mask> element with the element the attribute\n belongs to.Note: As a presentation attribute mask can\n be used as a CSS property.You can use this attribute with\n the following SVG elements:Since SVG2, the mask attribute\n is defined as a css property and is a shorthand for many\n other properties: mask-image, mask-mode, mask-repeat,\n mask-position, mask-clip, mask-origin, mask-size, and\n mask-composite.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "opacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The opacity attribute specifies the transparency of an object\n or of a group of objects, that is, the degree to which\n the background behind the element is overlaid.Note: As\n a presentation attribute, opacity can be used as a CSS\n property. See the css opacity property for more information.You\n can use this attribute with the following SVG elements:The\n uniform opacity setting to be applied across an entire\n object, as a <number>. Any values outside the range 0.0\n (fully transparent) to 1.0 (fully opaque) will be clamped\n to this range.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "paintOrder": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The paint-order attribute specifies the order that the fill,\n stroke, and markers of a given shape or text element are\n painted.Note: As a presentation attribute, paint-order\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:This value indicates that\n the fill will be painted first, then the stroke, and finally\n the markers.The order of these three keywords indicates\n the order in which the painting happens, from left to\n right. If any of the three painting components is omitted,\n they will be painted in their default order after the\n specified components. For example, using stroke is equivalent\n to stroke fill markers.The example would be rendered as\n follows:\n  \nThe stroke under effect could be achieved\n via the following CSS property:BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "pathLength": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The pathLength attribute lets authors specify a total length\n for the path, in user units. This value is then used to\n calibrate the browser's distance calculations with those\n of the author, by scaling all distance computations using\n the ratio pathLength/(computed value of path length).This\n can affect the actual rendered lengths of paths; including\n text paths, animation paths, and various stroke operations.\n Basically, all computations that require the length of\n the path. stroke-dasharray, for example, will assume the\n start of the path being 0 and the end point the value\n defined in the pathLength attribute.You can use this attribute\n with the following SVG elements:For <circle>, pathLength\n lets authors specify a total length for the circle, in\n user units.For <ellipse>, pathLength lets authors specify\n a total length for the ellipse, in user units.For <line>,\n pathLength lets authors specify a total length for the\n line, in user units.For <path>, pathLength lets authors\n specify a total length for the path, in user units.For\n <polygon>, pathLength lets authors specify a total length\n for the shape, in user units.For <polyline>, pathLength\n lets authors specify a total length for the shape, in\n user units.For <rect>, pathLength lets authors specify\n a total length for the rectangle, in user units.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "pointerEvents": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The pointer-events attribute is a presentation attribute that\n allows defining whether or when an element may be the\n target of a mouse event.Note: As a presentation attribute\n pointer-events can be used as a CSS property.You can use\n this attribute with the following SVG elements:For a detailed\n explanation of each possible value, have a look at the\n CSS pointer-events documentation.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "requiredFeatures": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The requiredFeatures attribute\n takes a list of feature strings, with the individual strings\n separated by white space. It determines whether or not\n all of the named features are supported by the browser;\n if all of them are supported, the attribute evaluates\n to true end the element is rendered; otherwise, the attribute\n evaluates to false and the current element and its children\n are skipped and thus will not be rendered. This provides\n a way to design SVG that gracefully falls back when features\n aren't available.If the attribute is not present, then\n its implicit evaluated value is true. If a null string\n or empty string value is given to attribute requiredFeatures,\n the attribute is evaluate to false.requiredFeatures is\n often used in conjunction with the <switch> element. If\n requiredFeatures is used in other situations, it represents\n a simple switch on the given element whether to render\n the element or not.To detect availability of an SVG feature\n from script, there is the (also deprecated) DOMImplementation.hasFeature()\n method.You can use this attribute with the following SVG\n elements:This is a list of feature strings, separated\n using white space. Determines whether all of the named\n features are supported by the browser. See Feature strings\n below for a list of allowed values.The following are the\n feature strings for the requiredFeatures attribute. These\n same feature strings apply to the hasFeature method call\n that is part of the SVG DOM's support for the DOMImplementation\n interface. In some cases the feature strings map directly\n to a set of attributes, properties or elements, in others\n they represent some functionality of the browser. Note\n that the format and naming for feature strings changed\n from SVG 1.0 to SVG 1.1. The SVG 1.0 feature strings are\n not listed here but can be found in the SVG Specification.\n Some browser support SVG 1.0 Feature strings for compatibility\n reasons. However, the SVG 1.0 feature strings are considered\n deprecated.At least one of the following feature is supported:At\n least one of the following feature is supported:The browser\n supports all the following features:The browser supports\n all of the DOM interfaces and methods that correspond\n to the language features for http://www.w3.org/TR/SVG11/feature#SVG-static.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-static\n plus the feature http://www.w3.org/TR/SVG11/feature#Animation.The\n browser supports all of the DOM interfaces and methods\n that correspond to the language features for http://www.w3.org/TR/SVG11/feature#SVG-animation.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-animation\n plus the following features:The browser supports all of\n the DOM interfaces and methods that correspond to the\n language features for http://www.w3.org/TR/SVG11/feature#SVG-dynamic.The\n browser supports the id, xml:base, xml:lang and xml:space\n attributesThe browser supports <svg>, <g>, <defs>, <desc>,\n <title>, <metadata>, <symbol> and <use> elements.The browser\n supports <svg>, <g>, <defs>, <desc>, <title>, <metadata>\n and <use> elements.The browser supports the enable-background\n attributeThe browser supports the <switch> element, and\n the requiredFeatures, requiredExtensions, systemLanguage\n attributesThe browser supports the <image> element.The\n browser supports the <style> element.The browser supports\n the clip and overflow attributes.The browser supports\n the <rect>, <circle>, <line>, <polyline>, <polygon>, <ellipse>\n and <path> elements.The browser supports the <text>, <tspan>,\n <tref>, <textPath>, <altGlyph>, <altGlyphDef>, <altGlyphItem>\n and <glyphRef> elements.The browser supports the <text>\n elementThe browser supports the color, fill, fill-rule,\n stroke, stroke-dasharray, stroke-dashoffset, stroke-linecap,\n stroke-linejoin, stroke-miterlimit, stroke-width, color-interpolation\n and color-rendering attributesThe browser supports the\n color, fill, fill-rule, stroke, stroke-dasharray, stroke-dashoffset,\n stroke-linecap, stroke-linejoin, stroke-miterlimit, stroke-width\n and color-rendering attributesThe browser supports the\n opacity, stroke-opacity and fill-opacity attributesThe\n browser supports the display, image-rendering, pointer-events,\n shape-rendering, text-rendering and visibility attributesThe\n browser supports the display and visibility attributesThe\n browser supports the <marker> elementThe browser supports\n the <linearGradient>, <radialGradient> and <stop> elementsThe\n browser supports the <pattern> elementThe browser supports\n the <clipPath> element and the clip-path, clip-rule attributesThe\n browser supports the <clipPath> element and the clip-path\n attributeThe browser supports the <mask> elementThe browser\n supports the <filter>, <feBlend>, <feColorMatrix>, <feComponentTransfer>,\n <feComposite>, <feConvolveMatrix>, <feDiffuseLighting>,\n <feDisplacementMap>, <feFlood>, <feGaussianBlur>, <feImage>,\n <feMerge>, <feMergeNode>, <feMorphology>, <feOffset>,\n <feSpecularLighting>, <feTile>, <feDistantLight>, <fePointLight>,\n <feSpotLight>, <feFuncR>, <feFuncG>, <feFuncB> and <feFuncA>\n elementsThe browser supports the <filter>, <feBlend>,\n <feColorMatrix>, <feComponentTransfer>, <feComposite>,\n <feFlood>, <feGaussianBlur>, <feImage>, <feMerge>, <feMergeNode>,\n <feOffset>, <feTile>, <feFuncR>, <feFuncG>, <feFuncB>\n and <feFuncA> elementsThe browser supports the onunload,\n onabort, onerror, onresize, onscroll and onzoom attributesThe\n browser supports the onfocusin, onfocusout, onactivate,\n onclick, onmousedown, onmouseup, onmouseover, onmousemove,\n onmouseout and onload attributesThe browser supports the\n onbegin, onend, onrepeat and onload attributesThe browser\n supports the <cursor> elementThe browser supports the\n <a> elementThe browser supports the xlink:type, xlink:href,\n xlink:role, xlink:arcrole, xlink:title, xlink:show and\n xlink:actuate attributesThe browser supports the <view>\n elementThe browser supports the <script> elementThe browser\n supports the <animate>, <set>, <animateMotion>, <animateTransform>,\n <animateColor> and <mpath> elementsThe browser supports\n the <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <vkern>, <font-face-src>, <font-face-uri>, <font-face-format>\n and <font-face-name> elementsThe browser supports the\n <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <font-face-src> and <font-face-name> elementsThe browser\n supports the <foreignObject> elementSee also requiredFeatures.svgBCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "rx": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x border radius"
      },
      "ry": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y border radius"
      },
      "shapeRendering": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The shape-rendering attribute provides hints to the renderer\n about what tradeoffs to make when rendering shapes like\n paths, circles, or rectangles.Note: As a presentation\n attribute, shape-rendering can be used as a CSS property.You\n can use this attribute with the following SVG elements:This\n value indicates that the user agent shall make appropriate\n tradeoffs to balance speed, crisp edges and geometric\n precision, but with geometric precision given more importance\n than speed and crisp edges.This value indicates that the\n user agent shall emphasize rendering speed over geometric\n precision and crisp edges. This option will sometimes\n cause the user agent to turn off shape anti-aliasing.This\n value indicates that the user agent shall attempt to emphasize\n the contrast between clean edges of artwork over rendering\n speed and geometric precision. To achieve crisp edges,\n the user agent might turn off anti-aliasing for all lines\n and curves or possibly just for straight lines which are\n close to vertical or horizontal. Also, the user agent\n might adjust line positions and line widths to align edges\n with device pixels.Indicates that the user agent shall\n emphasize geometric precision over speed and crisp edges.BCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "stroke": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "stroke color"
      },
      "strokeDasharray": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-dasharray attribute is a presentation attribute defining\n the pattern of dashes and gaps used to paint the outline\n of the shape;Note: As a presentation attribute, stroke-dasharray\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:A list of comma and/or\n white space separated <length>s and <percentage>s that\n specify the lengths of alternating dashes and gaps.If\n an odd number of values is provided, then the list of\n values is repeated to yield an even number of values.\n Thus, 5,3,2 is equivalent to 5,3,2,5,3,2.BCD tables only\n load in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "strokeDashoffset": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-dashoffset attribute is a presentation attribute defining\n an offset on the rendering of the associated dash array.Note:\n As a presentation attribute stroke-dashoffset can be used\n as a CSS property.You can use this attribute with the\n following SVG elements:The offset is usually expressed\n in user units resolved against the pathLength but if a\n <percentage> is used, the value is resolved as a percentage\n of the current viewport.BCD tables only load in the browser\n with JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "strokeLinejoin": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"bevel\"",
              "computed": false
            },
            {
              "value": "\"inherit\"",
              "computed": false
            },
            {
              "value": "\"miter\"",
              "computed": false
            },
            {
              "value": "\"round\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The stroke-linejoin attribute is a presentation attribute defining\n the shape to be used at the corners of paths when they\n are stroked.Note: As a presentation attribute stroke-linejoin\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:Note: The arcs value as\n been introduced in SVG2 and it isn't widely supported\n yet, see Browser compatibility below for details.The arcs\n value indicates that an arcs corner is to be used to join\n path segments. The arcs shape is formed by extending the\n outer edges of the stroke at the join point with arcs\n that have the same curvature as the outer edges at the\n join point.The bevel value indicates that a bevelled corner\n is to be used to join path segments.The miter value indicates\n that a sharp corner is to be used to join path segments.\n The corner is formed by extending the outer edges of the\n stroke at the tangents of the path segments until they\n intersect.Note: If the stroke-miterlimit is exceeded,\n the line join falls back to bevel.Note: the miter-clip\n value as been introduced in SVG2 and it isn't widely supported\n yet, see Browser compatibility below for details.The miter-clip\n value indicates that a sharp corner is to be used to join\n path segments. The corner is formed by extending the outer\n edges of the stroke at the tangents of the path segments\n until they intersect.If the stroke-miterlimit is exceeded,\n the miter is clipped at a distance equal to half the stroke-miterlimit\n value multiplied by the stroke width from the intersection\n of the path segments. This provides a better rendering\n than miter on very sharp join or in case of an animation.The\n round value indicates that a round corner is to be used\n to join path segments.BCD tables only load in the browser\n with JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "strokeMiterlimit": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-miterlimit attribute is a presentation attribute defining\n a limit on the ratio of the miter length to the stroke-width\n used to draw a miter join. When the limit is exceeded,\n the join is converted from a miter to a bevel.Note: As\n a presentation attribute stroke-miterlimit can be used\n as a CSS property.You can use this attribute with the\n following SVG elements:When two line segments meet at\n a sharp angle and miter joins have been specified for\n stroke-linejoin, it is possible for the miter to extend\n far beyond the thickness of the line stroking the path.\n The stroke-miterlimit ratio is used to define when the\n limit is exceeded, if so the join is converted from a\n miter to a bevel.The ratio of miter length (distance between\n the outer tip and the inner corner of the miter) to stroke-width\n is directly related to the angle (theta) between the segments\n in user space by the formula:\n  \n    \n      stroke-miterlimit\n\n      =\n      \n        \n          miterLength\n        \n\n        \n          stroke-width\n        \n      \n      =\n\n      \n        \n          1\n        \n        \n        \n  \n            sin\n            \n              (\n      \n        \n                \n                  \u03b8\n        \n        \n                \n                  2\n        \n        \n              \n              )\n            \n \n         \n        \n      \n    \n  \nFor example, a miter\n limit of 1.414 converts miters to bevels for theta less\n than 90 degrees, a limit of 4.0 converts them for theta\n less than approximately 29 degrees, and a limit of 10.0\n converts them for theta less than approximately 11.5 degrees.The\n value of stroke-miterlimit must be greater than or equal\n to 1.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "strokeOpacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-opacity attribute is a presentation attribute defining\n the opacity of the paint server (color, gradient, pattern,\n etc) applied to the stroke of a shape.Note: As a presentation\n attribute stroke-opacity can be used as a CSS property.You\n can use this attribute with the following SVG elements:Note:\n SVG2 introduces percentage values for stroke-opacity,\n however, it is not widely supported yet (See Browser compatibility\n below) as a consequence, it is best practices to set opacity\n with a value in the range [0-1].It's important to know\n that the stroke partially covers the fill of a shape,\n so a stroke with an opacity different than 1 will partially\n show the fill underneath. To avoid this effect, it is\n possible to apply a global opacity with the opacity attribute\n or to put the stroke behind the fill with the paint-order\n attribute.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "strokeWidth": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-width attribute is a presentation attribute defining\n the width of the stroke to be applied to the shape.You\n can use this attribute with the following SVG elements:Note:\n A percentage value is always computed as a percentage\n of the normalized viewBox diagonal length.BCD tables only\n load in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "systemLanguage": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The systemLanguage attribute represents a list of supported language\n tags. This list is matched against the language defined\n in the user preferences.You can use this attribute with\n the following SVG elements:The value is a set of comma-separated\n tokens, each of which must be a language tag, as defined\n in RFC 5646: Tags for Identifying Languages (also known\n as BCP 47).systemLanguage is often used in conjunction\n with the <switch> element. If the attribute is used in\n other situations, then it represents a simple switch on\n the given element whether to render the element or not.Note:\n If several alternative language objects are enclosed in\n a <switch> and none of them matches, this may lead to\n situations where no content is displayed. It is thus recommended\n to include a \"catch-all\" choice at the end of such a <switch>\n which is acceptable in all cases.The attribute evaluates\n to \"true\" if one of the language tags indicated by user\n preferences is a case-insensitive match or prefix (followed\n by a \"-\") of one of the language tags given in the value\n of this parameter. Otherwise it evaluates to \"false\".Note:\n The prefix matching rule does not imply that if a user\n understands a language with a certain tag, that the user\n will also understand all languages with the tag as prefix.If\n the attribute is not present, then it implicitly evaluates\n to \"true\". If a null string or empty string value is given,\n the attribute evaluates to \"false\".The prefix rule allows\n the use of prefix tags if this is the case.Multiple languages\n may be listed for content that is intended for multiple\n audiences. For example, content that is presented simultaneously\n in the original Maori and English versions, would call\n for:However, just because multiple languages are present\n within the object on which the systemLanguage test attribute\n is placed, this does not mean that it is intended for\n multiple linguistic audiences. An example would be a beginner's\n language primer, such as \"A First Lesson in Latin,\" which\n is clearly intended to be used by an English-literate\n audience. In this case, the attribute should only include\n en.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "vectorEffect": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The vector-effect property specifies the vector effect to use\n when drawing an object. Vector effects are applied before\n any of the other compositing operations, i.e. filters,\n masks and clips.Note: As a presentation attribute, vector-effect\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:This value specifies that\n no vector effect shall be applied, i.e. the default rendering\n behavior is used which is to first fill the geometry of\n a shape with a specified paint, then stroke the outline\n with a specified paint.This value modifies the way an\n object is stroked. Normally stroking involves calculating\n stroke outline of the shape's path in current user coordinate\n system and filling that outline with the stroke paint\n (color or gradient). The resulting visual effect of this\n value is that the stroke width is not dependent on the\n transformations of the element (including non-uniform\n scaling and shear transformations) and zoom level.This\n value specifies a special user coordinate system used\n by the element and its descendants. The scale of that\n user coordinate system does not change in spite of any\n transformation changes from a host coordinate space. However,\n it does not specify the suppression of rotation and skew.\n Also, it does not specify the origin of the user coordinate\n system. Since this value suppresses scaling of the user\n coordinate system, it also has the characteristics of\n non-scaling-stroke.This value specifies a special user\n coordinate system used by the element and its descendants.\n The rotation and skew of that user coordinate system is\n suppressed in spite of any transformation changes from\n a host coordinate space. However, it does not specify\n the suppression of scaling. Also, it does not specify\n the origin of user coordinate system.This value specifies\n a special user coordinate system used by the element and\n its descendants. The position of user coordinate system\n is fixed in spite of any transformation changes from a\n host coordinate space. However, it does not specify the\n suppression of rotation, skew and scaling. When this vector\n effect and the transform property are defined at the same\n time, that property is consumed for this effect.BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "visibility": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The visibility attribute lets you control the visibility of graphical\n elements. With a value of hidden or collapse the current\n graphics element is invisible.Note: If the visibility\n attribute is set to hidden on a text element, then the\n text is invisible but still takes up space in text layout\n calculations.Depending on the value of attribute pointer-events,\n graphics elements which have their visibility attribute\n set to hidden still might receive events.Note: As a presentation\n attribute, visibility can be used as a CSS property. See\n the css visibility property for more information.You can\n use this attribute with the following SVG elements:The\n following example toggles the CSS visibility of the SVG\n image path.This value indicates that the element will\n be painted.This value indicates that the element will\n not be painted. Though it is still part of the rendering\n tree, i.e. it may receive pointer events depending on\n the pointer-events attribute, may receive focus depending\n on the tabindex attribute, contributes to bounding box\n calculations and clipping paths, and does affect text\n layout.This value is equal to hidden.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/Stop.react.js": {
    "description": "Stop is a wrapper for the <stop> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/stop",
    "displayName": "Stop",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "stopColor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The stop-color attribute indicates what color to use at a gradient\n stop.Note: With respect to gradients, SVG treats the transparent\n keyword differently than CSS. SVG does not calculate gradients\n in pre-multiplied space, so transparent really means transparent\n black. So, specifying a stop-color with the value transparent\n is equivalent to specifying a stop-color with the value\n black and a stop-opacity with the value 0.Note: As a presentation\n attribute, stop-color can be used as a CSS property.You\n can use this attribute with the following SVG elements:This\n keyword denotes the current fill color and can be specified\n in the same manner as within a <paint> specification for\n the fill and stroke attributes.This value indicates a\n color value.This value refers to an ICC color profile.BCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "stopOpacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stop-opacity attribute defines the opacity of a given color\n gradient stop.The opacity value used for the gradient\n calculation is the product of the value of stop-opacity\n and the opacity of the value of the stop-color attribute.\n For stop-color values that don't include explicit opacity\n information, the opacity is treated as 1.Note: As a presentation\n attribute, stop-opacity can be used as a CSS property.You\n can use this attribute with the following SVG elements:This\n value is either a <number> between 0 and 1 or a <percentage>\n value specifying the opacity of the color gradient stop.BCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/Svg.react.js": {
    "description": "Svg is a wrapper for the <svg> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/svg",
    "displayName": "Svg",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "baseProfile": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The baseProfile attribute\n describes the minimum SVG language profile that the author\n believes is necessary to correctly render the content.\n The attribute does not specify any processing restrictions;\n It can be considered metadata.For example, the value of\n the attribute could be used by an authoring tool to warn\n the user when they are modifying the document beyond the\n scope of the specified base profile.Each SVG profile should\n define the text that is appropriate for this attribute.You\n can use this attribute with the following SVG elements:Last\n modified: May 13, 2022, by MDN contributors"
      },
      "clip": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The clip attribute is a\n presentation attribute defining the visible region of\n an element.This attribute has the same parameter values\n as defined for the css clip property. Unitless values,\n which indicate current user coordinates, are permitted\n on the coordinate values on the rect(). The value of auto\n defines a clipping path along the bounds of the viewport\n created by the given element.You can use this attribute\n with the following SVG elements:Warning: This property\n is deprecated. Use clip-path instead.The value auto defines\n a clipping path along the bounds of the viewport created\n by the given element. The value rect() defines a clipping\n rectangle following the following syntax: rect(<top>,\n <right>, <bottom>, <left>). The <top> and <bottom> values\n specify offsets from the top border edge of the element\n viewport, while <right> and <left> specify offsets from\n the left border edge of the element viewport.BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: Jun 28, 2022, by\n MDN contributors"
      },
      "clipPath": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The clip-path presentation attribute defines or associates a\n clipping path with the element it is related to.Note:\n As a presentation attribute clip-path can be used as a\n CSS property.You can use this attribute with the following\n SVG elements:An extra information to tell how a <basic-shape>\n is applied to an element: fill-box indicates to use the\n object bounding box; stroke-box indicates to use the object\n bounding box extended with the stroke; view-box indicates\n to use the nearest SVG viewport as the reference box.Note:\n For more details on the clip-path syntax, see the CSS\n property clip-path reference page.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "colorInterpolation": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation attribute specifies the color space for\n gradient interpolations, color animations, and alpha compositing.Note:\n For filter effects, the color-interpolation-filters property\n controls which color space is used.The color-interpolation\n property chooses between color operations occurring in\n the sRGB color space or in a (light energy linear) linearized\n RGB color space. Having chosen the appropriate color space,\n component-wise linear interpolation is used.When a child\n element is blended into a background, the value of the\n color-interpolation property on the child determines the\n type of blending, not the value of the color-interpolation\n on the parent. For gradients which make use of the href\n or the deprecated xlink:href attribute to reference another\n gradient, the gradient uses the property's value from\n the gradient element which is directly referenced by the\n fill or stroke property. When animating colors, color\n interpolation is performed according to the value of the\n color-interpolation property on the element being animated.Note:\n As a presentation attribute, color-interpolation can be\n used as a CSS property.You can use this attribute with\n the following SVG elements:Indicates that the user agent\n can choose either the sRGB or linearRGB spaces for color\n interpolation. This option indicates that the author doesn't\n require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "enableBackground": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The enable-background attribute\n specifies how the accumulation of the background image\n is managed.Note: As a presentation attribute, enable-background\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:If an ancestor container\n element has a property value of enable-background: new,\n then all graphics elements within the current container\n element are rendered both onto the parent container element's\n background image canvas and onto the target device.Otherwise,\n there is no current background image canvas, so graphics\n elements are only rendered onto the target device.This\n value enables the ability of children of the current container\n element to access the background image.It also indicates\n that a new (i.e., initially transparent black) background\n image canvas is established and that in effect all children\n of the current container element shall be rendered into\n the new background image canvas in addition to being rendered\n onto the target device.\n      The optional <x>, <y>, <width>,\n and <height> parameters are <number> values that indicate\n the subregion of the container element's user space where\n access to the background image is allowed to happen. Those\n values act as a clipping rectangle on the background image\n canvas.\n      Negative values for <width> or <height>\n are forbidden. If one, two, or three values are specified\n or if neither <width> nor <height> are specified, the\n BackgroundImage and BackgroundAlpha of a filter primitive\n are processed as if background image processing were not\n enabled.\n    BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 17, 2022, by MDN contributors"
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "mask": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The mask attribute is a presentation attribute mainly used to\n bind a given <mask> element with the element the attribute\n belongs to.Note: As a presentation attribute mask can\n be used as a CSS property.You can use this attribute with\n the following SVG elements:Since SVG2, the mask attribute\n is defined as a css property and is a shorthand for many\n other properties: mask-image, mask-mode, mask-repeat,\n mask-position, mask-clip, mask-origin, mask-size, and\n mask-composite.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "opacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The opacity attribute specifies the transparency of an object\n or of a group of objects, that is, the degree to which\n the background behind the element is overlaid.Note: As\n a presentation attribute, opacity can be used as a CSS\n property. See the css opacity property for more information.You\n can use this attribute with the following SVG elements:The\n uniform opacity setting to be applied across an entire\n object, as a <number>. Any values outside the range 0.0\n (fully transparent) to 1.0 (fully opaque) will be clamped\n to this range.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "overflow": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The overflow attribute sets what to do when an element's content\n is too big to fit in its block formatting context. This\n feature is not widely implemented yet.This attribute has\n the same parameter values and meaning as the css overflow\n property, however, the following additional points apply:Note:\n Although the initial value for overflow is auto, it is\n overwritten in the User Agent style sheet for the <svg>\n element when it is not the root element of a stand-alone\n document, the <pattern> element, and the <marker> element\n to be hidden by default.Note: As a presentation attribute,\n overflow can be used as a CSS property. See the CSS overflow\n property for more information.You can use this attribute\n with the following SVG elements:For a description of the\n values, please see the css overflow property.BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "pointerEvents": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The pointer-events attribute is a presentation attribute that\n allows defining whether or when an element may be the\n target of a mouse event.Note: As a presentation attribute\n pointer-events can be used as a CSS property.You can use\n this attribute with the following SVG elements:For a detailed\n explanation of each possible value, have a look at the\n CSS pointer-events documentation.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "preserveAspectRatio": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The preserveAspectRatio attribute indicates how an element with\n a viewBox providing a given aspect ratio must fit into\n a viewport with a different aspect ratio.Because the aspect\n ratio of an SVG image is defined by the viewBox attribute,\n if this attribute isn't set, the preserveAspectRatio attribute\n has no effect (with one exception, the <image> element,\n as described below).Its value is made of one or two keywords:\n A required alignment value and an optional \"meet or slice\"\n reference as described below:The alignment value indicates\n whether to force uniform scaling and, if so, the alignment\n method to use in case the aspect ratio of the viewBox\n doesn't match the aspect ratio of the viewport. The alignment\n value must be one of the following keywords:The meet or\n slice reference is optional and, if provided, must be\n one of the following keywords:You can use this attribute\n with the following SVG elements:For <feImage>, preserveAspectRatio\n defines how the referenced image should fit in the rectangle\n define by the <feImage> element.For <image>, preserveAspectRatio\n defines how the referenced image should fit in the rectangle\n define by the <image> element.For <marker>, preserveAspectRatio\n indicates if a uniform scaling must be performed to fit\n the element viewport.For <pattern>, preserveAspectRatio\n indicates if a uniform scaling must be performed to fit\n the element viewport.For <svg>, preserveAspectRatio indicates\n if a uniform scaling must be performed to fit the element\n viewport.For <symbol>, preserveAspectRatio indicates if\n a uniform scaling must be performed to fit the element\n viewport.For <view>, preserveAspectRatio indicates if\n a uniform scaling must be performed to fit the element\n viewport.Last modified: May 13, 2022, by MDN contributors"
      },
      "requiredFeatures": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The requiredFeatures attribute\n takes a list of feature strings, with the individual strings\n separated by white space. It determines whether or not\n all of the named features are supported by the browser;\n if all of them are supported, the attribute evaluates\n to true end the element is rendered; otherwise, the attribute\n evaluates to false and the current element and its children\n are skipped and thus will not be rendered. This provides\n a way to design SVG that gracefully falls back when features\n aren't available.If the attribute is not present, then\n its implicit evaluated value is true. If a null string\n or empty string value is given to attribute requiredFeatures,\n the attribute is evaluate to false.requiredFeatures is\n often used in conjunction with the <switch> element. If\n requiredFeatures is used in other situations, it represents\n a simple switch on the given element whether to render\n the element or not.To detect availability of an SVG feature\n from script, there is the (also deprecated) DOMImplementation.hasFeature()\n method.You can use this attribute with the following SVG\n elements:This is a list of feature strings, separated\n using white space. Determines whether all of the named\n features are supported by the browser. See Feature strings\n below for a list of allowed values.The following are the\n feature strings for the requiredFeatures attribute. These\n same feature strings apply to the hasFeature method call\n that is part of the SVG DOM's support for the DOMImplementation\n interface. In some cases the feature strings map directly\n to a set of attributes, properties or elements, in others\n they represent some functionality of the browser. Note\n that the format and naming for feature strings changed\n from SVG 1.0 to SVG 1.1. The SVG 1.0 feature strings are\n not listed here but can be found in the SVG Specification.\n Some browser support SVG 1.0 Feature strings for compatibility\n reasons. However, the SVG 1.0 feature strings are considered\n deprecated.At least one of the following feature is supported:At\n least one of the following feature is supported:The browser\n supports all the following features:The browser supports\n all of the DOM interfaces and methods that correspond\n to the language features for http://www.w3.org/TR/SVG11/feature#SVG-static.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-static\n plus the feature http://www.w3.org/TR/SVG11/feature#Animation.The\n browser supports all of the DOM interfaces and methods\n that correspond to the language features for http://www.w3.org/TR/SVG11/feature#SVG-animation.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-animation\n plus the following features:The browser supports all of\n the DOM interfaces and methods that correspond to the\n language features for http://www.w3.org/TR/SVG11/feature#SVG-dynamic.The\n browser supports the id, xml:base, xml:lang and xml:space\n attributesThe browser supports <svg>, <g>, <defs>, <desc>,\n <title>, <metadata>, <symbol> and <use> elements.The browser\n supports <svg>, <g>, <defs>, <desc>, <title>, <metadata>\n and <use> elements.The browser supports the enable-background\n attributeThe browser supports the <switch> element, and\n the requiredFeatures, requiredExtensions, systemLanguage\n attributesThe browser supports the <image> element.The\n browser supports the <style> element.The browser supports\n the clip and overflow attributes.The browser supports\n the <rect>, <circle>, <line>, <polyline>, <polygon>, <ellipse>\n and <path> elements.The browser supports the <text>, <tspan>,\n <tref>, <textPath>, <altGlyph>, <altGlyphDef>, <altGlyphItem>\n and <glyphRef> elements.The browser supports the <text>\n elementThe browser supports the color, fill, fill-rule,\n stroke, stroke-dasharray, stroke-dashoffset, stroke-linecap,\n stroke-linejoin, stroke-miterlimit, stroke-width, color-interpolation\n and color-rendering attributesThe browser supports the\n color, fill, fill-rule, stroke, stroke-dasharray, stroke-dashoffset,\n stroke-linecap, stroke-linejoin, stroke-miterlimit, stroke-width\n and color-rendering attributesThe browser supports the\n opacity, stroke-opacity and fill-opacity attributesThe\n browser supports the display, image-rendering, pointer-events,\n shape-rendering, text-rendering and visibility attributesThe\n browser supports the display and visibility attributesThe\n browser supports the <marker> elementThe browser supports\n the <linearGradient>, <radialGradient> and <stop> elementsThe\n browser supports the <pattern> elementThe browser supports\n the <clipPath> element and the clip-path, clip-rule attributesThe\n browser supports the <clipPath> element and the clip-path\n attributeThe browser supports the <mask> elementThe browser\n supports the <filter>, <feBlend>, <feColorMatrix>, <feComponentTransfer>,\n <feComposite>, <feConvolveMatrix>, <feDiffuseLighting>,\n <feDisplacementMap>, <feFlood>, <feGaussianBlur>, <feImage>,\n <feMerge>, <feMergeNode>, <feMorphology>, <feOffset>,\n <feSpecularLighting>, <feTile>, <feDistantLight>, <fePointLight>,\n <feSpotLight>, <feFuncR>, <feFuncG>, <feFuncB> and <feFuncA>\n elementsThe browser supports the <filter>, <feBlend>,\n <feColorMatrix>, <feComponentTransfer>, <feComposite>,\n <feFlood>, <feGaussianBlur>, <feImage>, <feMerge>, <feMergeNode>,\n <feOffset>, <feTile>, <feFuncR>, <feFuncG>, <feFuncB>\n and <feFuncA> elementsThe browser supports the onunload,\n onabort, onerror, onresize, onscroll and onzoom attributesThe\n browser supports the onfocusin, onfocusout, onactivate,\n onclick, onmousedown, onmouseup, onmouseover, onmousemove,\n onmouseout and onload attributesThe browser supports the\n onbegin, onend, onrepeat and onload attributesThe browser\n supports the <cursor> elementThe browser supports the\n <a> elementThe browser supports the xlink:type, xlink:href,\n xlink:role, xlink:arcrole, xlink:title, xlink:show and\n xlink:actuate attributesThe browser supports the <view>\n elementThe browser supports the <script> elementThe browser\n supports the <animate>, <set>, <animateMotion>, <animateTransform>,\n <animateColor> and <mpath> elementsThe browser supports\n the <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <vkern>, <font-face-src>, <font-face-uri>, <font-face-format>\n and <font-face-name> elementsThe browser supports the\n <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <font-face-src> and <font-face-name> elementsThe browser\n supports the <foreignObject> elementSee also requiredFeatures.svgBCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "systemLanguage": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The systemLanguage attribute represents a list of supported language\n tags. This list is matched against the language defined\n in the user preferences.You can use this attribute with\n the following SVG elements:The value is a set of comma-separated\n tokens, each of which must be a language tag, as defined\n in RFC 5646: Tags for Identifying Languages (also known\n as BCP 47).systemLanguage is often used in conjunction\n with the <switch> element. If the attribute is used in\n other situations, then it represents a simple switch on\n the given element whether to render the element or not.Note:\n If several alternative language objects are enclosed in\n a <switch> and none of them matches, this may lead to\n situations where no content is displayed. It is thus recommended\n to include a \"catch-all\" choice at the end of such a <switch>\n which is acceptable in all cases.The attribute evaluates\n to \"true\" if one of the language tags indicated by user\n preferences is a case-insensitive match or prefix (followed\n by a \"-\") of one of the language tags given in the value\n of this parameter. Otherwise it evaluates to \"false\".Note:\n The prefix matching rule does not imply that if a user\n understands a language with a certain tag, that the user\n will also understand all languages with the tag as prefix.If\n the attribute is not present, then it implicitly evaluates\n to \"true\". If a null string or empty string value is given,\n the attribute evaluates to \"false\".The prefix rule allows\n the use of prefix tags if this is the case.Multiple languages\n may be listed for content that is intended for multiple\n audiences. For example, content that is presented simultaneously\n in the original Maori and English versions, would call\n for:However, just because multiple languages are present\n within the object on which the systemLanguage test attribute\n is placed, this does not mean that it is intended for\n multiple linguistic audiences. An example would be a beginner's\n language primer, such as \"A First Lesson in Latin,\" which\n is clearly intended to be used by an English-literate\n audience. In this case, the attribute should only include\n en.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "version": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The version attribute is\n used to indicate what specification a SVG document conforms\n to. It is only allowed on the root <svg> element. It is\n purely advisory and has no influence on rendering or processing.While\n it is specified to accept any number, the only two valid\n choices are currently 1.0 and 1.1.You can use this attribute\n with the following SVG elements:BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "viewBox": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The viewBox attribute defines the position and dimension, in\n user space, of an SVG viewport.The value of the viewBox\n attribute is a list of four numbers: min-x, min-y, width\n and height. The numbers, which are separated by whitespace\n and/or a comma, specify a rectangle in user space which\n is mapped to the bounds of the viewport established for\n the associated SVG element (not the browser viewport).You\n can use this attribute with the following SVG elements:The\n exact effect of this attribute is influenced by the preserveAspectRatio\n attribute.Note: Values for width or height lower or equal\n to 0 disable rendering of the element.For <marker>, viewBox\n defines the position and dimension for the content of\n the <marker> element.For <pattern>, viewBox defines the\n position and dimension for the content of the pattern\n tile.For <svg>, viewBox defines the position and dimension\n for the content of the <svg> element.For <symbol>, viewBox\n defines the position and dimension for the content of\n the <symbol> element.For <view>, viewBox defines the position\n and dimension for the content of the <view> element.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "zoomAndPan": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The zoomAndPan attribute\n specifies whether the SVG document can be magnified and\n panned.Magnification in this context means the effect\n of a supplemental scale and translate transformation on\n the outermost SVG document fragment.Panning represents\n a translation (i.e., a shift) transformation on an SVG\n document fragment in response to a user interface action.You\n can use this attribute with the following SVG elements:BCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "stroke": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "stroke color"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "alt": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Alternative text in case an image can't be displayed."
      },
      "xmlns": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "SVG xml namespace."
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/Switch.react.js": {
    "description": "Switch is a wrapper for the <switch> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/switch",
    "displayName": "Switch",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "colorInterpolation": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation attribute specifies the color space for\n gradient interpolations, color animations, and alpha compositing.Note:\n For filter effects, the color-interpolation-filters property\n controls which color space is used.The color-interpolation\n property chooses between color operations occurring in\n the sRGB color space or in a (light energy linear) linearized\n RGB color space. Having chosen the appropriate color space,\n component-wise linear interpolation is used.When a child\n element is blended into a background, the value of the\n color-interpolation property on the child determines the\n type of blending, not the value of the color-interpolation\n on the parent. For gradients which make use of the href\n or the deprecated xlink:href attribute to reference another\n gradient, the gradient uses the property's value from\n the gradient element which is directly referenced by the\n fill or stroke property. When animating colors, color\n interpolation is performed according to the value of the\n color-interpolation property on the element being animated.Note:\n As a presentation attribute, color-interpolation can be\n used as a CSS property.You can use this attribute with\n the following SVG elements:Indicates that the user agent\n can choose either the sRGB or linearRGB spaces for color\n interpolation. This option indicates that the author doesn't\n require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "enableBackground": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The enable-background attribute\n specifies how the accumulation of the background image\n is managed.Note: As a presentation attribute, enable-background\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:If an ancestor container\n element has a property value of enable-background: new,\n then all graphics elements within the current container\n element are rendered both onto the parent container element's\n background image canvas and onto the target device.Otherwise,\n there is no current background image canvas, so graphics\n elements are only rendered onto the target device.This\n value enables the ability of children of the current container\n element to access the background image.It also indicates\n that a new (i.e., initially transparent black) background\n image canvas is established and that in effect all children\n of the current container element shall be rendered into\n the new background image canvas in addition to being rendered\n onto the target device.\n      The optional <x>, <y>, <width>,\n and <height> parameters are <number> values that indicate\n the subregion of the container element's user space where\n access to the background image is allowed to happen. Those\n values act as a clipping rectangle on the background image\n canvas.\n      Negative values for <width> or <height>\n are forbidden. If one, two, or three values are specified\n or if neither <width> nor <height> are specified, the\n BackgroundImage and BackgroundAlpha of a filter primitive\n are processed as if background image processing were not\n enabled.\n    BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 17, 2022, by MDN contributors"
      },
      "opacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The opacity attribute specifies the transparency of an object\n or of a group of objects, that is, the degree to which\n the background behind the element is overlaid.Note: As\n a presentation attribute, opacity can be used as a CSS\n property. See the css opacity property for more information.You\n can use this attribute with the following SVG elements:The\n uniform opacity setting to be applied across an entire\n object, as a <number>. Any values outside the range 0.0\n (fully transparent) to 1.0 (fully opaque) will be clamped\n to this range.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "pointerEvents": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The pointer-events attribute is a presentation attribute that\n allows defining whether or when an element may be the\n target of a mouse event.Note: As a presentation attribute\n pointer-events can be used as a CSS property.You can use\n this attribute with the following SVG elements:For a detailed\n explanation of each possible value, have a look at the\n CSS pointer-events documentation.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "requiredFeatures": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The requiredFeatures attribute\n takes a list of feature strings, with the individual strings\n separated by white space. It determines whether or not\n all of the named features are supported by the browser;\n if all of them are supported, the attribute evaluates\n to true end the element is rendered; otherwise, the attribute\n evaluates to false and the current element and its children\n are skipped and thus will not be rendered. This provides\n a way to design SVG that gracefully falls back when features\n aren't available.If the attribute is not present, then\n its implicit evaluated value is true. If a null string\n or empty string value is given to attribute requiredFeatures,\n the attribute is evaluate to false.requiredFeatures is\n often used in conjunction with the <switch> element. If\n requiredFeatures is used in other situations, it represents\n a simple switch on the given element whether to render\n the element or not.To detect availability of an SVG feature\n from script, there is the (also deprecated) DOMImplementation.hasFeature()\n method.You can use this attribute with the following SVG\n elements:This is a list of feature strings, separated\n using white space. Determines whether all of the named\n features are supported by the browser. See Feature strings\n below for a list of allowed values.The following are the\n feature strings for the requiredFeatures attribute. These\n same feature strings apply to the hasFeature method call\n that is part of the SVG DOM's support for the DOMImplementation\n interface. In some cases the feature strings map directly\n to a set of attributes, properties or elements, in others\n they represent some functionality of the browser. Note\n that the format and naming for feature strings changed\n from SVG 1.0 to SVG 1.1. The SVG 1.0 feature strings are\n not listed here but can be found in the SVG Specification.\n Some browser support SVG 1.0 Feature strings for compatibility\n reasons. However, the SVG 1.0 feature strings are considered\n deprecated.At least one of the following feature is supported:At\n least one of the following feature is supported:The browser\n supports all the following features:The browser supports\n all of the DOM interfaces and methods that correspond\n to the language features for http://www.w3.org/TR/SVG11/feature#SVG-static.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-static\n plus the feature http://www.w3.org/TR/SVG11/feature#Animation.The\n browser supports all of the DOM interfaces and methods\n that correspond to the language features for http://www.w3.org/TR/SVG11/feature#SVG-animation.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-animation\n plus the following features:The browser supports all of\n the DOM interfaces and methods that correspond to the\n language features for http://www.w3.org/TR/SVG11/feature#SVG-dynamic.The\n browser supports the id, xml:base, xml:lang and xml:space\n attributesThe browser supports <svg>, <g>, <defs>, <desc>,\n <title>, <metadata>, <symbol> and <use> elements.The browser\n supports <svg>, <g>, <defs>, <desc>, <title>, <metadata>\n and <use> elements.The browser supports the enable-background\n attributeThe browser supports the <switch> element, and\n the requiredFeatures, requiredExtensions, systemLanguage\n attributesThe browser supports the <image> element.The\n browser supports the <style> element.The browser supports\n the clip and overflow attributes.The browser supports\n the <rect>, <circle>, <line>, <polyline>, <polygon>, <ellipse>\n and <path> elements.The browser supports the <text>, <tspan>,\n <tref>, <textPath>, <altGlyph>, <altGlyphDef>, <altGlyphItem>\n and <glyphRef> elements.The browser supports the <text>\n elementThe browser supports the color, fill, fill-rule,\n stroke, stroke-dasharray, stroke-dashoffset, stroke-linecap,\n stroke-linejoin, stroke-miterlimit, stroke-width, color-interpolation\n and color-rendering attributesThe browser supports the\n color, fill, fill-rule, stroke, stroke-dasharray, stroke-dashoffset,\n stroke-linecap, stroke-linejoin, stroke-miterlimit, stroke-width\n and color-rendering attributesThe browser supports the\n opacity, stroke-opacity and fill-opacity attributesThe\n browser supports the display, image-rendering, pointer-events,\n shape-rendering, text-rendering and visibility attributesThe\n browser supports the display and visibility attributesThe\n browser supports the <marker> elementThe browser supports\n the <linearGradient>, <radialGradient> and <stop> elementsThe\n browser supports the <pattern> elementThe browser supports\n the <clipPath> element and the clip-path, clip-rule attributesThe\n browser supports the <clipPath> element and the clip-path\n attributeThe browser supports the <mask> elementThe browser\n supports the <filter>, <feBlend>, <feColorMatrix>, <feComponentTransfer>,\n <feComposite>, <feConvolveMatrix>, <feDiffuseLighting>,\n <feDisplacementMap>, <feFlood>, <feGaussianBlur>, <feImage>,\n <feMerge>, <feMergeNode>, <feMorphology>, <feOffset>,\n <feSpecularLighting>, <feTile>, <feDistantLight>, <fePointLight>,\n <feSpotLight>, <feFuncR>, <feFuncG>, <feFuncB> and <feFuncA>\n elementsThe browser supports the <filter>, <feBlend>,\n <feColorMatrix>, <feComponentTransfer>, <feComposite>,\n <feFlood>, <feGaussianBlur>, <feImage>, <feMerge>, <feMergeNode>,\n <feOffset>, <feTile>, <feFuncR>, <feFuncG>, <feFuncB>\n and <feFuncA> elementsThe browser supports the onunload,\n onabort, onerror, onresize, onscroll and onzoom attributesThe\n browser supports the onfocusin, onfocusout, onactivate,\n onclick, onmousedown, onmouseup, onmouseover, onmousemove,\n onmouseout and onload attributesThe browser supports the\n onbegin, onend, onrepeat and onload attributesThe browser\n supports the <cursor> elementThe browser supports the\n <a> elementThe browser supports the xlink:type, xlink:href,\n xlink:role, xlink:arcrole, xlink:title, xlink:show and\n xlink:actuate attributesThe browser supports the <view>\n elementThe browser supports the <script> elementThe browser\n supports the <animate>, <set>, <animateMotion>, <animateTransform>,\n <animateColor> and <mpath> elementsThe browser supports\n the <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <vkern>, <font-face-src>, <font-face-uri>, <font-face-format>\n and <font-face-name> elementsThe browser supports the\n <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <font-face-src> and <font-face-name> elementsThe browser\n supports the <foreignObject> elementSee also requiredFeatures.svgBCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "systemLanguage": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The systemLanguage attribute represents a list of supported language\n tags. This list is matched against the language defined\n in the user preferences.You can use this attribute with\n the following SVG elements:The value is a set of comma-separated\n tokens, each of which must be a language tag, as defined\n in RFC 5646: Tags for Identifying Languages (also known\n as BCP 47).systemLanguage is often used in conjunction\n with the <switch> element. If the attribute is used in\n other situations, then it represents a simple switch on\n the given element whether to render the element or not.Note:\n If several alternative language objects are enclosed in\n a <switch> and none of them matches, this may lead to\n situations where no content is displayed. It is thus recommended\n to include a \"catch-all\" choice at the end of such a <switch>\n which is acceptable in all cases.The attribute evaluates\n to \"true\" if one of the language tags indicated by user\n preferences is a case-insensitive match or prefix (followed\n by a \"-\") of one of the language tags given in the value\n of this parameter. Otherwise it evaluates to \"false\".Note:\n The prefix matching rule does not imply that if a user\n understands a language with a certain tag, that the user\n will also understand all languages with the tag as prefix.If\n the attribute is not present, then it implicitly evaluates\n to \"true\". If a null string or empty string value is given,\n the attribute evaluates to \"false\".The prefix rule allows\n the use of prefix tags if this is the case.Multiple languages\n may be listed for content that is intended for multiple\n audiences. For example, content that is presented simultaneously\n in the original Maori and English versions, would call\n for:However, just because multiple languages are present\n within the object on which the systemLanguage test attribute\n is placed, this does not mean that it is intended for\n multiple linguistic audiences. An example would be a beginner's\n language primer, such as \"A First Lesson in Latin,\" which\n is clearly intended to be used by an English-literate\n audience. In this case, the attribute should only include\n en.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/Symbol.react.js": {
    "description": "Symbol is a wrapper for the <symbol> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/symbol",
    "displayName": "Symbol",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "clip": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The clip attribute is a\n presentation attribute defining the visible region of\n an element.This attribute has the same parameter values\n as defined for the css clip property. Unitless values,\n which indicate current user coordinates, are permitted\n on the coordinate values on the rect(). The value of auto\n defines a clipping path along the bounds of the viewport\n created by the given element.You can use this attribute\n with the following SVG elements:Warning: This property\n is deprecated. Use clip-path instead.The value auto defines\n a clipping path along the bounds of the viewport created\n by the given element. The value rect() defines a clipping\n rectangle following the following syntax: rect(<top>,\n <right>, <bottom>, <left>). The <top> and <bottom> values\n specify offsets from the top border edge of the element\n viewport, while <right> and <left> specify offsets from\n the left border edge of the element viewport.BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: Jun 28, 2022, by\n MDN contributors"
      },
      "clipPath": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The clip-path presentation attribute defines or associates a\n clipping path with the element it is related to.Note:\n As a presentation attribute clip-path can be used as a\n CSS property.You can use this attribute with the following\n SVG elements:An extra information to tell how a <basic-shape>\n is applied to an element: fill-box indicates to use the\n object bounding box; stroke-box indicates to use the object\n bounding box extended with the stroke; view-box indicates\n to use the nearest SVG viewport as the reference box.Note:\n For more details on the clip-path syntax, see the CSS\n property clip-path reference page.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "colorInterpolation": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation attribute specifies the color space for\n gradient interpolations, color animations, and alpha compositing.Note:\n For filter effects, the color-interpolation-filters property\n controls which color space is used.The color-interpolation\n property chooses between color operations occurring in\n the sRGB color space or in a (light energy linear) linearized\n RGB color space. Having chosen the appropriate color space,\n component-wise linear interpolation is used.When a child\n element is blended into a background, the value of the\n color-interpolation property on the child determines the\n type of blending, not the value of the color-interpolation\n on the parent. For gradients which make use of the href\n or the deprecated xlink:href attribute to reference another\n gradient, the gradient uses the property's value from\n the gradient element which is directly referenced by the\n fill or stroke property. When animating colors, color\n interpolation is performed according to the value of the\n color-interpolation property on the element being animated.Note:\n As a presentation attribute, color-interpolation can be\n used as a CSS property.You can use this attribute with\n the following SVG elements:Indicates that the user agent\n can choose either the sRGB or linearRGB spaces for color\n interpolation. This option indicates that the author doesn't\n require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "enableBackground": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The enable-background attribute\n specifies how the accumulation of the background image\n is managed.Note: As a presentation attribute, enable-background\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:If an ancestor container\n element has a property value of enable-background: new,\n then all graphics elements within the current container\n element are rendered both onto the parent container element's\n background image canvas and onto the target device.Otherwise,\n there is no current background image canvas, so graphics\n elements are only rendered onto the target device.This\n value enables the ability of children of the current container\n element to access the background image.It also indicates\n that a new (i.e., initially transparent black) background\n image canvas is established and that in effect all children\n of the current container element shall be rendered into\n the new background image canvas in addition to being rendered\n onto the target device.\n      The optional <x>, <y>, <width>,\n and <height> parameters are <number> values that indicate\n the subregion of the container element's user space where\n access to the background image is allowed to happen. Those\n values act as a clipping rectangle on the background image\n canvas.\n      Negative values for <width> or <height>\n are forbidden. If one, two, or three values are specified\n or if neither <width> nor <height> are specified, the\n BackgroundImage and BackgroundAlpha of a filter primitive\n are processed as if background image processing were not\n enabled.\n    BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 17, 2022, by MDN contributors"
      },
      "mask": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The mask attribute is a presentation attribute mainly used to\n bind a given <mask> element with the element the attribute\n belongs to.Note: As a presentation attribute mask can\n be used as a CSS property.You can use this attribute with\n the following SVG elements:Since SVG2, the mask attribute\n is defined as a css property and is a shorthand for many\n other properties: mask-image, mask-mode, mask-repeat,\n mask-position, mask-clip, mask-origin, mask-size, and\n mask-composite.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "opacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The opacity attribute specifies the transparency of an object\n or of a group of objects, that is, the degree to which\n the background behind the element is overlaid.Note: As\n a presentation attribute, opacity can be used as a CSS\n property. See the css opacity property for more information.You\n can use this attribute with the following SVG elements:The\n uniform opacity setting to be applied across an entire\n object, as a <number>. Any values outside the range 0.0\n (fully transparent) to 1.0 (fully opaque) will be clamped\n to this range.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "overflow": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The overflow attribute sets what to do when an element's content\n is too big to fit in its block formatting context. This\n feature is not widely implemented yet.This attribute has\n the same parameter values and meaning as the css overflow\n property, however, the following additional points apply:Note:\n Although the initial value for overflow is auto, it is\n overwritten in the User Agent style sheet for the <svg>\n element when it is not the root element of a stand-alone\n document, the <pattern> element, and the <marker> element\n to be hidden by default.Note: As a presentation attribute,\n overflow can be used as a CSS property. See the CSS overflow\n property for more information.You can use this attribute\n with the following SVG elements:For a description of the\n values, please see the css overflow property.BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "pointerEvents": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The pointer-events attribute is a presentation attribute that\n allows defining whether or when an element may be the\n target of a mouse event.Note: As a presentation attribute\n pointer-events can be used as a CSS property.You can use\n this attribute with the following SVG elements:For a detailed\n explanation of each possible value, have a look at the\n CSS pointer-events documentation.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "preserveAspectRatio": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The preserveAspectRatio attribute indicates how an element with\n a viewBox providing a given aspect ratio must fit into\n a viewport with a different aspect ratio.Because the aspect\n ratio of an SVG image is defined by the viewBox attribute,\n if this attribute isn't set, the preserveAspectRatio attribute\n has no effect (with one exception, the <image> element,\n as described below).Its value is made of one or two keywords:\n A required alignment value and an optional \"meet or slice\"\n reference as described below:The alignment value indicates\n whether to force uniform scaling and, if so, the alignment\n method to use in case the aspect ratio of the viewBox\n doesn't match the aspect ratio of the viewport. The alignment\n value must be one of the following keywords:The meet or\n slice reference is optional and, if provided, must be\n one of the following keywords:You can use this attribute\n with the following SVG elements:For <feImage>, preserveAspectRatio\n defines how the referenced image should fit in the rectangle\n define by the <feImage> element.For <image>, preserveAspectRatio\n defines how the referenced image should fit in the rectangle\n define by the <image> element.For <marker>, preserveAspectRatio\n indicates if a uniform scaling must be performed to fit\n the element viewport.For <pattern>, preserveAspectRatio\n indicates if a uniform scaling must be performed to fit\n the element viewport.For <svg>, preserveAspectRatio indicates\n if a uniform scaling must be performed to fit the element\n viewport.For <symbol>, preserveAspectRatio indicates if\n a uniform scaling must be performed to fit the element\n viewport.For <view>, preserveAspectRatio indicates if\n a uniform scaling must be performed to fit the element\n viewport.Last modified: May 13, 2022, by MDN contributors"
      },
      "refX": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The refX attribute defines the x coordinate of an element's reference\n point.You can use this attribute with the following SVG\n elements:For <marker>, refX defines the x coordinate of\n the marker's reference point, which is to be placed exactly\n at the marker's position on the shape.Lengths are interpreted\n as being in the coordinate system of the marker contents,\n after application of the viewBox and preserveAspectRatio\n attributes.Percentage values are interpreted as being\n a percentage of the viewBox width.Numbers are interpreted\n as being in the coordinate system of the marker contents,\n after application of the viewBox and preserveAspectRatio\n attributes.The reference point of the marker is placed\n at the left edge of the shape.The reference point of the\n marker is placed at the horizontal center of the shape.The\n reference point of the marker is placed at the right edge\n of the shape.For <symbol>, refX defines the x coordinate\n of the symbol, which is defined by the cumulative effect\n of the x attribute and any transformations on the <symbol>\n and its host <use> element.Unlike other positioning attributes,\n refX is interpreted as being in the coordinate system\n of the symbol contents, after application of the viewBox\n and preserveAspectRatio attributes. If the attribute is\n not specified, no horizontal adjustment is made, and the\n left side of the symbol's rectangular viewport region\n (regardless of the viewBox coordinate) is positioned at\n the x coordinate.Note: For backwards compatibility, the\n behavior when refX is not specified on a <symbol> element\n is different from when it is specified with a value of\n 0, and therefore different from the behavior when an equivalent\n attribute is not specified on a <marker> element.Lengths\n are interpreted as being in the coordinate system of the\n marker contents, after application of the viewBox and\n preserveAspectRatio attributes.Percentage values are interpreted\n as being a percentage of the viewBox width.Numbers are\n interpreted as being in the coordinate system of the marker\n contents, after application of the viewBox and preserveAspectRatio\n attributes.The reference point of the marker is placed\n at the left edge of the shape.The reference point of the\n marker is placed at the horizontal center of the shape.The\n reference point of the marker is placed at the right edge\n of the shape.Last modified: May 13, 2022, by MDN contributors"
      },
      "refY": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The refY attribute defines the y coordinate of an element's reference\n point.You can use this attribute with the following SVG\n elements:For <marker>, refY defines the y coordinate of\n the marker's reference point, which is to be placed exactly\n at the marker's position on the shape.Lengths are interpreted\n as being in the coordinate system of the marker contents,\n after application of the viewBox and preserveAspectRatio\n attributes.Percentage values are interpreted as being\n a percentage of the viewBox height.Numbers are interpreted\n as being in the coordinate system of the marker contents,\n after application of the viewBox and preserveAspectRatio\n attributes.The reference point of the marker is placed\n at the top edge of the shape.The reference point of the\n marker is placed at the vertical center of the shape.The\n reference point of the marker is placed at the bottom\n edge of the shape.For <symbol>, refY defines the y coordinate\n of the symbol, which is defined by the cumulative effect\n of the y attribute and any transformations on the <symbol>\n and its host <use> element.Unlike other positioning attributes,\n refY is interpreted as being in the coordinate system\n of the symbol contents, after application of the viewBox\n and preserveAspectRatio attributes. If the attribute is\n not specified, no vertical adjustment is made, and the\n top side of the symbol's rectangular viewport region (regardless\n of the viewBox coordinate) is positioned at the y coordinate.Note:\n For backwards compatibility, the behavior when refY is\n not specified on a <symbol> element is different from\n when it is specified with a value of 0, and therefore\n different from the behavior when an equivalent attribute\n is not specified on a <marker> element.Lengths are interpreted\n as being in the coordinate system of the marker contents,\n after application of the viewBox and preserveAspectRatio\n attributes.Percentage values are interpreted as being\n a percentage of the viewBox height.Numbers are interpreted\n as being in the coordinate system of the marker contents,\n after application of the viewBox and preserveAspectRatio\n attributes.The reference point of the marker is placed\n at the top edge of the shape.The reference point of the\n marker is placed at the vertical center of the shape.The\n reference point of the marker is placed at the bottom\n edge of the shape.Last modified: May 13, 2022, by MDN\n contributors"
      },
      "viewBox": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The viewBox attribute defines the position and dimension, in\n user space, of an SVG viewport.The value of the viewBox\n attribute is a list of four numbers: min-x, min-y, width\n and height. The numbers, which are separated by whitespace\n and/or a comma, specify a rectangle in user space which\n is mapped to the bounds of the viewport established for\n the associated SVG element (not the browser viewport).You\n can use this attribute with the following SVG elements:The\n exact effect of this attribute is influenced by the preserveAspectRatio\n attribute.Note: Values for width or height lower or equal\n to 0 disable rendering of the element.For <marker>, viewBox\n defines the position and dimension for the content of\n the <marker> element.For <pattern>, viewBox defines the\n position and dimension for the content of the pattern\n tile.For <svg>, viewBox defines the position and dimension\n for the content of the <svg> element.For <symbol>, viewBox\n defines the position and dimension for the content of\n the <symbol> element.For <view>, viewBox defines the position\n and dimension for the content of the <view> element.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/Text.react.js": {
    "description": "Text is a wrapper for the <text> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/text",
    "displayName": "Text",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "clipPath": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The clip-path presentation attribute defines or associates a\n clipping path with the element it is related to.Note:\n As a presentation attribute clip-path can be used as a\n CSS property.You can use this attribute with the following\n SVG elements:An extra information to tell how a <basic-shape>\n is applied to an element: fill-box indicates to use the\n object bounding box; stroke-box indicates to use the object\n bounding box extended with the stroke; view-box indicates\n to use the nearest SVG viewport as the reference box.Note:\n For more details on the clip-path syntax, see the CSS\n property clip-path reference page.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "colorInterpolation": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation attribute specifies the color space for\n gradient interpolations, color animations, and alpha compositing.Note:\n For filter effects, the color-interpolation-filters property\n controls which color space is used.The color-interpolation\n property chooses between color operations occurring in\n the sRGB color space or in a (light energy linear) linearized\n RGB color space. Having chosen the appropriate color space,\n component-wise linear interpolation is used.When a child\n element is blended into a background, the value of the\n color-interpolation property on the child determines the\n type of blending, not the value of the color-interpolation\n on the parent. For gradients which make use of the href\n or the deprecated xlink:href attribute to reference another\n gradient, the gradient uses the property's value from\n the gradient element which is directly referenced by the\n fill or stroke property. When animating colors, color\n interpolation is performed according to the value of the\n color-interpolation property on the element being animated.Note:\n As a presentation attribute, color-interpolation can be\n used as a CSS property.You can use this attribute with\n the following SVG elements:Indicates that the user agent\n can choose either the sRGB or linearRGB spaces for color\n interpolation. This option indicates that the author doesn't\n require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "direction": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The direction attribute specifies the inline-base direction of\n a <text> or <tspan> element. It defines the start and\n end points of a line of text as used by the text-anchor\n and inline-size properties. It also may affect the direction\n in which characters are positioned if the unicode-bidi\n property's value is either embed or bidi-override.It applies\n only to glyphs oriented perpendicular to the inline-base\n direction, which includes the usual case of horizontally-oriented\n Latin or Arabic text and the case of narrow-cell Latin\n or Arabic characters rotated 90 degrees clockwise relative\n to a top-to-bottom inline-base direction.In many cases,\n the bidirectional Unicode algorithm produces the desired\n result automatically, so this attribute doesn't need to\n be specified in those cases. For other cases, such as\n when using right-to-left languages, it may be sufficient\n to add the direction attribute to the outermost <svg>\n element, and allow that direction to inherit to all text\n elements:Note: As a presentation attribute, direction\n can be used as a CSS property. See css direction for further\n information.You can use this attribute with the following\n SVG elements:BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "dominantBaseline": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The dominant-baseline attribute specifies the dominant baseline,\n which is the baseline used to align the box's text and\n inline-level contents. It also indicates the default alignment\n baseline of any boxes participating in baseline alignment\n in the box's alignment context.It is used to determine\n or re-determine a scaled-baseline-table. A scaled-baseline-table\n is a compound value with three components:Some values\n of the property re-determine all three values. Others\n only re-establish the baseline-table font-size. When the\n initial value, auto, would give an undesired result, this\n property can be used to explicitly set the desired scaled-baseline-table.If\n there is no baseline table in the nominal font, or if\n the baseline table lacks an entry for the desired baseline,\n then the browser may use heuristics to determine the position\n of the desired baseline.Note: As a presentation attribute,\n dominant-baseline can be used as a CSS property.You can\n use this attribute with the following SVG elements:If\n this property occurs on a <text> element, then the computed\n value depends on the value of the writing-mode attribute.If\n the writing-mode is horizontal, then the value of the\n dominant-baseline component is alphabetic. Otherwise,\n if the writing-mode is vertical, then the value of the\n dominant-baseline component is central.If this property\n occurs on a <tspan>, <tref>, <altGlyph>, or <textPath>\n element, then the dominant-baseline and the baseline-table\n components remain the same as those of the parent text\n content element.If the computed baseline-shift value actually\n shifts the baseline, then the baseline-table font-size\n component is set to the value of the font-size attribute\n on the element on which the dominant-baseline attribute\n occurs, otherwise the baseline-table font-size remains\n the same as that of the element.If there is no parent\n text content element, the scaled-baseline-table value\n is constructed as above for <text> elements.The dominant-baseline\n and the baseline-table components are set by determining\n the predominant script of the character data content.\n The writing-mode, whether horizontal or vertical, is used\n to select the appropriate set of baseline-tables and the\n dominant baseline is used to select the baseline-table\n that corresponds to that baseline. The baseline-table\n font-size component is set to the value of the font-size\n attribute on the element on which the dominant-baseline\n attribute occurs.The dominant-baseline, the baseline-table,\n and the baseline-table font-size remain the same as that\n of the parent text content element.The dominant-baseline\n and the baseline-table remain the same, but the baseline-table\n font-size is changed to the value of the font-size attribute\n on this element. This re-scales the baseline-table for\n the current font-size.The baseline-identifier for the\n dominant-baseline is set to be ideographic, the derived\n baseline-table is constructed using the ideographic baseline-table\n in the font, and the baseline-table font-size is changed\n to the value of the font-size attribute on this element.The\n baseline-identifier for the dominant-baseline is set to\n be alphabetic, the derived baseline-table is constructed\n using the alphabetic baseline-table in the font, and the\n baseline-table font-size is changed to the value of the\n font-size attribute on this element.The baseline-identifier\n for the dominant-baseline is set to be hanging, the derived\n baseline-table is constructed using the hanging baseline-table\n in the font, and the baseline-table font-size is changed\n to the value of the font-size attribute on this element.The\n baseline-identifier for the dominant-baseline is set to\n be mathematical, the derived baseline-table is constructed\n using the mathematical baseline-table in the font, and\n the baseline-table font-size is changed to the value of\n the font-size attribute on this element.The baseline-identifier\n for the dominant-baseline is set to be central. The derived\n baseline-table is constructed from the defined baselines\n in a baseline-table in the font. That font baseline-table\n is chosen using the following priority order of baseline-table\n names: ideographic, alphabetic, hanging, mathematical.\n The baseline-table font-size is changed to the value of\n the font-size attribute on this element.The baseline-identifier\n for the dominant-baseline is set to be middle. The derived\n baseline-table is constructed from the defined baselines\n in a baseline-table in the font. That font baseline-table\n is chosen using the following priority order of baseline-table\n names: alphabetic, ideographic, hanging, mathematical.\n The baseline-table font-size is changed to the value of\n the font-size attribute on this element.The baseline-identifier\n for the dominant-baseline is set to be text-after-edge.\n The derived baseline-table is constructed from the defined\n baselines in a baseline-table in the font. The choice\n of which font baseline-table to use from the baseline-tables\n in the font is browser dependent. The baseline-table font-size\n is changed to the value of the font-size attribute on\n this element.The baseline-identifier for the dominant-baseline\n is set to be text-before-edge. The derived baseline-table\n is constructed from the defined baselines in a baseline-table\n in the font. The choice of which baseline-table to use\n from the baseline-tables in the font is browser dependent.\n The baseline-table font-size is changed to the value of\n the font-size attribute on this element.This value uses\n the top of the em box as the baseline.BCD tables only\n load in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: Jul 8, 2022, by MDN contributors"
      },
      "dx": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The dx attribute indicates a shift along the x-axis on the position\n of an element or its content.You can use this attribute\n with the following SVG elements:Warning: As of SVG2 <altGlyph>\n is deprecated and shouldn't be used.For <altGlyph>, if\n it contains a single value, dx defines a shift along the\n x-axis for all alternate glyph.If there are multiple values,\n dx defines a shift along the x-axis for each individual\n glyph relative to the preceding glyph. If there are less\n values than glyphs, the remaining glyphs use a value of\n 0. If there are more values than glyphs, extra values\n are ignored.For <feDropShadow>, dx defines the x offset\n of the dropped shadow. The unit used to resolve the value\n of the attribute is set by the primitiveUnits attribute\n of the <filter> element.For <feOffset>, dx defines the\n x offset of the filter input graphic. The unit used to\n resolve the value of the attribute is set by the primitiveUnits\n attribute of the <filter> element.Warning: As of SVG2\n <glyphRef> is deprecated and shouldn't be used.For <glyphRef>,\n dx defines the x offset of the glyph, in the font metric\n system.For <text>, if it contains a single value, dx defines\n a shift along the x-axis for all glyphs.If there are multiple\n values, dx defines a shift along the x-axis for each individual\n glyph relative to the preceding glyph. If there are less\n values than glyphs, the remaining glyphs use a value of\n 0. If there are more values than glyphs, extra values\n are ignored.Warning: As of SVG2 <tref> is deprecated and\n shouldn't be used.For <tref>, if it contains a single\n value, dx defines a shift along the x-axis for all glyphs.If\n there are multiple values, dx defines a shift along the\n x-axis for each individual glyph relative to the preceding\n glyph. If there are less values than glyphs, the remaining\n glyphs use a value of 0. If there are more values than\n glyphs, extra values are ignored.For <tspan>, if it contains\n a single value, dx defines a shift along the x-axis for\n all alternate glyph.If there are multiple values, dx defines\n a shift along the x-axis for each individual glyph relative\n to the preceding glyph. If there are less values than\n glyphs, the remaining glyphs use a value of 0. If there\n are more values than glyphs, extra values are ignored.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "dy": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The dy attribute indicates a shift along the y-axis on the position\n of an element or its content.You can use this attribute\n with the following SVG elements:Warning: As of SVG2 <altGlyph>\n is deprecated and shouldn't be used.For <altGlyph>, if\n it contains a single value, dy defines a shift along the\n y-axis for all alternate glyph.If there are multiple values,\n dy defines a shift along the y-axis for each individual\n glyph relative to the preceding glyph. If there are less\n values than glyphs, the remaining glyphs use a value of\n 0. If there are more values than glyphs, extra values\n are ignored.For <feDropShadow>, dy defines the y offset\n of the dropped shadow. The unit used to resolve the value\n of the attribute is set by the primitiveUnits attribute\n of the <filter> element.For <feOffset>, dy defines the\n y offset of the filter input graphic. The unit used to\n resolve the value of the attribute is set by the primitiveUnits\n attribute of the <filter> element.Warning: As of SVG2\n <glyphRef> is deprecated and shouldn't be used.For <glyphRef>,\n dy defines the y offset of the glyph, in the font metric\n system.For <text>, if it contains a single value, dy defines\n a shift along the y-axis for all glyphs.If there are multiple\n values, dy defines a shift along the y-axis for each individual\n glyph relative to the preceding glyph. If there are less\n values than glyphs, the remaining glyphs use a value of\n 0. If there are more values than glyphs, extra values\n are ignored.Warning: As of SVG2 <tref> is deprecated and\n shouldn't be used.For <tref>, if it contains a single\n value, dy defines a shift along the y-axis for all glyphs.If\n there are multiple values, dy defines a shift along the\n y-axis for each individual glyph relative to the preceding\n glyph. If there are less values than glyphs, the remaining\n glyphs use a value of 0. If there are more values than\n glyphs, extra values are ignored.For <tspan>, if it contains\n a single value, dy defines a shift along the y-axis for\n all alternate glyph.If there are multiple values, dy defines\n a shift along the y-axis for each individual glyph relative\n to the preceding glyph. If there are less values than\n glyphs, the remaining glyphs use a value of 0. If there\n are more values than glyphs, extra values are ignored.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "fillOpacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The fill-opacity attribute is a presentation attribute defining\n the opacity of the paint server (color, gradient, pattern,\n etc) applied to a shape.Note: As a presentation attribute\n fill-opacity can be used as a CSS property.You can use\n this attribute with the following SVG elements:Note: SVG2\n introduces percentage values for fill-opacity, however,\n it is not widely supported yet (See Browser compatibility\n below) as a consequence, it is best practices to set opacity\n with a value in the range [0-1].BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "fillRule": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"evenodd\"",
              "computed": false
            },
            {
              "value": "\"inherit\"",
              "computed": false
            },
            {
              "value": "\"nonzero\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The fill-rule attribute is a presentation attribute defining\n the algorithm to use to determine the inside part of a\n shape.Note: As a presentation attribute, fill-rule can\n be used as a CSS property.You can use this attribute with\n the following SVG elements:The fill-rule attribute provides\n two options for how the inside (that is, the area to be\n filled) of a shape is determined:The value nonzero determines\n the \"insideness\" of a point in the shape by drawing a\n ray from that point to infinity in any direction, and\n then examining the places where a segment of the shape\n crosses the ray. Starting with a count of zero, add one\n each time a path segment crosses the ray from left to\n right and subtract one each time a path segment crosses\n the ray from right to left. After counting the crossings,\n if the result is zero then the point is outside the path.\n Otherwise, it is inside.The value evenodd determines the\n \"insideness\" of a point in the shape by drawing a ray\n from that point to infinity in any direction and counting\n the number of path segments from the given shape that\n the ray crosses. If this number is odd, the point is inside;\n if even, the point is outside.BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "fontFamily": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The font-family attribute indicates which font family will be\n used to render the text, specified as a prioritized list\n of font family names and/or generic family names.Note:\n As a presentation attribute, font-family can be used as\n a CSS property. See the css font-family property for more\n information.You can use this attribute with the following\n SVG elements:For a description of the values, please refer\n to the CSS font-family property.BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 17, 2022, by MDN contributors"
      },
      "fontSize": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The font-size attribute refers to the size of the font from baseline\n to baseline when multiple lines of text are set solid\n in a multiline layout environment.Note: As a presentation\n attribute, font-size can be used as a CSS property. See\n the css font-size property for more information.You can\n use this attribute with the following SVG elements:For\n a description of the values, please refer to the CSS font-size\n property.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 17, 2022, by MDN contributors"
      },
      "fontSizeAdjust": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The font-size-adjust attribute allows authors to specify an aspect\n value for an element that will preserve the x-height of\n the first choice font in a substitute font.Note: As a\n presentation attribute, font-size-adjust can be used as\n a CSS property. See the css font-size-adjust property\n for more information.You can use this attribute with the\n following SVG elements:Choose the size of the font based\n only on the font-size property.Choose the size of the\n font so that its lowercase letters (as determined by the\n x-height of the font) are the specified number times the\n font-size.The number specified should generally be the\n aspect ratio (ratio of x-height to font size) of the first\n choice font-family. This means that the first-choice font,\n when available, will appear the same size in browsers,\n whether or not they support font-size-adjust.0 yields\n text of zero height (hidden text).BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "fontStretch": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The font-stretch attribute indicates the desired amount of condensing\n or expansion in the glyphs used to render the text.Note:\n As a presentation attribute, font-stretch can be used\n as a CSS property. See the css font-stretch property for\n more information.You can use this attribute with the following\n SVG elements:BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "fontStyle": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The font-style attribute specifies whether the text is to be\n rendered using a normal, italic, or oblique face.Note:\n As a presentation attribute, font-style can be used as\n a CSS property. See the css font-style property for more\n information.You can use this attribute with the following\n SVG elements:For a description of the values, please refer\n to the CSS font-style property.BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 17, 2022, by MDN contributors"
      },
      "fontVariant": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The font-variant attribute indicates whether the text is to be\n rendered using variations of the font's glyphs.Note: As\n a presentation attribute, font-variant can be used as\n a CSS property. See the css font-variant property for\n more information.You can use this attribute with the following\n SVG elements:\n          normal | none | [\n          <common-lig-values>\n ||\n          <discretionary-lig-values> ||\n          <historical-lig-values>\n ||\n          <contextual-alt-values> ||\n          stylistic(\n <feature-value-name> ) ||\n          historical-forms ||\n\n          styleset( <feature-value-name># ) ||\n       \n   character-variant( <feature-value-name># ) ||\n     \n     swash( <feature-value-name> ) ||\n          ornaments(\n <feature-value-name> ) ||\n          annotation( <feature-value-name>\n ) || [\n          small-caps | all-small-caps |\n      \n    petite-caps | all-petite-caps |\n          unicase |\n titling-caps ] ||\n          <numeric-figure-values> ||\n\n          <numeric-spacing-values> ||\n          <numeric-fraction-values>\n || ordinal ||\n          slashed-zero ||\n          <east-asian-variant-values>\n ||\n          <east-asian-width-values> || ruby ]\n    \n    For a description of the values, please refer to the\n CSS font-variant property.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 17, 2022, by MDN contributors"
      },
      "fontWeight": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The font-weight attribute refers to the boldness or lightness\n of the glyphs used to render the text, relative to other\n fonts in the same font family.Note: As a presentation\n attribute, font-weight can be used as a CSS property.\n See the css font-weight property for more information.You\n can use this attribute with the following SVG elements:For\n a description of the values, please refer to the CSS font-weight\n property.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 17, 2022, by MDN contributors"
      },
      "glyphOrientationHorizontal": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The glyph-orientation-horizontal\n attribute affects the amount that the current text position\n advances as each glyph is rendered.When the reference\n orientation direction is horizontal and the glyph-orientation-horizontal\n results in an orientation angle that is a multiple of\n 180 degrees, then the current text position is incremented\n according to the horizontal metrics of the glyph. Otherwise,\n if the value of this attribute is not a multiple of 180\n degrees, then the current text position is incremented\n according to the vertical metrics of the glyph.This attribute\n is applied only to text written in a horizontal writing-mode.Note:\n As a presentation attribute, glyph-orientation-horizontal\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:\n      The value of the\n angle is restricted to 0, 90, 180, and 270 degrees. If\n another angle is specified, it is rounded to the closest\n of the permitted values.\n      A value of 0deg indicates\n that all glyphs are set with the top of the glyphs oriented\n towards the reference orientation. A value of 90deg indicates\n an orientation of 90 degrees clockwise from the reference\n orientation.\n    BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "glyphOrientationVertical": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The glyph-orientation-vertical\n attribute affects the amount that hte current text position\n advances as each glyph is rendered.When the inline-progression-direction\n is vertical and the glyph-orientation-vertical results\n in an orientation angle that is a multiple of 180 degrees,\n then the current text position is incremented according\n to the vertical metrics of the glyph. Otherwise, if the\n angle is not a multiple of 180 degrees, then the current\n text position is incremented according to the horizontal\n metrics of the glyph.This attribute is applied only to\n text written in a vertical writing-mode.Note: As a presentation\n attribute, glyph-orientation-vertical can be used as a\n CSS property.You can use this attribute with the following\n SVG elements:Fullwidth ideographic and fullwidth Latin\n text will be set with a glyph orientation of 0 degrees.\n Ideographic punctuation and other ideographic characters\n having alternate horizontal and vertical forms will use\n the vertical form of the glyph. Text which is not fullwidth\n will be set with a glyph orientation of 90 degrees.This\n reorientation rule applies only to the first-level non-ideographic\n text. All further embedding of writing modes or bidirectional\n processing will be based on the first-level rotation.Note:\n Text set in this \"rotated\" manner may contain ligatures\n or other glyph combining and reordering common to the\n language and script. (This presentation form does not\n disable auto-ligature formation or similar context-driven\n variations.)The determination of which characters should\n be auto-rotated may vary across user agents. The determination\n is based on a complex interaction between country, language,\n script, character properties, font, and character context.\n\n      The value of the angle is restricted to 0, 90, 180,\n and 270 degrees. If another angle is specified, it is\n rounded to the closest of the permitted values.\n     \n A value of 0deg indicates that all glyphs are set with\n the top of the glyphs oriented towards the reference orientation.\n A value of 90deg indicates an orientation of 90 degrees\n clockwise from the reference orientation.\n    BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "kerning": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The kerning attribute indicates\n whether the spacing between glyphs should be adjusted\n based on kerning tables that are included in the relevant\n font (i.e., enable auto-kerning) or instead disable auto-kerning\n and set the spacing between them to a specific length\n (typically, zero).Note: As a presentation attribute kerning\n can be used as a CSS property. In CSS the property is\n called font-kerning, though.You can use this attribute\n with the following SVG elements:This value indicates that\n the spacing between glyphs is adjusted based on kerning\n tables that are included in the font that will be used.If\n a length is provided, then auto-kerning is disabled. Instead,\n inter-character spacing is set to the given length.If\n a length is provided without a unit identifier (e.g.,\n an unqualified number such as 128), the length is processed\n as a width value in the current user coordinate system.\n If a unit identifier (e.g., 0.25em or 1%) is provided,\n then the length is converted into a corresponding value\n in the current user coordinate system.The most common\n scenario, other than auto, is to set kerning to a value\n of 0 so that auto-kerning is disabled.The given length\n is added to the inter-character spacing value specified\n by the letter-spacing attribute.BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: Feb 4, 2022, by MDN contributors"
      },
      "lengthAdjust": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The lengthAdjust attribute controls how the text is stretched\n into the length defined by the textLength attribute.You\n can use this attribute with the following SVG elements:BCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "letterSpacing": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The letter-spacing attribute controls spacing between text characters,\n in addition to any spacing from the kerning attribute.If\n the attribute value is a unitless number (like 128), the\n browser processes it as a <length> in the current user\n coordinate system.If the attribute value has a unit identifier,\n such as .25em or 1%, then the browser converts the <length>\n into its corresponding value in the current user coordinate\n system.Note: As a presentation attribute, letter-spacing\n can be used as a CSS property. See the css letter-spacing\n property for more information.You can use this attribute\n with the following SVG elements:For a description of the\n values, please refer to the CSS letter-spacing property.BCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "mask": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The mask attribute is a presentation attribute mainly used to\n bind a given <mask> element with the element the attribute\n belongs to.Note: As a presentation attribute mask can\n be used as a CSS property.You can use this attribute with\n the following SVG elements:Since SVG2, the mask attribute\n is defined as a css property and is a shorthand for many\n other properties: mask-image, mask-mode, mask-repeat,\n mask-position, mask-clip, mask-origin, mask-size, and\n mask-composite.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "opacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The opacity attribute specifies the transparency of an object\n or of a group of objects, that is, the degree to which\n the background behind the element is overlaid.Note: As\n a presentation attribute, opacity can be used as a CSS\n property. See the css opacity property for more information.You\n can use this attribute with the following SVG elements:The\n uniform opacity setting to be applied across an entire\n object, as a <number>. Any values outside the range 0.0\n (fully transparent) to 1.0 (fully opaque) will be clamped\n to this range.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "overflow": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The overflow attribute sets what to do when an element's content\n is too big to fit in its block formatting context. This\n feature is not widely implemented yet.This attribute has\n the same parameter values and meaning as the css overflow\n property, however, the following additional points apply:Note:\n Although the initial value for overflow is auto, it is\n overwritten in the User Agent style sheet for the <svg>\n element when it is not the root element of a stand-alone\n document, the <pattern> element, and the <marker> element\n to be hidden by default.Note: As a presentation attribute,\n overflow can be used as a CSS property. See the CSS overflow\n property for more information.You can use this attribute\n with the following SVG elements:For a description of the\n values, please see the css overflow property.BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "paintOrder": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The paint-order attribute specifies the order that the fill,\n stroke, and markers of a given shape or text element are\n painted.Note: As a presentation attribute, paint-order\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:This value indicates that\n the fill will be painted first, then the stroke, and finally\n the markers.The order of these three keywords indicates\n the order in which the painting happens, from left to\n right. If any of the three painting components is omitted,\n they will be painted in their default order after the\n specified components. For example, using stroke is equivalent\n to stroke fill markers.The example would be rendered as\n follows:\n  \nThe stroke under effect could be achieved\n via the following CSS property:BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "pointerEvents": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The pointer-events attribute is a presentation attribute that\n allows defining whether or when an element may be the\n target of a mouse event.Note: As a presentation attribute\n pointer-events can be used as a CSS property.You can use\n this attribute with the following SVG elements:For a detailed\n explanation of each possible value, have a look at the\n CSS pointer-events documentation.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "requiredFeatures": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The requiredFeatures attribute\n takes a list of feature strings, with the individual strings\n separated by white space. It determines whether or not\n all of the named features are supported by the browser;\n if all of them are supported, the attribute evaluates\n to true end the element is rendered; otherwise, the attribute\n evaluates to false and the current element and its children\n are skipped and thus will not be rendered. This provides\n a way to design SVG that gracefully falls back when features\n aren't available.If the attribute is not present, then\n its implicit evaluated value is true. If a null string\n or empty string value is given to attribute requiredFeatures,\n the attribute is evaluate to false.requiredFeatures is\n often used in conjunction with the <switch> element. If\n requiredFeatures is used in other situations, it represents\n a simple switch on the given element whether to render\n the element or not.To detect availability of an SVG feature\n from script, there is the (also deprecated) DOMImplementation.hasFeature()\n method.You can use this attribute with the following SVG\n elements:This is a list of feature strings, separated\n using white space. Determines whether all of the named\n features are supported by the browser. See Feature strings\n below for a list of allowed values.The following are the\n feature strings for the requiredFeatures attribute. These\n same feature strings apply to the hasFeature method call\n that is part of the SVG DOM's support for the DOMImplementation\n interface. In some cases the feature strings map directly\n to a set of attributes, properties or elements, in others\n they represent some functionality of the browser. Note\n that the format and naming for feature strings changed\n from SVG 1.0 to SVG 1.1. The SVG 1.0 feature strings are\n not listed here but can be found in the SVG Specification.\n Some browser support SVG 1.0 Feature strings for compatibility\n reasons. However, the SVG 1.0 feature strings are considered\n deprecated.At least one of the following feature is supported:At\n least one of the following feature is supported:The browser\n supports all the following features:The browser supports\n all of the DOM interfaces and methods that correspond\n to the language features for http://www.w3.org/TR/SVG11/feature#SVG-static.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-static\n plus the feature http://www.w3.org/TR/SVG11/feature#Animation.The\n browser supports all of the DOM interfaces and methods\n that correspond to the language features for http://www.w3.org/TR/SVG11/feature#SVG-animation.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-animation\n plus the following features:The browser supports all of\n the DOM interfaces and methods that correspond to the\n language features for http://www.w3.org/TR/SVG11/feature#SVG-dynamic.The\n browser supports the id, xml:base, xml:lang and xml:space\n attributesThe browser supports <svg>, <g>, <defs>, <desc>,\n <title>, <metadata>, <symbol> and <use> elements.The browser\n supports <svg>, <g>, <defs>, <desc>, <title>, <metadata>\n and <use> elements.The browser supports the enable-background\n attributeThe browser supports the <switch> element, and\n the requiredFeatures, requiredExtensions, systemLanguage\n attributesThe browser supports the <image> element.The\n browser supports the <style> element.The browser supports\n the clip and overflow attributes.The browser supports\n the <rect>, <circle>, <line>, <polyline>, <polygon>, <ellipse>\n and <path> elements.The browser supports the <text>, <tspan>,\n <tref>, <textPath>, <altGlyph>, <altGlyphDef>, <altGlyphItem>\n and <glyphRef> elements.The browser supports the <text>\n elementThe browser supports the color, fill, fill-rule,\n stroke, stroke-dasharray, stroke-dashoffset, stroke-linecap,\n stroke-linejoin, stroke-miterlimit, stroke-width, color-interpolation\n and color-rendering attributesThe browser supports the\n color, fill, fill-rule, stroke, stroke-dasharray, stroke-dashoffset,\n stroke-linecap, stroke-linejoin, stroke-miterlimit, stroke-width\n and color-rendering attributesThe browser supports the\n opacity, stroke-opacity and fill-opacity attributesThe\n browser supports the display, image-rendering, pointer-events,\n shape-rendering, text-rendering and visibility attributesThe\n browser supports the display and visibility attributesThe\n browser supports the <marker> elementThe browser supports\n the <linearGradient>, <radialGradient> and <stop> elementsThe\n browser supports the <pattern> elementThe browser supports\n the <clipPath> element and the clip-path, clip-rule attributesThe\n browser supports the <clipPath> element and the clip-path\n attributeThe browser supports the <mask> elementThe browser\n supports the <filter>, <feBlend>, <feColorMatrix>, <feComponentTransfer>,\n <feComposite>, <feConvolveMatrix>, <feDiffuseLighting>,\n <feDisplacementMap>, <feFlood>, <feGaussianBlur>, <feImage>,\n <feMerge>, <feMergeNode>, <feMorphology>, <feOffset>,\n <feSpecularLighting>, <feTile>, <feDistantLight>, <fePointLight>,\n <feSpotLight>, <feFuncR>, <feFuncG>, <feFuncB> and <feFuncA>\n elementsThe browser supports the <filter>, <feBlend>,\n <feColorMatrix>, <feComponentTransfer>, <feComposite>,\n <feFlood>, <feGaussianBlur>, <feImage>, <feMerge>, <feMergeNode>,\n <feOffset>, <feTile>, <feFuncR>, <feFuncG>, <feFuncB>\n and <feFuncA> elementsThe browser supports the onunload,\n onabort, onerror, onresize, onscroll and onzoom attributesThe\n browser supports the onfocusin, onfocusout, onactivate,\n onclick, onmousedown, onmouseup, onmouseover, onmousemove,\n onmouseout and onload attributesThe browser supports the\n onbegin, onend, onrepeat and onload attributesThe browser\n supports the <cursor> elementThe browser supports the\n <a> elementThe browser supports the xlink:type, xlink:href,\n xlink:role, xlink:arcrole, xlink:title, xlink:show and\n xlink:actuate attributesThe browser supports the <view>\n elementThe browser supports the <script> elementThe browser\n supports the <animate>, <set>, <animateMotion>, <animateTransform>,\n <animateColor> and <mpath> elementsThe browser supports\n the <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <vkern>, <font-face-src>, <font-face-uri>, <font-face-format>\n and <font-face-name> elementsThe browser supports the\n <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <font-face-src> and <font-face-name> elementsThe browser\n supports the <foreignObject> elementSee also requiredFeatures.svgBCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "stroke": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "stroke color"
      },
      "strokeDasharray": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-dasharray attribute is a presentation attribute defining\n the pattern of dashes and gaps used to paint the outline\n of the shape;Note: As a presentation attribute, stroke-dasharray\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:A list of comma and/or\n white space separated <length>s and <percentage>s that\n specify the lengths of alternating dashes and gaps.If\n an odd number of values is provided, then the list of\n values is repeated to yield an even number of values.\n Thus, 5,3,2 is equivalent to 5,3,2,5,3,2.BCD tables only\n load in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "strokeDashoffset": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-dashoffset attribute is a presentation attribute defining\n an offset on the rendering of the associated dash array.Note:\n As a presentation attribute stroke-dashoffset can be used\n as a CSS property.You can use this attribute with the\n following SVG elements:The offset is usually expressed\n in user units resolved against the pathLength but if a\n <percentage> is used, the value is resolved as a percentage\n of the current viewport.BCD tables only load in the browser\n with JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "strokeLinecap": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"butt\"",
              "computed": false
            },
            {
              "value": "\"inherit\"",
              "computed": false
            },
            {
              "value": "\"round\"",
              "computed": false
            },
            {
              "value": "\"square\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The stroke-linecap attribute is a presentation attribute defining\n the shape to be used at the end of open subpaths when\n they are stroked.Note: As a presentation attribute stroke-linecap\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:The butt value indicates\n that the stroke for each subpath does not extend beyond\n its two endpoints. On a zero length subpath, the path\n will not be rendered at all.The round value indicates\n that at the end of each subpath the stroke will be extended\n by a half circle with a diameter equal to the stroke width.\n On a zero length subpath, the stroke consists of a full\n circle centered at the subpath's point.The square value\n indicates that at the end of each subpath the stroke will\n be extended by a rectangle with a width equal to half\n the width of the stroke and a height equal to the width\n of the stroke. On a zero length subpath, the stroke consists\n of a square with its width equal to the stroke width,\n centered at the subpath's point.BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "strokeLinejoin": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"bevel\"",
              "computed": false
            },
            {
              "value": "\"inherit\"",
              "computed": false
            },
            {
              "value": "\"miter\"",
              "computed": false
            },
            {
              "value": "\"round\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The stroke-linejoin attribute is a presentation attribute defining\n the shape to be used at the corners of paths when they\n are stroked.Note: As a presentation attribute stroke-linejoin\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:Note: The arcs value as\n been introduced in SVG2 and it isn't widely supported\n yet, see Browser compatibility below for details.The arcs\n value indicates that an arcs corner is to be used to join\n path segments. The arcs shape is formed by extending the\n outer edges of the stroke at the join point with arcs\n that have the same curvature as the outer edges at the\n join point.The bevel value indicates that a bevelled corner\n is to be used to join path segments.The miter value indicates\n that a sharp corner is to be used to join path segments.\n The corner is formed by extending the outer edges of the\n stroke at the tangents of the path segments until they\n intersect.Note: If the stroke-miterlimit is exceeded,\n the line join falls back to bevel.Note: the miter-clip\n value as been introduced in SVG2 and it isn't widely supported\n yet, see Browser compatibility below for details.The miter-clip\n value indicates that a sharp corner is to be used to join\n path segments. The corner is formed by extending the outer\n edges of the stroke at the tangents of the path segments\n until they intersect.If the stroke-miterlimit is exceeded,\n the miter is clipped at a distance equal to half the stroke-miterlimit\n value multiplied by the stroke width from the intersection\n of the path segments. This provides a better rendering\n than miter on very sharp join or in case of an animation.The\n round value indicates that a round corner is to be used\n to join path segments.BCD tables only load in the browser\n with JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "strokeMiterlimit": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-miterlimit attribute is a presentation attribute defining\n a limit on the ratio of the miter length to the stroke-width\n used to draw a miter join. When the limit is exceeded,\n the join is converted from a miter to a bevel.Note: As\n a presentation attribute stroke-miterlimit can be used\n as a CSS property.You can use this attribute with the\n following SVG elements:When two line segments meet at\n a sharp angle and miter joins have been specified for\n stroke-linejoin, it is possible for the miter to extend\n far beyond the thickness of the line stroking the path.\n The stroke-miterlimit ratio is used to define when the\n limit is exceeded, if so the join is converted from a\n miter to a bevel.The ratio of miter length (distance between\n the outer tip and the inner corner of the miter) to stroke-width\n is directly related to the angle (theta) between the segments\n in user space by the formula:\n  \n    \n      stroke-miterlimit\n\n      =\n      \n        \n          miterLength\n        \n\n        \n          stroke-width\n        \n      \n      =\n\n      \n        \n          1\n        \n        \n        \n  \n            sin\n            \n              (\n      \n        \n                \n                  \u03b8\n        \n        \n                \n                  2\n        \n        \n              \n              )\n            \n \n         \n        \n      \n    \n  \nFor example, a miter\n limit of 1.414 converts miters to bevels for theta less\n than 90 degrees, a limit of 4.0 converts them for theta\n less than approximately 29 degrees, and a limit of 10.0\n converts them for theta less than approximately 11.5 degrees.The\n value of stroke-miterlimit must be greater than or equal\n to 1.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "strokeOpacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-opacity attribute is a presentation attribute defining\n the opacity of the paint server (color, gradient, pattern,\n etc) applied to the stroke of a shape.Note: As a presentation\n attribute stroke-opacity can be used as a CSS property.You\n can use this attribute with the following SVG elements:Note:\n SVG2 introduces percentage values for stroke-opacity,\n however, it is not widely supported yet (See Browser compatibility\n below) as a consequence, it is best practices to set opacity\n with a value in the range [0-1].It's important to know\n that the stroke partially covers the fill of a shape,\n so a stroke with an opacity different than 1 will partially\n show the fill underneath. To avoid this effect, it is\n possible to apply a global opacity with the opacity attribute\n or to put the stroke behind the fill with the paint-order\n attribute.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "strokeWidth": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-width attribute is a presentation attribute defining\n the width of the stroke to be applied to the shape.You\n can use this attribute with the following SVG elements:Note:\n A percentage value is always computed as a percentage\n of the normalized viewBox diagonal length.BCD tables only\n load in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "systemLanguage": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The systemLanguage attribute represents a list of supported language\n tags. This list is matched against the language defined\n in the user preferences.You can use this attribute with\n the following SVG elements:The value is a set of comma-separated\n tokens, each of which must be a language tag, as defined\n in RFC 5646: Tags for Identifying Languages (also known\n as BCP 47).systemLanguage is often used in conjunction\n with the <switch> element. If the attribute is used in\n other situations, then it represents a simple switch on\n the given element whether to render the element or not.Note:\n If several alternative language objects are enclosed in\n a <switch> and none of them matches, this may lead to\n situations where no content is displayed. It is thus recommended\n to include a \"catch-all\" choice at the end of such a <switch>\n which is acceptable in all cases.The attribute evaluates\n to \"true\" if one of the language tags indicated by user\n preferences is a case-insensitive match or prefix (followed\n by a \"-\") of one of the language tags given in the value\n of this parameter. Otherwise it evaluates to \"false\".Note:\n The prefix matching rule does not imply that if a user\n understands a language with a certain tag, that the user\n will also understand all languages with the tag as prefix.If\n the attribute is not present, then it implicitly evaluates\n to \"true\". If a null string or empty string value is given,\n the attribute evaluates to \"false\".The prefix rule allows\n the use of prefix tags if this is the case.Multiple languages\n may be listed for content that is intended for multiple\n audiences. For example, content that is presented simultaneously\n in the original Maori and English versions, would call\n for:However, just because multiple languages are present\n within the object on which the systemLanguage test attribute\n is placed, this does not mean that it is intended for\n multiple linguistic audiences. An example would be a beginner's\n language primer, such as \"A First Lesson in Latin,\" which\n is clearly intended to be used by an English-literate\n audience. In this case, the attribute should only include\n en.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "textAnchor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The text-anchor attribute is used to align (start-, middle- or\n end-alignment) a string of pre-formatted text or auto-wrapped\n text where the wrapping area is determined from the inline-size\n property relative to a given point.This attribute is not\n applicable to other types of auto-wrapped text. For those\n cases you should use text-align. For multi-line text,\n the alignment takes place for each line.The text-anchor\n attribute is applied to each individual text chunk within\n a given <text> element. Each text chunk has an initial\n current text position, which represents the point in the\n user coordinate system resulting from (depending on context)\n application of the x and y attributes on the <text> element,\n any x or y attribute values on a <tspan>, <tref> or <altGlyph>\n element assigned explicitly to the first rendered character\n in a text chunk, or determination of the initial current\n text position for a <textPath> element.Note: As a presentation\n attribute, text-anchor can be used as a CSS property.You\n can use this attribute with the following SVG elements:The\n rendered characters are aligned such that the start of\n the text string is at the initial current text position.\n For an element with a direction property value of ltr\n (typical for most European languages), the left side of\n the text is rendered at the initial text position. For\n an element with a direction property value of rtl (typical\n for Arabic and Hebrew), the right side of the text is\n rendered at the initial text position. For an element\n with a vertical primary text direction (often typical\n for Asian text), the top side of the text is rendered\n at the initial text position.The rendered characters are\n aligned such that the middle of the text string is at\n the current text position. (For text on a path, conceptually\n the text string is first laid out in a straight line.\n The midpoint between the start of the text string and\n the end of the text string is determined. Then, the text\n string is mapped onto the path with this midpoint placed\n at the current text position.)The rendered characters\n are shifted such that the end of the resulting rendered\n text (final current text position before applying the\n text-anchor property) is at the initial current text position.\n For an element with a direction property value of ltr\n (typical for most European languages), the right side\n of the text is rendered at the initial text position.\n For an element with a direction property value of rtl\n (typical for Arabic and Hebrew), the left side of the\n text is rendered at the initial text position. For an\n element with a vertical primary text direction (often\n typical for Asian text), the bottom of the text is rendered\n at the initial text position.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "textDecoration": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The text-decoration attribute defines whether text is decorated\n with an underline, overline and/or strike-through. It\n is a shorthand for the text-decoration-line and text-decoration-style\n properties.The fill and stroke of the text decoration\n are given by the fill and stroke of the text at the point\n where the text decoration is declared.The paint order\n of the text decoration, i.e. the fill and stroke, is determined\n by the value of the paint-order attribute at the point\n where the text decoration is declared.Note: As a presentation\n attribute, text-decoration can be used as a CSS property.\n See the css text-decoration property for more information.You\n can use this attribute with the following SVG elements:For\n a description of the values, please refer to the CSS text-decoration\n property.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "textRendering": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The text-rendering attribute provides hints to the renderer about\n what tradeoffs to make when rendering text.Note: As a\n presentation attribute, text-rendering can be used as\n a CSS property. See the css text-rendering property for\n more information.You can use this attribute with the following\n SVG elements:This value indicates that the user agent\n shall make appropriate tradeoffs to balance speed, legibility\n and geometric precision, but with legibility given more\n importance than speed and geometric precision.This value\n indicates that the user agent shall emphasize rendering\n speed over legibility and geometric precision. This option\n will sometimes cause some user agents to turn off text\n anti-aliasing.This value indicates that the user agent\n shall emphasize legibility over rendering speed and geometric\n precision. The user agent will often choose whether to\n apply anti-aliasing techniques, built-in font hinting\n or both to produce the most legible text.This value indicates\n that the user agent shall emphasize geometric precision\n over legibility and rendering speed. This option will\n usually cause the user agent to suspend the use of hinting\n so that glyph outlines are drawn with comparable geometric\n precision to the rendering of path data.BCD tables only\n load in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "textLength": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The textLength attribute, available on SVG <text> and <tspan>\n elements, lets you specify the width of the space into\n which the text will draw. The user agent will ensure that\n the text does not extend farther than that distance, using\n the method or methods specified by the lengthAdjust attribute.\n By default, only the spacing between characters is adjusted,\n but the glyph size can also be adjusted if you change\n lengthAdjust.By using textLength, you can ensure that\n your SVG text displays at the same width regardless of\n conditions including web fonts failing to load (or not\n having loaded yet).You can use this attribute with the\n following SVG elements:This value specifies the width\n of the space the text will be adjusted to occupy as absolute\n length or percentage.A numeric value outlines a length\n referring to the units of the current coordinate system.Let's\n create a simple example that presents text you can resize\n using an <input> element of type \"range\".Let's start with\n the SVG. It's pretty basic, with a 1000-by-300 pixel space\n mapped into a 10 centimeter by 3 centimeter box.First,\n a <rect> element is used to create and stroke a rectangle\n to contain the text. Then <text> is used to create the\n text element itself, with an id of \"hello\".The HTML is\n also simple, with only two displayed elements contained\n inside a grouping <div>:The <input> element, of type \"range\",\n is used to create the slider control the user will manipulate\n to change the width of the text. A <span> element of ID\n \"widthDisplay\" is provided to display the current width\n value.Finally, let's have a look at the JavaScript code.\n It starts by stashing references to the elements it will\n need to access, using Document.getElementById():After\n fetching the element references, an EventListener is established\n by calling addEventListener() on the slider control, to\n receive any input events which occur. These events will\n be sent any time the slider's value changes, even if the\n user hasn't stopped moving it, so we can responsively\n adjust the text width.When an \"input\" event occurs, we\n call newValueSpecifiedUnits() to set the value of textLength\n to the slider's new value, using the SVGLength interface's\n SVG_LENGTHTYPE_PX unit type to indicate that the value\n represents pixels. Note that we have to dive into textLength\n to get its baseVal property; textLength is stored as an\n SVGLength object, so we can't treat it like a plain number.After\n updating the text width, the contents of the widthDisplay\n box are updated with the new value as well, and we're\n finished.Here's what the example looks like. Try dragging\n the slider around to get a feel for what it does.BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: Jul 8, 2022, by\n MDN contributors"
      },
      "unicodeBidi": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The unicode-bidi attribute specifies how the accumulation of\n the background image is managed.Note: As a presentation\n attribute, unicode-bidi can be used as a CSS property.\n See the CSS unicode-bidi property for more information.You\n can use this attribute with the following SVG elements:For\n a description of the values, please refer to the CSS unicode-bidi\n property.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "vectorEffect": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The vector-effect property specifies the vector effect to use\n when drawing an object. Vector effects are applied before\n any of the other compositing operations, i.e. filters,\n masks and clips.Note: As a presentation attribute, vector-effect\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:This value specifies that\n no vector effect shall be applied, i.e. the default rendering\n behavior is used which is to first fill the geometry of\n a shape with a specified paint, then stroke the outline\n with a specified paint.This value modifies the way an\n object is stroked. Normally stroking involves calculating\n stroke outline of the shape's path in current user coordinate\n system and filling that outline with the stroke paint\n (color or gradient). The resulting visual effect of this\n value is that the stroke width is not dependent on the\n transformations of the element (including non-uniform\n scaling and shear transformations) and zoom level.This\n value specifies a special user coordinate system used\n by the element and its descendants. The scale of that\n user coordinate system does not change in spite of any\n transformation changes from a host coordinate space. However,\n it does not specify the suppression of rotation and skew.\n Also, it does not specify the origin of the user coordinate\n system. Since this value suppresses scaling of the user\n coordinate system, it also has the characteristics of\n non-scaling-stroke.This value specifies a special user\n coordinate system used by the element and its descendants.\n The rotation and skew of that user coordinate system is\n suppressed in spite of any transformation changes from\n a host coordinate space. However, it does not specify\n the suppression of scaling. Also, it does not specify\n the origin of user coordinate system.This value specifies\n a special user coordinate system used by the element and\n its descendants. The position of user coordinate system\n is fixed in spite of any transformation changes from a\n host coordinate space. However, it does not specify the\n suppression of rotation, skew and scaling. When this vector\n effect and the transform property are defined at the same\n time, that property is consumed for this effect.BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "visibility": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The visibility attribute lets you control the visibility of graphical\n elements. With a value of hidden or collapse the current\n graphics element is invisible.Note: If the visibility\n attribute is set to hidden on a text element, then the\n text is invisible but still takes up space in text layout\n calculations.Depending on the value of attribute pointer-events,\n graphics elements which have their visibility attribute\n set to hidden still might receive events.Note: As a presentation\n attribute, visibility can be used as a CSS property. See\n the css visibility property for more information.You can\n use this attribute with the following SVG elements:The\n following example toggles the CSS visibility of the SVG\n image path.This value indicates that the element will\n be painted.This value indicates that the element will\n not be painted. Though it is still part of the rendering\n tree, i.e. it may receive pointer events depending on\n the pointer-events attribute, may receive focus depending\n on the tabindex attribute, contributes to bounding box\n calculations and clipping paths, and does affect text\n layout.This value is equal to hidden.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "wordSpacing": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The word-spacing attribute specifies spacing behavior between\n words.If a <length> is provided without a unit identifier\n (e.g. an unqualified number such as 128), the browser\n processes the <length> as a width value in the current\n user coordinate system.If a <length> is provided with\n one of the unit identifiers (e.g. .25em or 1%), then the\n browser converts the <length> into a corresponding value\n in the current user coordinate system.Note: As a presentation\n attribute, word-spacing can be used as a CSS property.\n See the css word-spacing property for more information.You\n can use this attribute with the following SVG elements:For\n a description of the values, please refer to the CSS letter-spacing\n property.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "writingMode": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The writing-mode attribute specifies whether the initial inline-progression-direction\n for a <text> element shall be left-to-right, right-to-left,\n or top-to-bottom. The writing-mode attribute applies only\n to <text> elements; the attribute is ignored for <tspan>,\n <tref>, <altGlyph> and <textPath> sub-elements. (Note\n that the inline-progression-direction can change within\n a <text> element due to the Unicode bidirectional algorithm\n and properties direction and unicode-bidi.)Note: As a\n presentation attribute, writing-mode can be used as a\n CSS property. See the CSS writing-mode property for more\n information.You can use this attribute with the following\n SVG elements:This value defines a top-to-bottom block\n flow direction. Both the writing mode and the typographic\n mode are horizontal.This value defines a right-to-left\n block flow direction. Both the writing mode and the typographic\n mode are vertical.This value defines a left-to-right block\n flow direction. Both the writing mode and the typographic\n mode are vertical.BCD tables only load in the browser\n with JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/TextPath.react.js": {
    "description": "TextPath is a wrapper for the <textPath> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/textPath",
    "displayName": "TextPath",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "alignmentBaseline": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The alignment-baseline attribute specifies how an object is aligned\n with respect to its parent. This property specifies which\n baseline of this element is to be aligned with the corresponding\n baseline of the parent. For example, this allows alphabetic\n baselines in Roman text to stay aligned across font size\n changes. It defaults to the baseline with the same name\n as the computed value of the alignment-baseline property.Note:\n As a presentation attribute alignment-baseline can be\n used as a CSS property.You can use this attribute with\n the following SVG elements:The value is the dominant-baseline\n of the script to which the character belongs - i.e., use\n the dominant-baseline of the parent.Uses the dominant\n baseline choice of the parent. Matches the box's corresponding\n baseline to that of its parent.The alignment-point of\n the object being aligned is aligned with the \"before-edge\"\n baseline of the parent text content element.Matches the\n bottom of the box to the top of the parent's content area.The\n alignment-point of the object being aligned is aligned\n with the \"text-before-edge\" baseline of the parent text\n content element.Note: This keyword may be mapped to text-top.Aligns\n the vertical midpoint of the box with the baseline of\n the parent box plus half the x-height of the parent.Matches\n the box's central baseline to the central baseline of\n its parent.The alignment-point of the object being aligned\n is aligned with the \"after-edge\" baseline of the parent\n text content element.Matches the top of the box to the\n top of the parent's content area.The alignment-point of\n the object being aligned is aligned with the \"text-after-edge\"\n baseline of the parent text content element.Note: This\n keyword may be mapped to text-bottom.Matches the box's\n ideographic character face under-side baseline to that\n of its parent.Matches the box's alphabetic baseline to\n that of its parent.The alignment-point of the object being\n aligned is aligned with the \"hanging\" baseline of the\n parent text content element.Matches the box's mathematical\n baseline to that of its parent.Aligns the top of the aligned\n subtree with the top of the line box.Aligns the center\n of the aligned subtree with the center of the line box.Aligns\n the bottom of the aligned subtree with the bottom of the\n line box.SVG 2 introduces some changes to the definition\n of this property. In particular: the values auto, before-edge,\n and after-edge have been removed. For backwards compatibility,\n text-before-edge may be mapped to text-top and text-after-edge\n to text-bottom. Neither text-before-edge nor text-after-edge\n should be used with the vertical-align property.For object\n alignment in other elements (such as <text>), see dominant-baseline.BCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "baselineShift": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The baseline-shift attribute allows repositioning of the dominant-baseline\n relative to the dominant-baseline of the parent text content\n element. The shifted object might be a sub- or superscript.Note:\n As a presentation attribute baseline-shift can be used\n as a CSS property.Note: This property is going to be deprecated\n and authors are advised to use vertical-align instead.You\n can use this attribute with the following SVG elements:The\n dominant-baseline is shifted to the default position for\n subscripts.The dominant-baseline is shifted to the default\n position for superscripts.A length value raises (positive\n value) or lowers (negative value) the dominant-baseline\n of the parent text content element by the specified length.A\n percentage value raises (positive value) or lowers (negative\n value) the dominant-baseline of the parent text content\n element by the specified percentage of the line-height.BCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "colorInterpolation": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation attribute specifies the color space for\n gradient interpolations, color animations, and alpha compositing.Note:\n For filter effects, the color-interpolation-filters property\n controls which color space is used.The color-interpolation\n property chooses between color operations occurring in\n the sRGB color space or in a (light energy linear) linearized\n RGB color space. Having chosen the appropriate color space,\n component-wise linear interpolation is used.When a child\n element is blended into a background, the value of the\n color-interpolation property on the child determines the\n type of blending, not the value of the color-interpolation\n on the parent. For gradients which make use of the href\n or the deprecated xlink:href attribute to reference another\n gradient, the gradient uses the property's value from\n the gradient element which is directly referenced by the\n fill or stroke property. When animating colors, color\n interpolation is performed according to the value of the\n color-interpolation property on the element being animated.Note:\n As a presentation attribute, color-interpolation can be\n used as a CSS property.You can use this attribute with\n the following SVG elements:Indicates that the user agent\n can choose either the sRGB or linearRGB spaces for color\n interpolation. This option indicates that the author doesn't\n require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "direction": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The direction attribute specifies the inline-base direction of\n a <text> or <tspan> element. It defines the start and\n end points of a line of text as used by the text-anchor\n and inline-size properties. It also may affect the direction\n in which characters are positioned if the unicode-bidi\n property's value is either embed or bidi-override.It applies\n only to glyphs oriented perpendicular to the inline-base\n direction, which includes the usual case of horizontally-oriented\n Latin or Arabic text and the case of narrow-cell Latin\n or Arabic characters rotated 90 degrees clockwise relative\n to a top-to-bottom inline-base direction.In many cases,\n the bidirectional Unicode algorithm produces the desired\n result automatically, so this attribute doesn't need to\n be specified in those cases. For other cases, such as\n when using right-to-left languages, it may be sufficient\n to add the direction attribute to the outermost <svg>\n element, and allow that direction to inherit to all text\n elements:Note: As a presentation attribute, direction\n can be used as a CSS property. See css direction for further\n information.You can use this attribute with the following\n SVG elements:BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "dominantBaseline": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The dominant-baseline attribute specifies the dominant baseline,\n which is the baseline used to align the box's text and\n inline-level contents. It also indicates the default alignment\n baseline of any boxes participating in baseline alignment\n in the box's alignment context.It is used to determine\n or re-determine a scaled-baseline-table. A scaled-baseline-table\n is a compound value with three components:Some values\n of the property re-determine all three values. Others\n only re-establish the baseline-table font-size. When the\n initial value, auto, would give an undesired result, this\n property can be used to explicitly set the desired scaled-baseline-table.If\n there is no baseline table in the nominal font, or if\n the baseline table lacks an entry for the desired baseline,\n then the browser may use heuristics to determine the position\n of the desired baseline.Note: As a presentation attribute,\n dominant-baseline can be used as a CSS property.You can\n use this attribute with the following SVG elements:If\n this property occurs on a <text> element, then the computed\n value depends on the value of the writing-mode attribute.If\n the writing-mode is horizontal, then the value of the\n dominant-baseline component is alphabetic. Otherwise,\n if the writing-mode is vertical, then the value of the\n dominant-baseline component is central.If this property\n occurs on a <tspan>, <tref>, <altGlyph>, or <textPath>\n element, then the dominant-baseline and the baseline-table\n components remain the same as those of the parent text\n content element.If the computed baseline-shift value actually\n shifts the baseline, then the baseline-table font-size\n component is set to the value of the font-size attribute\n on the element on which the dominant-baseline attribute\n occurs, otherwise the baseline-table font-size remains\n the same as that of the element.If there is no parent\n text content element, the scaled-baseline-table value\n is constructed as above for <text> elements.The dominant-baseline\n and the baseline-table components are set by determining\n the predominant script of the character data content.\n The writing-mode, whether horizontal or vertical, is used\n to select the appropriate set of baseline-tables and the\n dominant baseline is used to select the baseline-table\n that corresponds to that baseline. The baseline-table\n font-size component is set to the value of the font-size\n attribute on the element on which the dominant-baseline\n attribute occurs.The dominant-baseline, the baseline-table,\n and the baseline-table font-size remain the same as that\n of the parent text content element.The dominant-baseline\n and the baseline-table remain the same, but the baseline-table\n font-size is changed to the value of the font-size attribute\n on this element. This re-scales the baseline-table for\n the current font-size.The baseline-identifier for the\n dominant-baseline is set to be ideographic, the derived\n baseline-table is constructed using the ideographic baseline-table\n in the font, and the baseline-table font-size is changed\n to the value of the font-size attribute on this element.The\n baseline-identifier for the dominant-baseline is set to\n be alphabetic, the derived baseline-table is constructed\n using the alphabetic baseline-table in the font, and the\n baseline-table font-size is changed to the value of the\n font-size attribute on this element.The baseline-identifier\n for the dominant-baseline is set to be hanging, the derived\n baseline-table is constructed using the hanging baseline-table\n in the font, and the baseline-table font-size is changed\n to the value of the font-size attribute on this element.The\n baseline-identifier for the dominant-baseline is set to\n be mathematical, the derived baseline-table is constructed\n using the mathematical baseline-table in the font, and\n the baseline-table font-size is changed to the value of\n the font-size attribute on this element.The baseline-identifier\n for the dominant-baseline is set to be central. The derived\n baseline-table is constructed from the defined baselines\n in a baseline-table in the font. That font baseline-table\n is chosen using the following priority order of baseline-table\n names: ideographic, alphabetic, hanging, mathematical.\n The baseline-table font-size is changed to the value of\n the font-size attribute on this element.The baseline-identifier\n for the dominant-baseline is set to be middle. The derived\n baseline-table is constructed from the defined baselines\n in a baseline-table in the font. That font baseline-table\n is chosen using the following priority order of baseline-table\n names: alphabetic, ideographic, hanging, mathematical.\n The baseline-table font-size is changed to the value of\n the font-size attribute on this element.The baseline-identifier\n for the dominant-baseline is set to be text-after-edge.\n The derived baseline-table is constructed from the defined\n baselines in a baseline-table in the font. The choice\n of which font baseline-table to use from the baseline-tables\n in the font is browser dependent. The baseline-table font-size\n is changed to the value of the font-size attribute on\n this element.The baseline-identifier for the dominant-baseline\n is set to be text-before-edge. The derived baseline-table\n is constructed from the defined baselines in a baseline-table\n in the font. The choice of which baseline-table to use\n from the baseline-tables in the font is browser dependent.\n The baseline-table font-size is changed to the value of\n the font-size attribute on this element.This value uses\n the top of the em box as the baseline.BCD tables only\n load in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: Jul 8, 2022, by MDN contributors"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "fillOpacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The fill-opacity attribute is a presentation attribute defining\n the opacity of the paint server (color, gradient, pattern,\n etc) applied to a shape.Note: As a presentation attribute\n fill-opacity can be used as a CSS property.You can use\n this attribute with the following SVG elements:Note: SVG2\n introduces percentage values for fill-opacity, however,\n it is not widely supported yet (See Browser compatibility\n below) as a consequence, it is best practices to set opacity\n with a value in the range [0-1].BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "fillRule": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"evenodd\"",
              "computed": false
            },
            {
              "value": "\"inherit\"",
              "computed": false
            },
            {
              "value": "\"nonzero\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The fill-rule attribute is a presentation attribute defining\n the algorithm to use to determine the inside part of a\n shape.Note: As a presentation attribute, fill-rule can\n be used as a CSS property.You can use this attribute with\n the following SVG elements:The fill-rule attribute provides\n two options for how the inside (that is, the area to be\n filled) of a shape is determined:The value nonzero determines\n the \"insideness\" of a point in the shape by drawing a\n ray from that point to infinity in any direction, and\n then examining the places where a segment of the shape\n crosses the ray. Starting with a count of zero, add one\n each time a path segment crosses the ray from left to\n right and subtract one each time a path segment crosses\n the ray from right to left. After counting the crossings,\n if the result is zero then the point is outside the path.\n Otherwise, it is inside.The value evenodd determines the\n \"insideness\" of a point in the shape by drawing a ray\n from that point to infinity in any direction and counting\n the number of path segments from the given shape that\n the ray crosses. If this number is odd, the point is inside;\n if even, the point is outside.BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "fontFamily": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The font-family attribute indicates which font family will be\n used to render the text, specified as a prioritized list\n of font family names and/or generic family names.Note:\n As a presentation attribute, font-family can be used as\n a CSS property. See the css font-family property for more\n information.You can use this attribute with the following\n SVG elements:For a description of the values, please refer\n to the CSS font-family property.BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 17, 2022, by MDN contributors"
      },
      "fontSize": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The font-size attribute refers to the size of the font from baseline\n to baseline when multiple lines of text are set solid\n in a multiline layout environment.Note: As a presentation\n attribute, font-size can be used as a CSS property. See\n the css font-size property for more information.You can\n use this attribute with the following SVG elements:For\n a description of the values, please refer to the CSS font-size\n property.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 17, 2022, by MDN contributors"
      },
      "fontSizeAdjust": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The font-size-adjust attribute allows authors to specify an aspect\n value for an element that will preserve the x-height of\n the first choice font in a substitute font.Note: As a\n presentation attribute, font-size-adjust can be used as\n a CSS property. See the css font-size-adjust property\n for more information.You can use this attribute with the\n following SVG elements:Choose the size of the font based\n only on the font-size property.Choose the size of the\n font so that its lowercase letters (as determined by the\n x-height of the font) are the specified number times the\n font-size.The number specified should generally be the\n aspect ratio (ratio of x-height to font size) of the first\n choice font-family. This means that the first-choice font,\n when available, will appear the same size in browsers,\n whether or not they support font-size-adjust.0 yields\n text of zero height (hidden text).BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "fontStretch": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The font-stretch attribute indicates the desired amount of condensing\n or expansion in the glyphs used to render the text.Note:\n As a presentation attribute, font-stretch can be used\n as a CSS property. See the css font-stretch property for\n more information.You can use this attribute with the following\n SVG elements:BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "fontStyle": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The font-style attribute specifies whether the text is to be\n rendered using a normal, italic, or oblique face.Note:\n As a presentation attribute, font-style can be used as\n a CSS property. See the css font-style property for more\n information.You can use this attribute with the following\n SVG elements:For a description of the values, please refer\n to the CSS font-style property.BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 17, 2022, by MDN contributors"
      },
      "fontVariant": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The font-variant attribute indicates whether the text is to be\n rendered using variations of the font's glyphs.Note: As\n a presentation attribute, font-variant can be used as\n a CSS property. See the css font-variant property for\n more information.You can use this attribute with the following\n SVG elements:\n          normal | none | [\n          <common-lig-values>\n ||\n          <discretionary-lig-values> ||\n          <historical-lig-values>\n ||\n          <contextual-alt-values> ||\n          stylistic(\n <feature-value-name> ) ||\n          historical-forms ||\n\n          styleset( <feature-value-name># ) ||\n       \n   character-variant( <feature-value-name># ) ||\n     \n     swash( <feature-value-name> ) ||\n          ornaments(\n <feature-value-name> ) ||\n          annotation( <feature-value-name>\n ) || [\n          small-caps | all-small-caps |\n      \n    petite-caps | all-petite-caps |\n          unicase |\n titling-caps ] ||\n          <numeric-figure-values> ||\n\n          <numeric-spacing-values> ||\n          <numeric-fraction-values>\n || ordinal ||\n          slashed-zero ||\n          <east-asian-variant-values>\n ||\n          <east-asian-width-values> || ruby ]\n    \n    For a description of the values, please refer to the\n CSS font-variant property.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 17, 2022, by MDN contributors"
      },
      "fontWeight": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The font-weight attribute refers to the boldness or lightness\n of the glyphs used to render the text, relative to other\n fonts in the same font family.Note: As a presentation\n attribute, font-weight can be used as a CSS property.\n See the css font-weight property for more information.You\n can use this attribute with the following SVG elements:For\n a description of the values, please refer to the CSS font-weight\n property.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 17, 2022, by MDN contributors"
      },
      "glyphOrientationHorizontal": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The glyph-orientation-horizontal\n attribute affects the amount that the current text position\n advances as each glyph is rendered.When the reference\n orientation direction is horizontal and the glyph-orientation-horizontal\n results in an orientation angle that is a multiple of\n 180 degrees, then the current text position is incremented\n according to the horizontal metrics of the glyph. Otherwise,\n if the value of this attribute is not a multiple of 180\n degrees, then the current text position is incremented\n according to the vertical metrics of the glyph.This attribute\n is applied only to text written in a horizontal writing-mode.Note:\n As a presentation attribute, glyph-orientation-horizontal\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:\n      The value of the\n angle is restricted to 0, 90, 180, and 270 degrees. If\n another angle is specified, it is rounded to the closest\n of the permitted values.\n      A value of 0deg indicates\n that all glyphs are set with the top of the glyphs oriented\n towards the reference orientation. A value of 90deg indicates\n an orientation of 90 degrees clockwise from the reference\n orientation.\n    BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "glyphOrientationVertical": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The glyph-orientation-vertical\n attribute affects the amount that hte current text position\n advances as each glyph is rendered.When the inline-progression-direction\n is vertical and the glyph-orientation-vertical results\n in an orientation angle that is a multiple of 180 degrees,\n then the current text position is incremented according\n to the vertical metrics of the glyph. Otherwise, if the\n angle is not a multiple of 180 degrees, then the current\n text position is incremented according to the horizontal\n metrics of the glyph.This attribute is applied only to\n text written in a vertical writing-mode.Note: As a presentation\n attribute, glyph-orientation-vertical can be used as a\n CSS property.You can use this attribute with the following\n SVG elements:Fullwidth ideographic and fullwidth Latin\n text will be set with a glyph orientation of 0 degrees.\n Ideographic punctuation and other ideographic characters\n having alternate horizontal and vertical forms will use\n the vertical form of the glyph. Text which is not fullwidth\n will be set with a glyph orientation of 90 degrees.This\n reorientation rule applies only to the first-level non-ideographic\n text. All further embedding of writing modes or bidirectional\n processing will be based on the first-level rotation.Note:\n Text set in this \"rotated\" manner may contain ligatures\n or other glyph combining and reordering common to the\n language and script. (This presentation form does not\n disable auto-ligature formation or similar context-driven\n variations.)The determination of which characters should\n be auto-rotated may vary across user agents. The determination\n is based on a complex interaction between country, language,\n script, character properties, font, and character context.\n\n      The value of the angle is restricted to 0, 90, 180,\n and 270 degrees. If another angle is specified, it is\n rounded to the closest of the permitted values.\n     \n A value of 0deg indicates that all glyphs are set with\n the top of the glyphs oriented towards the reference orientation.\n A value of 90deg indicates an orientation of 90 degrees\n clockwise from the reference orientation.\n    BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "kerning": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The kerning attribute indicates\n whether the spacing between glyphs should be adjusted\n based on kerning tables that are included in the relevant\n font (i.e., enable auto-kerning) or instead disable auto-kerning\n and set the spacing between them to a specific length\n (typically, zero).Note: As a presentation attribute kerning\n can be used as a CSS property. In CSS the property is\n called font-kerning, though.You can use this attribute\n with the following SVG elements:This value indicates that\n the spacing between glyphs is adjusted based on kerning\n tables that are included in the font that will be used.If\n a length is provided, then auto-kerning is disabled. Instead,\n inter-character spacing is set to the given length.If\n a length is provided without a unit identifier (e.g.,\n an unqualified number such as 128), the length is processed\n as a width value in the current user coordinate system.\n If a unit identifier (e.g., 0.25em or 1%) is provided,\n then the length is converted into a corresponding value\n in the current user coordinate system.The most common\n scenario, other than auto, is to set kerning to a value\n of 0 so that auto-kerning is disabled.The given length\n is added to the inter-character spacing value specified\n by the letter-spacing attribute.BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: Feb 4, 2022, by MDN contributors"
      },
      "lengthAdjust": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The lengthAdjust attribute controls how the text is stretched\n into the length defined by the textLength attribute.You\n can use this attribute with the following SVG elements:BCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "letterSpacing": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The letter-spacing attribute controls spacing between text characters,\n in addition to any spacing from the kerning attribute.If\n the attribute value is a unitless number (like 128), the\n browser processes it as a <length> in the current user\n coordinate system.If the attribute value has a unit identifier,\n such as .25em or 1%, then the browser converts the <length>\n into its corresponding value in the current user coordinate\n system.Note: As a presentation attribute, letter-spacing\n can be used as a CSS property. See the css letter-spacing\n property for more information.You can use this attribute\n with the following SVG elements:For a description of the\n values, please refer to the CSS letter-spacing property.BCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "opacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The opacity attribute specifies the transparency of an object\n or of a group of objects, that is, the degree to which\n the background behind the element is overlaid.Note: As\n a presentation attribute, opacity can be used as a CSS\n property. See the css opacity property for more information.You\n can use this attribute with the following SVG elements:The\n uniform opacity setting to be applied across an entire\n object, as a <number>. Any values outside the range 0.0\n (fully transparent) to 1.0 (fully opaque) will be clamped\n to this range.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "paintOrder": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The paint-order attribute specifies the order that the fill,\n stroke, and markers of a given shape or text element are\n painted.Note: As a presentation attribute, paint-order\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:This value indicates that\n the fill will be painted first, then the stroke, and finally\n the markers.The order of these three keywords indicates\n the order in which the painting happens, from left to\n right. If any of the three painting components is omitted,\n they will be painted in their default order after the\n specified components. For example, using stroke is equivalent\n to stroke fill markers.The example would be rendered as\n follows:\n  \nThe stroke under effect could be achieved\n via the following CSS property:BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "pointerEvents": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The pointer-events attribute is a presentation attribute that\n allows defining whether or when an element may be the\n target of a mouse event.Note: As a presentation attribute\n pointer-events can be used as a CSS property.You can use\n this attribute with the following SVG elements:For a detailed\n explanation of each possible value, have a look at the\n CSS pointer-events documentation.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "requiredFeatures": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The requiredFeatures attribute\n takes a list of feature strings, with the individual strings\n separated by white space. It determines whether or not\n all of the named features are supported by the browser;\n if all of them are supported, the attribute evaluates\n to true end the element is rendered; otherwise, the attribute\n evaluates to false and the current element and its children\n are skipped and thus will not be rendered. This provides\n a way to design SVG that gracefully falls back when features\n aren't available.If the attribute is not present, then\n its implicit evaluated value is true. If a null string\n or empty string value is given to attribute requiredFeatures,\n the attribute is evaluate to false.requiredFeatures is\n often used in conjunction with the <switch> element. If\n requiredFeatures is used in other situations, it represents\n a simple switch on the given element whether to render\n the element or not.To detect availability of an SVG feature\n from script, there is the (also deprecated) DOMImplementation.hasFeature()\n method.You can use this attribute with the following SVG\n elements:This is a list of feature strings, separated\n using white space. Determines whether all of the named\n features are supported by the browser. See Feature strings\n below for a list of allowed values.The following are the\n feature strings for the requiredFeatures attribute. These\n same feature strings apply to the hasFeature method call\n that is part of the SVG DOM's support for the DOMImplementation\n interface. In some cases the feature strings map directly\n to a set of attributes, properties or elements, in others\n they represent some functionality of the browser. Note\n that the format and naming for feature strings changed\n from SVG 1.0 to SVG 1.1. The SVG 1.0 feature strings are\n not listed here but can be found in the SVG Specification.\n Some browser support SVG 1.0 Feature strings for compatibility\n reasons. However, the SVG 1.0 feature strings are considered\n deprecated.At least one of the following feature is supported:At\n least one of the following feature is supported:The browser\n supports all the following features:The browser supports\n all of the DOM interfaces and methods that correspond\n to the language features for http://www.w3.org/TR/SVG11/feature#SVG-static.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-static\n plus the feature http://www.w3.org/TR/SVG11/feature#Animation.The\n browser supports all of the DOM interfaces and methods\n that correspond to the language features for http://www.w3.org/TR/SVG11/feature#SVG-animation.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-animation\n plus the following features:The browser supports all of\n the DOM interfaces and methods that correspond to the\n language features for http://www.w3.org/TR/SVG11/feature#SVG-dynamic.The\n browser supports the id, xml:base, xml:lang and xml:space\n attributesThe browser supports <svg>, <g>, <defs>, <desc>,\n <title>, <metadata>, <symbol> and <use> elements.The browser\n supports <svg>, <g>, <defs>, <desc>, <title>, <metadata>\n and <use> elements.The browser supports the enable-background\n attributeThe browser supports the <switch> element, and\n the requiredFeatures, requiredExtensions, systemLanguage\n attributesThe browser supports the <image> element.The\n browser supports the <style> element.The browser supports\n the clip and overflow attributes.The browser supports\n the <rect>, <circle>, <line>, <polyline>, <polygon>, <ellipse>\n and <path> elements.The browser supports the <text>, <tspan>,\n <tref>, <textPath>, <altGlyph>, <altGlyphDef>, <altGlyphItem>\n and <glyphRef> elements.The browser supports the <text>\n elementThe browser supports the color, fill, fill-rule,\n stroke, stroke-dasharray, stroke-dashoffset, stroke-linecap,\n stroke-linejoin, stroke-miterlimit, stroke-width, color-interpolation\n and color-rendering attributesThe browser supports the\n color, fill, fill-rule, stroke, stroke-dasharray, stroke-dashoffset,\n stroke-linecap, stroke-linejoin, stroke-miterlimit, stroke-width\n and color-rendering attributesThe browser supports the\n opacity, stroke-opacity and fill-opacity attributesThe\n browser supports the display, image-rendering, pointer-events,\n shape-rendering, text-rendering and visibility attributesThe\n browser supports the display and visibility attributesThe\n browser supports the <marker> elementThe browser supports\n the <linearGradient>, <radialGradient> and <stop> elementsThe\n browser supports the <pattern> elementThe browser supports\n the <clipPath> element and the clip-path, clip-rule attributesThe\n browser supports the <clipPath> element and the clip-path\n attributeThe browser supports the <mask> elementThe browser\n supports the <filter>, <feBlend>, <feColorMatrix>, <feComponentTransfer>,\n <feComposite>, <feConvolveMatrix>, <feDiffuseLighting>,\n <feDisplacementMap>, <feFlood>, <feGaussianBlur>, <feImage>,\n <feMerge>, <feMergeNode>, <feMorphology>, <feOffset>,\n <feSpecularLighting>, <feTile>, <feDistantLight>, <fePointLight>,\n <feSpotLight>, <feFuncR>, <feFuncG>, <feFuncB> and <feFuncA>\n elementsThe browser supports the <filter>, <feBlend>,\n <feColorMatrix>, <feComponentTransfer>, <feComposite>,\n <feFlood>, <feGaussianBlur>, <feImage>, <feMerge>, <feMergeNode>,\n <feOffset>, <feTile>, <feFuncR>, <feFuncG>, <feFuncB>\n and <feFuncA> elementsThe browser supports the onunload,\n onabort, onerror, onresize, onscroll and onzoom attributesThe\n browser supports the onfocusin, onfocusout, onactivate,\n onclick, onmousedown, onmouseup, onmouseover, onmousemove,\n onmouseout and onload attributesThe browser supports the\n onbegin, onend, onrepeat and onload attributesThe browser\n supports the <cursor> elementThe browser supports the\n <a> elementThe browser supports the xlink:type, xlink:href,\n xlink:role, xlink:arcrole, xlink:title, xlink:show and\n xlink:actuate attributesThe browser supports the <view>\n elementThe browser supports the <script> elementThe browser\n supports the <animate>, <set>, <animateMotion>, <animateTransform>,\n <animateColor> and <mpath> elementsThe browser supports\n the <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <vkern>, <font-face-src>, <font-face-uri>, <font-face-format>\n and <font-face-name> elementsThe browser supports the\n <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <font-face-src> and <font-face-name> elementsThe browser\n supports the <foreignObject> elementSee also requiredFeatures.svgBCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "spacing": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The spacing attribute indicates how the user agent should determine\n the spacing between typographic characters that are to\n be rendered along a path.You can use this attribute with\n the following SVG elements:This value indicates that the\n user agent should use text-on-a-path layout algorithms\n to adjust the spacing between typographic characters in\n order to achieve visually appealing results.This value\n indicates that the typographic characters should be rendered\n exactly according to the spacing rules as specified by\n the layout rules for text-on-a-path.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "startOffset": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The startOffset attribute defines an offset from the start of\n the path for the initial current text position along the\n path after converting the path to the <textPath> element's\n coordinate system.You can use this attribute with the\n following SVG elements:A length represents a distance\n along the path measured in the current user coordinate\n system for the <textPath> element.If a percentage is given,\n then the start offset represents a percentage distance\n along the entire path. Thus, 0% indicates the start point\n of the path and 100% indicates the end point of the path.This\n value indicates a distance along the path measured in\n the current user coordinate system for the <textPath>\n element.Note: Negative values and values larger than the\n path length (e.g. 150%) are allowed.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "stroke": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "stroke color"
      },
      "strokeDasharray": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-dasharray attribute is a presentation attribute defining\n the pattern of dashes and gaps used to paint the outline\n of the shape;Note: As a presentation attribute, stroke-dasharray\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:A list of comma and/or\n white space separated <length>s and <percentage>s that\n specify the lengths of alternating dashes and gaps.If\n an odd number of values is provided, then the list of\n values is repeated to yield an even number of values.\n Thus, 5,3,2 is equivalent to 5,3,2,5,3,2.BCD tables only\n load in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "strokeDashoffset": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-dashoffset attribute is a presentation attribute defining\n an offset on the rendering of the associated dash array.Note:\n As a presentation attribute stroke-dashoffset can be used\n as a CSS property.You can use this attribute with the\n following SVG elements:The offset is usually expressed\n in user units resolved against the pathLength but if a\n <percentage> is used, the value is resolved as a percentage\n of the current viewport.BCD tables only load in the browser\n with JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "strokeLinecap": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"butt\"",
              "computed": false
            },
            {
              "value": "\"inherit\"",
              "computed": false
            },
            {
              "value": "\"round\"",
              "computed": false
            },
            {
              "value": "\"square\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The stroke-linecap attribute is a presentation attribute defining\n the shape to be used at the end of open subpaths when\n they are stroked.Note: As a presentation attribute stroke-linecap\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:The butt value indicates\n that the stroke for each subpath does not extend beyond\n its two endpoints. On a zero length subpath, the path\n will not be rendered at all.The round value indicates\n that at the end of each subpath the stroke will be extended\n by a half circle with a diameter equal to the stroke width.\n On a zero length subpath, the stroke consists of a full\n circle centered at the subpath's point.The square value\n indicates that at the end of each subpath the stroke will\n be extended by a rectangle with a width equal to half\n the width of the stroke and a height equal to the width\n of the stroke. On a zero length subpath, the stroke consists\n of a square with its width equal to the stroke width,\n centered at the subpath's point.BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "strokeLinejoin": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"bevel\"",
              "computed": false
            },
            {
              "value": "\"inherit\"",
              "computed": false
            },
            {
              "value": "\"miter\"",
              "computed": false
            },
            {
              "value": "\"round\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The stroke-linejoin attribute is a presentation attribute defining\n the shape to be used at the corners of paths when they\n are stroked.Note: As a presentation attribute stroke-linejoin\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:Note: The arcs value as\n been introduced in SVG2 and it isn't widely supported\n yet, see Browser compatibility below for details.The arcs\n value indicates that an arcs corner is to be used to join\n path segments. The arcs shape is formed by extending the\n outer edges of the stroke at the join point with arcs\n that have the same curvature as the outer edges at the\n join point.The bevel value indicates that a bevelled corner\n is to be used to join path segments.The miter value indicates\n that a sharp corner is to be used to join path segments.\n The corner is formed by extending the outer edges of the\n stroke at the tangents of the path segments until they\n intersect.Note: If the stroke-miterlimit is exceeded,\n the line join falls back to bevel.Note: the miter-clip\n value as been introduced in SVG2 and it isn't widely supported\n yet, see Browser compatibility below for details.The miter-clip\n value indicates that a sharp corner is to be used to join\n path segments. The corner is formed by extending the outer\n edges of the stroke at the tangents of the path segments\n until they intersect.If the stroke-miterlimit is exceeded,\n the miter is clipped at a distance equal to half the stroke-miterlimit\n value multiplied by the stroke width from the intersection\n of the path segments. This provides a better rendering\n than miter on very sharp join or in case of an animation.The\n round value indicates that a round corner is to be used\n to join path segments.BCD tables only load in the browser\n with JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "strokeMiterlimit": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-miterlimit attribute is a presentation attribute defining\n a limit on the ratio of the miter length to the stroke-width\n used to draw a miter join. When the limit is exceeded,\n the join is converted from a miter to a bevel.Note: As\n a presentation attribute stroke-miterlimit can be used\n as a CSS property.You can use this attribute with the\n following SVG elements:When two line segments meet at\n a sharp angle and miter joins have been specified for\n stroke-linejoin, it is possible for the miter to extend\n far beyond the thickness of the line stroking the path.\n The stroke-miterlimit ratio is used to define when the\n limit is exceeded, if so the join is converted from a\n miter to a bevel.The ratio of miter length (distance between\n the outer tip and the inner corner of the miter) to stroke-width\n is directly related to the angle (theta) between the segments\n in user space by the formula:\n  \n    \n      stroke-miterlimit\n\n      =\n      \n        \n          miterLength\n        \n\n        \n          stroke-width\n        \n      \n      =\n\n      \n        \n          1\n        \n        \n        \n  \n            sin\n            \n              (\n      \n        \n                \n                  \u03b8\n        \n        \n                \n                  2\n        \n        \n              \n              )\n            \n \n         \n        \n      \n    \n  \nFor example, a miter\n limit of 1.414 converts miters to bevels for theta less\n than 90 degrees, a limit of 4.0 converts them for theta\n less than approximately 29 degrees, and a limit of 10.0\n converts them for theta less than approximately 11.5 degrees.The\n value of stroke-miterlimit must be greater than or equal\n to 1.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "strokeOpacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-opacity attribute is a presentation attribute defining\n the opacity of the paint server (color, gradient, pattern,\n etc) applied to the stroke of a shape.Note: As a presentation\n attribute stroke-opacity can be used as a CSS property.You\n can use this attribute with the following SVG elements:Note:\n SVG2 introduces percentage values for stroke-opacity,\n however, it is not widely supported yet (See Browser compatibility\n below) as a consequence, it is best practices to set opacity\n with a value in the range [0-1].It's important to know\n that the stroke partially covers the fill of a shape,\n so a stroke with an opacity different than 1 will partially\n show the fill underneath. To avoid this effect, it is\n possible to apply a global opacity with the opacity attribute\n or to put the stroke behind the fill with the paint-order\n attribute.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "strokeWidth": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-width attribute is a presentation attribute defining\n the width of the stroke to be applied to the shape.You\n can use this attribute with the following SVG elements:Note:\n A percentage value is always computed as a percentage\n of the normalized viewBox diagonal length.BCD tables only\n load in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "systemLanguage": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The systemLanguage attribute represents a list of supported language\n tags. This list is matched against the language defined\n in the user preferences.You can use this attribute with\n the following SVG elements:The value is a set of comma-separated\n tokens, each of which must be a language tag, as defined\n in RFC 5646: Tags for Identifying Languages (also known\n as BCP 47).systemLanguage is often used in conjunction\n with the <switch> element. If the attribute is used in\n other situations, then it represents a simple switch on\n the given element whether to render the element or not.Note:\n If several alternative language objects are enclosed in\n a <switch> and none of them matches, this may lead to\n situations where no content is displayed. It is thus recommended\n to include a \"catch-all\" choice at the end of such a <switch>\n which is acceptable in all cases.The attribute evaluates\n to \"true\" if one of the language tags indicated by user\n preferences is a case-insensitive match or prefix (followed\n by a \"-\") of one of the language tags given in the value\n of this parameter. Otherwise it evaluates to \"false\".Note:\n The prefix matching rule does not imply that if a user\n understands a language with a certain tag, that the user\n will also understand all languages with the tag as prefix.If\n the attribute is not present, then it implicitly evaluates\n to \"true\". If a null string or empty string value is given,\n the attribute evaluates to \"false\".The prefix rule allows\n the use of prefix tags if this is the case.Multiple languages\n may be listed for content that is intended for multiple\n audiences. For example, content that is presented simultaneously\n in the original Maori and English versions, would call\n for:However, just because multiple languages are present\n within the object on which the systemLanguage test attribute\n is placed, this does not mean that it is intended for\n multiple linguistic audiences. An example would be a beginner's\n language primer, such as \"A First Lesson in Latin,\" which\n is clearly intended to be used by an English-literate\n audience. In this case, the attribute should only include\n en.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "textAnchor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The text-anchor attribute is used to align (start-, middle- or\n end-alignment) a string of pre-formatted text or auto-wrapped\n text where the wrapping area is determined from the inline-size\n property relative to a given point.This attribute is not\n applicable to other types of auto-wrapped text. For those\n cases you should use text-align. For multi-line text,\n the alignment takes place for each line.The text-anchor\n attribute is applied to each individual text chunk within\n a given <text> element. Each text chunk has an initial\n current text position, which represents the point in the\n user coordinate system resulting from (depending on context)\n application of the x and y attributes on the <text> element,\n any x or y attribute values on a <tspan>, <tref> or <altGlyph>\n element assigned explicitly to the first rendered character\n in a text chunk, or determination of the initial current\n text position for a <textPath> element.Note: As a presentation\n attribute, text-anchor can be used as a CSS property.You\n can use this attribute with the following SVG elements:The\n rendered characters are aligned such that the start of\n the text string is at the initial current text position.\n For an element with a direction property value of ltr\n (typical for most European languages), the left side of\n the text is rendered at the initial text position. For\n an element with a direction property value of rtl (typical\n for Arabic and Hebrew), the right side of the text is\n rendered at the initial text position. For an element\n with a vertical primary text direction (often typical\n for Asian text), the top side of the text is rendered\n at the initial text position.The rendered characters are\n aligned such that the middle of the text string is at\n the current text position. (For text on a path, conceptually\n the text string is first laid out in a straight line.\n The midpoint between the start of the text string and\n the end of the text string is determined. Then, the text\n string is mapped onto the path with this midpoint placed\n at the current text position.)The rendered characters\n are shifted such that the end of the resulting rendered\n text (final current text position before applying the\n text-anchor property) is at the initial current text position.\n For an element with a direction property value of ltr\n (typical for most European languages), the right side\n of the text is rendered at the initial text position.\n For an element with a direction property value of rtl\n (typical for Arabic and Hebrew), the left side of the\n text is rendered at the initial text position. For an\n element with a vertical primary text direction (often\n typical for Asian text), the bottom of the text is rendered\n at the initial text position.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "textDecoration": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The text-decoration attribute defines whether text is decorated\n with an underline, overline and/or strike-through. It\n is a shorthand for the text-decoration-line and text-decoration-style\n properties.The fill and stroke of the text decoration\n are given by the fill and stroke of the text at the point\n where the text decoration is declared.The paint order\n of the text decoration, i.e. the fill and stroke, is determined\n by the value of the paint-order attribute at the point\n where the text decoration is declared.Note: As a presentation\n attribute, text-decoration can be used as a CSS property.\n See the css text-decoration property for more information.You\n can use this attribute with the following SVG elements:For\n a description of the values, please refer to the CSS text-decoration\n property.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "textLength": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The textLength attribute, available on SVG <text> and <tspan>\n elements, lets you specify the width of the space into\n which the text will draw. The user agent will ensure that\n the text does not extend farther than that distance, using\n the method or methods specified by the lengthAdjust attribute.\n By default, only the spacing between characters is adjusted,\n but the glyph size can also be adjusted if you change\n lengthAdjust.By using textLength, you can ensure that\n your SVG text displays at the same width regardless of\n conditions including web fonts failing to load (or not\n having loaded yet).You can use this attribute with the\n following SVG elements:This value specifies the width\n of the space the text will be adjusted to occupy as absolute\n length or percentage.A numeric value outlines a length\n referring to the units of the current coordinate system.Let's\n create a simple example that presents text you can resize\n using an <input> element of type \"range\".Let's start with\n the SVG. It's pretty basic, with a 1000-by-300 pixel space\n mapped into a 10 centimeter by 3 centimeter box.First,\n a <rect> element is used to create and stroke a rectangle\n to contain the text. Then <text> is used to create the\n text element itself, with an id of \"hello\".The HTML is\n also simple, with only two displayed elements contained\n inside a grouping <div>:The <input> element, of type \"range\",\n is used to create the slider control the user will manipulate\n to change the width of the text. A <span> element of ID\n \"widthDisplay\" is provided to display the current width\n value.Finally, let's have a look at the JavaScript code.\n It starts by stashing references to the elements it will\n need to access, using Document.getElementById():After\n fetching the element references, an EventListener is established\n by calling addEventListener() on the slider control, to\n receive any input events which occur. These events will\n be sent any time the slider's value changes, even if the\n user hasn't stopped moving it, so we can responsively\n adjust the text width.When an \"input\" event occurs, we\n call newValueSpecifiedUnits() to set the value of textLength\n to the slider's new value, using the SVGLength interface's\n SVG_LENGTHTYPE_PX unit type to indicate that the value\n represents pixels. Note that we have to dive into textLength\n to get its baseVal property; textLength is stored as an\n SVGLength object, so we can't treat it like a plain number.After\n updating the text width, the contents of the widthDisplay\n box are updated with the new value as well, and we're\n finished.Here's what the example looks like. Try dragging\n the slider around to get a feel for what it does.BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: Jul 8, 2022, by\n MDN contributors"
      },
      "unicodeBidi": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The unicode-bidi attribute specifies how the accumulation of\n the background image is managed.Note: As a presentation\n attribute, unicode-bidi can be used as a CSS property.\n See the CSS unicode-bidi property for more information.You\n can use this attribute with the following SVG elements:For\n a description of the values, please refer to the CSS unicode-bidi\n property.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "vectorEffect": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The vector-effect property specifies the vector effect to use\n when drawing an object. Vector effects are applied before\n any of the other compositing operations, i.e. filters,\n masks and clips.Note: As a presentation attribute, vector-effect\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:This value specifies that\n no vector effect shall be applied, i.e. the default rendering\n behavior is used which is to first fill the geometry of\n a shape with a specified paint, then stroke the outline\n with a specified paint.This value modifies the way an\n object is stroked. Normally stroking involves calculating\n stroke outline of the shape's path in current user coordinate\n system and filling that outline with the stroke paint\n (color or gradient). The resulting visual effect of this\n value is that the stroke width is not dependent on the\n transformations of the element (including non-uniform\n scaling and shear transformations) and zoom level.This\n value specifies a special user coordinate system used\n by the element and its descendants. The scale of that\n user coordinate system does not change in spite of any\n transformation changes from a host coordinate space. However,\n it does not specify the suppression of rotation and skew.\n Also, it does not specify the origin of the user coordinate\n system. Since this value suppresses scaling of the user\n coordinate system, it also has the characteristics of\n non-scaling-stroke.This value specifies a special user\n coordinate system used by the element and its descendants.\n The rotation and skew of that user coordinate system is\n suppressed in spite of any transformation changes from\n a host coordinate space. However, it does not specify\n the suppression of scaling. Also, it does not specify\n the origin of user coordinate system.This value specifies\n a special user coordinate system used by the element and\n its descendants. The position of user coordinate system\n is fixed in spite of any transformation changes from a\n host coordinate space. However, it does not specify the\n suppression of rotation, skew and scaling. When this vector\n effect and the transform property are defined at the same\n time, that property is consumed for this effect.BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "visibility": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The visibility attribute lets you control the visibility of graphical\n elements. With a value of hidden or collapse the current\n graphics element is invisible.Note: If the visibility\n attribute is set to hidden on a text element, then the\n text is invisible but still takes up space in text layout\n calculations.Depending on the value of attribute pointer-events,\n graphics elements which have their visibility attribute\n set to hidden still might receive events.Note: As a presentation\n attribute, visibility can be used as a CSS property. See\n the css visibility property for more information.You can\n use this attribute with the following SVG elements:The\n following example toggles the CSS visibility of the SVG\n image path.This value indicates that the element will\n be painted.This value indicates that the element will\n not be painted. Though it is still part of the rendering\n tree, i.e. it may receive pointer events depending on\n the pointer-events attribute, may receive focus depending\n on the tabindex attribute, contributes to bounding box\n calculations and clipping paths, and does affect text\n layout.This value is equal to hidden.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "wordSpacing": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The word-spacing attribute specifies spacing behavior between\n words.If a <length> is provided without a unit identifier\n (e.g. an unqualified number such as 128), the browser\n processes the <length> as a width value in the current\n user coordinate system.If a <length> is provided with\n one of the unit identifiers (e.g. .25em or 1%), then the\n browser converts the <length> into a corresponding value\n in the current user coordinate system.Note: As a presentation\n attribute, word-spacing can be used as a CSS property.\n See the css word-spacing property for more information.You\n can use this attribute with the following SVG elements:For\n a description of the values, please refer to the CSS letter-spacing\n property.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "writingMode": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The writing-mode attribute specifies whether the initial inline-progression-direction\n for a <text> element shall be left-to-right, right-to-left,\n or top-to-bottom. The writing-mode attribute applies only\n to <text> elements; the attribute is ignored for <tspan>,\n <tref>, <altGlyph> and <textPath> sub-elements. (Note\n that the inline-progression-direction can change within\n a <text> element due to the Unicode bidirectional algorithm\n and properties direction and unicode-bidi.)Note: As a\n presentation attribute, writing-mode can be used as a\n CSS property. See the CSS writing-mode property for more\n information.You can use this attribute with the following\n SVG elements:This value defines a top-to-bottom block\n flow direction. Both the writing mode and the typographic\n mode are horizontal.This value defines a right-to-left\n block flow direction. Both the writing mode and the typographic\n mode are vertical.This value defines a left-to-right block\n flow direction. Both the writing mode and the typographic\n mode are vertical.BCD tables only load in the browser\n with JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/Tspan.react.js": {
    "description": "Tspan is a wrapper for the <tspan> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/tspan",
    "displayName": "Tspan",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "alignmentBaseline": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The alignment-baseline attribute specifies how an object is aligned\n with respect to its parent. This property specifies which\n baseline of this element is to be aligned with the corresponding\n baseline of the parent. For example, this allows alphabetic\n baselines in Roman text to stay aligned across font size\n changes. It defaults to the baseline with the same name\n as the computed value of the alignment-baseline property.Note:\n As a presentation attribute alignment-baseline can be\n used as a CSS property.You can use this attribute with\n the following SVG elements:The value is the dominant-baseline\n of the script to which the character belongs - i.e., use\n the dominant-baseline of the parent.Uses the dominant\n baseline choice of the parent. Matches the box's corresponding\n baseline to that of its parent.The alignment-point of\n the object being aligned is aligned with the \"before-edge\"\n baseline of the parent text content element.Matches the\n bottom of the box to the top of the parent's content area.The\n alignment-point of the object being aligned is aligned\n with the \"text-before-edge\" baseline of the parent text\n content element.Note: This keyword may be mapped to text-top.Aligns\n the vertical midpoint of the box with the baseline of\n the parent box plus half the x-height of the parent.Matches\n the box's central baseline to the central baseline of\n its parent.The alignment-point of the object being aligned\n is aligned with the \"after-edge\" baseline of the parent\n text content element.Matches the top of the box to the\n top of the parent's content area.The alignment-point of\n the object being aligned is aligned with the \"text-after-edge\"\n baseline of the parent text content element.Note: This\n keyword may be mapped to text-bottom.Matches the box's\n ideographic character face under-side baseline to that\n of its parent.Matches the box's alphabetic baseline to\n that of its parent.The alignment-point of the object being\n aligned is aligned with the \"hanging\" baseline of the\n parent text content element.Matches the box's mathematical\n baseline to that of its parent.Aligns the top of the aligned\n subtree with the top of the line box.Aligns the center\n of the aligned subtree with the center of the line box.Aligns\n the bottom of the aligned subtree with the bottom of the\n line box.SVG 2 introduces some changes to the definition\n of this property. In particular: the values auto, before-edge,\n and after-edge have been removed. For backwards compatibility,\n text-before-edge may be mapped to text-top and text-after-edge\n to text-bottom. Neither text-before-edge nor text-after-edge\n should be used with the vertical-align property.For object\n alignment in other elements (such as <text>), see dominant-baseline.BCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "baselineShift": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The baseline-shift attribute allows repositioning of the dominant-baseline\n relative to the dominant-baseline of the parent text content\n element. The shifted object might be a sub- or superscript.Note:\n As a presentation attribute baseline-shift can be used\n as a CSS property.Note: This property is going to be deprecated\n and authors are advised to use vertical-align instead.You\n can use this attribute with the following SVG elements:The\n dominant-baseline is shifted to the default position for\n subscripts.The dominant-baseline is shifted to the default\n position for superscripts.A length value raises (positive\n value) or lowers (negative value) the dominant-baseline\n of the parent text content element by the specified length.A\n percentage value raises (positive value) or lowers (negative\n value) the dominant-baseline of the parent text content\n element by the specified percentage of the line-height.BCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "colorInterpolation": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation attribute specifies the color space for\n gradient interpolations, color animations, and alpha compositing.Note:\n For filter effects, the color-interpolation-filters property\n controls which color space is used.The color-interpolation\n property chooses between color operations occurring in\n the sRGB color space or in a (light energy linear) linearized\n RGB color space. Having chosen the appropriate color space,\n component-wise linear interpolation is used.When a child\n element is blended into a background, the value of the\n color-interpolation property on the child determines the\n type of blending, not the value of the color-interpolation\n on the parent. For gradients which make use of the href\n or the deprecated xlink:href attribute to reference another\n gradient, the gradient uses the property's value from\n the gradient element which is directly referenced by the\n fill or stroke property. When animating colors, color\n interpolation is performed according to the value of the\n color-interpolation property on the element being animated.Note:\n As a presentation attribute, color-interpolation can be\n used as a CSS property.You can use this attribute with\n the following SVG elements:Indicates that the user agent\n can choose either the sRGB or linearRGB spaces for color\n interpolation. This option indicates that the author doesn't\n require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "direction": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The direction attribute specifies the inline-base direction of\n a <text> or <tspan> element. It defines the start and\n end points of a line of text as used by the text-anchor\n and inline-size properties. It also may affect the direction\n in which characters are positioned if the unicode-bidi\n property's value is either embed or bidi-override.It applies\n only to glyphs oriented perpendicular to the inline-base\n direction, which includes the usual case of horizontally-oriented\n Latin or Arabic text and the case of narrow-cell Latin\n or Arabic characters rotated 90 degrees clockwise relative\n to a top-to-bottom inline-base direction.In many cases,\n the bidirectional Unicode algorithm produces the desired\n result automatically, so this attribute doesn't need to\n be specified in those cases. For other cases, such as\n when using right-to-left languages, it may be sufficient\n to add the direction attribute to the outermost <svg>\n element, and allow that direction to inherit to all text\n elements:Note: As a presentation attribute, direction\n can be used as a CSS property. See css direction for further\n information.You can use this attribute with the following\n SVG elements:BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "dominantBaseline": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The dominant-baseline attribute specifies the dominant baseline,\n which is the baseline used to align the box's text and\n inline-level contents. It also indicates the default alignment\n baseline of any boxes participating in baseline alignment\n in the box's alignment context.It is used to determine\n or re-determine a scaled-baseline-table. A scaled-baseline-table\n is a compound value with three components:Some values\n of the property re-determine all three values. Others\n only re-establish the baseline-table font-size. When the\n initial value, auto, would give an undesired result, this\n property can be used to explicitly set the desired scaled-baseline-table.If\n there is no baseline table in the nominal font, or if\n the baseline table lacks an entry for the desired baseline,\n then the browser may use heuristics to determine the position\n of the desired baseline.Note: As a presentation attribute,\n dominant-baseline can be used as a CSS property.You can\n use this attribute with the following SVG elements:If\n this property occurs on a <text> element, then the computed\n value depends on the value of the writing-mode attribute.If\n the writing-mode is horizontal, then the value of the\n dominant-baseline component is alphabetic. Otherwise,\n if the writing-mode is vertical, then the value of the\n dominant-baseline component is central.If this property\n occurs on a <tspan>, <tref>, <altGlyph>, or <textPath>\n element, then the dominant-baseline and the baseline-table\n components remain the same as those of the parent text\n content element.If the computed baseline-shift value actually\n shifts the baseline, then the baseline-table font-size\n component is set to the value of the font-size attribute\n on the element on which the dominant-baseline attribute\n occurs, otherwise the baseline-table font-size remains\n the same as that of the element.If there is no parent\n text content element, the scaled-baseline-table value\n is constructed as above for <text> elements.The dominant-baseline\n and the baseline-table components are set by determining\n the predominant script of the character data content.\n The writing-mode, whether horizontal or vertical, is used\n to select the appropriate set of baseline-tables and the\n dominant baseline is used to select the baseline-table\n that corresponds to that baseline. The baseline-table\n font-size component is set to the value of the font-size\n attribute on the element on which the dominant-baseline\n attribute occurs.The dominant-baseline, the baseline-table,\n and the baseline-table font-size remain the same as that\n of the parent text content element.The dominant-baseline\n and the baseline-table remain the same, but the baseline-table\n font-size is changed to the value of the font-size attribute\n on this element. This re-scales the baseline-table for\n the current font-size.The baseline-identifier for the\n dominant-baseline is set to be ideographic, the derived\n baseline-table is constructed using the ideographic baseline-table\n in the font, and the baseline-table font-size is changed\n to the value of the font-size attribute on this element.The\n baseline-identifier for the dominant-baseline is set to\n be alphabetic, the derived baseline-table is constructed\n using the alphabetic baseline-table in the font, and the\n baseline-table font-size is changed to the value of the\n font-size attribute on this element.The baseline-identifier\n for the dominant-baseline is set to be hanging, the derived\n baseline-table is constructed using the hanging baseline-table\n in the font, and the baseline-table font-size is changed\n to the value of the font-size attribute on this element.The\n baseline-identifier for the dominant-baseline is set to\n be mathematical, the derived baseline-table is constructed\n using the mathematical baseline-table in the font, and\n the baseline-table font-size is changed to the value of\n the font-size attribute on this element.The baseline-identifier\n for the dominant-baseline is set to be central. The derived\n baseline-table is constructed from the defined baselines\n in a baseline-table in the font. That font baseline-table\n is chosen using the following priority order of baseline-table\n names: ideographic, alphabetic, hanging, mathematical.\n The baseline-table font-size is changed to the value of\n the font-size attribute on this element.The baseline-identifier\n for the dominant-baseline is set to be middle. The derived\n baseline-table is constructed from the defined baselines\n in a baseline-table in the font. That font baseline-table\n is chosen using the following priority order of baseline-table\n names: alphabetic, ideographic, hanging, mathematical.\n The baseline-table font-size is changed to the value of\n the font-size attribute on this element.The baseline-identifier\n for the dominant-baseline is set to be text-after-edge.\n The derived baseline-table is constructed from the defined\n baselines in a baseline-table in the font. The choice\n of which font baseline-table to use from the baseline-tables\n in the font is browser dependent. The baseline-table font-size\n is changed to the value of the font-size attribute on\n this element.The baseline-identifier for the dominant-baseline\n is set to be text-before-edge. The derived baseline-table\n is constructed from the defined baselines in a baseline-table\n in the font. The choice of which baseline-table to use\n from the baseline-tables in the font is browser dependent.\n The baseline-table font-size is changed to the value of\n the font-size attribute on this element.This value uses\n the top of the em box as the baseline.BCD tables only\n load in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: Jul 8, 2022, by MDN contributors"
      },
      "dx": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The dx attribute indicates a shift along the x-axis on the position\n of an element or its content.You can use this attribute\n with the following SVG elements:Warning: As of SVG2 <altGlyph>\n is deprecated and shouldn't be used.For <altGlyph>, if\n it contains a single value, dx defines a shift along the\n x-axis for all alternate glyph.If there are multiple values,\n dx defines a shift along the x-axis for each individual\n glyph relative to the preceding glyph. If there are less\n values than glyphs, the remaining glyphs use a value of\n 0. If there are more values than glyphs, extra values\n are ignored.For <feDropShadow>, dx defines the x offset\n of the dropped shadow. The unit used to resolve the value\n of the attribute is set by the primitiveUnits attribute\n of the <filter> element.For <feOffset>, dx defines the\n x offset of the filter input graphic. The unit used to\n resolve the value of the attribute is set by the primitiveUnits\n attribute of the <filter> element.Warning: As of SVG2\n <glyphRef> is deprecated and shouldn't be used.For <glyphRef>,\n dx defines the x offset of the glyph, in the font metric\n system.For <text>, if it contains a single value, dx defines\n a shift along the x-axis for all glyphs.If there are multiple\n values, dx defines a shift along the x-axis for each individual\n glyph relative to the preceding glyph. If there are less\n values than glyphs, the remaining glyphs use a value of\n 0. If there are more values than glyphs, extra values\n are ignored.Warning: As of SVG2 <tref> is deprecated and\n shouldn't be used.For <tref>, if it contains a single\n value, dx defines a shift along the x-axis for all glyphs.If\n there are multiple values, dx defines a shift along the\n x-axis for each individual glyph relative to the preceding\n glyph. If there are less values than glyphs, the remaining\n glyphs use a value of 0. If there are more values than\n glyphs, extra values are ignored.For <tspan>, if it contains\n a single value, dx defines a shift along the x-axis for\n all alternate glyph.If there are multiple values, dx defines\n a shift along the x-axis for each individual glyph relative\n to the preceding glyph. If there are less values than\n glyphs, the remaining glyphs use a value of 0. If there\n are more values than glyphs, extra values are ignored.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "dy": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The dy attribute indicates a shift along the y-axis on the position\n of an element or its content.You can use this attribute\n with the following SVG elements:Warning: As of SVG2 <altGlyph>\n is deprecated and shouldn't be used.For <altGlyph>, if\n it contains a single value, dy defines a shift along the\n y-axis for all alternate glyph.If there are multiple values,\n dy defines a shift along the y-axis for each individual\n glyph relative to the preceding glyph. If there are less\n values than glyphs, the remaining glyphs use a value of\n 0. If there are more values than glyphs, extra values\n are ignored.For <feDropShadow>, dy defines the y offset\n of the dropped shadow. The unit used to resolve the value\n of the attribute is set by the primitiveUnits attribute\n of the <filter> element.For <feOffset>, dy defines the\n y offset of the filter input graphic. The unit used to\n resolve the value of the attribute is set by the primitiveUnits\n attribute of the <filter> element.Warning: As of SVG2\n <glyphRef> is deprecated and shouldn't be used.For <glyphRef>,\n dy defines the y offset of the glyph, in the font metric\n system.For <text>, if it contains a single value, dy defines\n a shift along the y-axis for all glyphs.If there are multiple\n values, dy defines a shift along the y-axis for each individual\n glyph relative to the preceding glyph. If there are less\n values than glyphs, the remaining glyphs use a value of\n 0. If there are more values than glyphs, extra values\n are ignored.Warning: As of SVG2 <tref> is deprecated and\n shouldn't be used.For <tref>, if it contains a single\n value, dy defines a shift along the y-axis for all glyphs.If\n there are multiple values, dy defines a shift along the\n y-axis for each individual glyph relative to the preceding\n glyph. If there are less values than glyphs, the remaining\n glyphs use a value of 0. If there are more values than\n glyphs, extra values are ignored.For <tspan>, if it contains\n a single value, dy defines a shift along the y-axis for\n all alternate glyph.If there are multiple values, dy defines\n a shift along the y-axis for each individual glyph relative\n to the preceding glyph. If there are less values than\n glyphs, the remaining glyphs use a value of 0. If there\n are more values than glyphs, extra values are ignored.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "fillOpacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The fill-opacity attribute is a presentation attribute defining\n the opacity of the paint server (color, gradient, pattern,\n etc) applied to a shape.Note: As a presentation attribute\n fill-opacity can be used as a CSS property.You can use\n this attribute with the following SVG elements:Note: SVG2\n introduces percentage values for fill-opacity, however,\n it is not widely supported yet (See Browser compatibility\n below) as a consequence, it is best practices to set opacity\n with a value in the range [0-1].BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "fillRule": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"evenodd\"",
              "computed": false
            },
            {
              "value": "\"inherit\"",
              "computed": false
            },
            {
              "value": "\"nonzero\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The fill-rule attribute is a presentation attribute defining\n the algorithm to use to determine the inside part of a\n shape.Note: As a presentation attribute, fill-rule can\n be used as a CSS property.You can use this attribute with\n the following SVG elements:The fill-rule attribute provides\n two options for how the inside (that is, the area to be\n filled) of a shape is determined:The value nonzero determines\n the \"insideness\" of a point in the shape by drawing a\n ray from that point to infinity in any direction, and\n then examining the places where a segment of the shape\n crosses the ray. Starting with a count of zero, add one\n each time a path segment crosses the ray from left to\n right and subtract one each time a path segment crosses\n the ray from right to left. After counting the crossings,\n if the result is zero then the point is outside the path.\n Otherwise, it is inside.The value evenodd determines the\n \"insideness\" of a point in the shape by drawing a ray\n from that point to infinity in any direction and counting\n the number of path segments from the given shape that\n the ray crosses. If this number is odd, the point is inside;\n if even, the point is outside.BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "fontFamily": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The font-family attribute indicates which font family will be\n used to render the text, specified as a prioritized list\n of font family names and/or generic family names.Note:\n As a presentation attribute, font-family can be used as\n a CSS property. See the css font-family property for more\n information.You can use this attribute with the following\n SVG elements:For a description of the values, please refer\n to the CSS font-family property.BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 17, 2022, by MDN contributors"
      },
      "fontSize": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The font-size attribute refers to the size of the font from baseline\n to baseline when multiple lines of text are set solid\n in a multiline layout environment.Note: As a presentation\n attribute, font-size can be used as a CSS property. See\n the css font-size property for more information.You can\n use this attribute with the following SVG elements:For\n a description of the values, please refer to the CSS font-size\n property.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 17, 2022, by MDN contributors"
      },
      "fontSizeAdjust": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The font-size-adjust attribute allows authors to specify an aspect\n value for an element that will preserve the x-height of\n the first choice font in a substitute font.Note: As a\n presentation attribute, font-size-adjust can be used as\n a CSS property. See the css font-size-adjust property\n for more information.You can use this attribute with the\n following SVG elements:Choose the size of the font based\n only on the font-size property.Choose the size of the\n font so that its lowercase letters (as determined by the\n x-height of the font) are the specified number times the\n font-size.The number specified should generally be the\n aspect ratio (ratio of x-height to font size) of the first\n choice font-family. This means that the first-choice font,\n when available, will appear the same size in browsers,\n whether or not they support font-size-adjust.0 yields\n text of zero height (hidden text).BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "fontStretch": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The font-stretch attribute indicates the desired amount of condensing\n or expansion in the glyphs used to render the text.Note:\n As a presentation attribute, font-stretch can be used\n as a CSS property. See the css font-stretch property for\n more information.You can use this attribute with the following\n SVG elements:BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "fontStyle": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The font-style attribute specifies whether the text is to be\n rendered using a normal, italic, or oblique face.Note:\n As a presentation attribute, font-style can be used as\n a CSS property. See the css font-style property for more\n information.You can use this attribute with the following\n SVG elements:For a description of the values, please refer\n to the CSS font-style property.BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 17, 2022, by MDN contributors"
      },
      "fontVariant": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The font-variant attribute indicates whether the text is to be\n rendered using variations of the font's glyphs.Note: As\n a presentation attribute, font-variant can be used as\n a CSS property. See the css font-variant property for\n more information.You can use this attribute with the following\n SVG elements:\n          normal | none | [\n          <common-lig-values>\n ||\n          <discretionary-lig-values> ||\n          <historical-lig-values>\n ||\n          <contextual-alt-values> ||\n          stylistic(\n <feature-value-name> ) ||\n          historical-forms ||\n\n          styleset( <feature-value-name># ) ||\n       \n   character-variant( <feature-value-name># ) ||\n     \n     swash( <feature-value-name> ) ||\n          ornaments(\n <feature-value-name> ) ||\n          annotation( <feature-value-name>\n ) || [\n          small-caps | all-small-caps |\n      \n    petite-caps | all-petite-caps |\n          unicase |\n titling-caps ] ||\n          <numeric-figure-values> ||\n\n          <numeric-spacing-values> ||\n          <numeric-fraction-values>\n || ordinal ||\n          slashed-zero ||\n          <east-asian-variant-values>\n ||\n          <east-asian-width-values> || ruby ]\n    \n    For a description of the values, please refer to the\n CSS font-variant property.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 17, 2022, by MDN contributors"
      },
      "fontWeight": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The font-weight attribute refers to the boldness or lightness\n of the glyphs used to render the text, relative to other\n fonts in the same font family.Note: As a presentation\n attribute, font-weight can be used as a CSS property.\n See the css font-weight property for more information.You\n can use this attribute with the following SVG elements:For\n a description of the values, please refer to the CSS font-weight\n property.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 17, 2022, by MDN contributors"
      },
      "glyphOrientationHorizontal": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The glyph-orientation-horizontal\n attribute affects the amount that the current text position\n advances as each glyph is rendered.When the reference\n orientation direction is horizontal and the glyph-orientation-horizontal\n results in an orientation angle that is a multiple of\n 180 degrees, then the current text position is incremented\n according to the horizontal metrics of the glyph. Otherwise,\n if the value of this attribute is not a multiple of 180\n degrees, then the current text position is incremented\n according to the vertical metrics of the glyph.This attribute\n is applied only to text written in a horizontal writing-mode.Note:\n As a presentation attribute, glyph-orientation-horizontal\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:\n      The value of the\n angle is restricted to 0, 90, 180, and 270 degrees. If\n another angle is specified, it is rounded to the closest\n of the permitted values.\n      A value of 0deg indicates\n that all glyphs are set with the top of the glyphs oriented\n towards the reference orientation. A value of 90deg indicates\n an orientation of 90 degrees clockwise from the reference\n orientation.\n    BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "glyphOrientationVertical": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The glyph-orientation-vertical\n attribute affects the amount that hte current text position\n advances as each glyph is rendered.When the inline-progression-direction\n is vertical and the glyph-orientation-vertical results\n in an orientation angle that is a multiple of 180 degrees,\n then the current text position is incremented according\n to the vertical metrics of the glyph. Otherwise, if the\n angle is not a multiple of 180 degrees, then the current\n text position is incremented according to the horizontal\n metrics of the glyph.This attribute is applied only to\n text written in a vertical writing-mode.Note: As a presentation\n attribute, glyph-orientation-vertical can be used as a\n CSS property.You can use this attribute with the following\n SVG elements:Fullwidth ideographic and fullwidth Latin\n text will be set with a glyph orientation of 0 degrees.\n Ideographic punctuation and other ideographic characters\n having alternate horizontal and vertical forms will use\n the vertical form of the glyph. Text which is not fullwidth\n will be set with a glyph orientation of 90 degrees.This\n reorientation rule applies only to the first-level non-ideographic\n text. All further embedding of writing modes or bidirectional\n processing will be based on the first-level rotation.Note:\n Text set in this \"rotated\" manner may contain ligatures\n or other glyph combining and reordering common to the\n language and script. (This presentation form does not\n disable auto-ligature formation or similar context-driven\n variations.)The determination of which characters should\n be auto-rotated may vary across user agents. The determination\n is based on a complex interaction between country, language,\n script, character properties, font, and character context.\n\n      The value of the angle is restricted to 0, 90, 180,\n and 270 degrees. If another angle is specified, it is\n rounded to the closest of the permitted values.\n     \n A value of 0deg indicates that all glyphs are set with\n the top of the glyphs oriented towards the reference orientation.\n A value of 90deg indicates an orientation of 90 degrees\n clockwise from the reference orientation.\n    BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "kerning": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The kerning attribute indicates\n whether the spacing between glyphs should be adjusted\n based on kerning tables that are included in the relevant\n font (i.e., enable auto-kerning) or instead disable auto-kerning\n and set the spacing between them to a specific length\n (typically, zero).Note: As a presentation attribute kerning\n can be used as a CSS property. In CSS the property is\n called font-kerning, though.You can use this attribute\n with the following SVG elements:This value indicates that\n the spacing between glyphs is adjusted based on kerning\n tables that are included in the font that will be used.If\n a length is provided, then auto-kerning is disabled. Instead,\n inter-character spacing is set to the given length.If\n a length is provided without a unit identifier (e.g.,\n an unqualified number such as 128), the length is processed\n as a width value in the current user coordinate system.\n If a unit identifier (e.g., 0.25em or 1%) is provided,\n then the length is converted into a corresponding value\n in the current user coordinate system.The most common\n scenario, other than auto, is to set kerning to a value\n of 0 so that auto-kerning is disabled.The given length\n is added to the inter-character spacing value specified\n by the letter-spacing attribute.BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: Feb 4, 2022, by MDN contributors"
      },
      "lengthAdjust": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The lengthAdjust attribute controls how the text is stretched\n into the length defined by the textLength attribute.You\n can use this attribute with the following SVG elements:BCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "letterSpacing": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The letter-spacing attribute controls spacing between text characters,\n in addition to any spacing from the kerning attribute.If\n the attribute value is a unitless number (like 128), the\n browser processes it as a <length> in the current user\n coordinate system.If the attribute value has a unit identifier,\n such as .25em or 1%, then the browser converts the <length>\n into its corresponding value in the current user coordinate\n system.Note: As a presentation attribute, letter-spacing\n can be used as a CSS property. See the css letter-spacing\n property for more information.You can use this attribute\n with the following SVG elements:For a description of the\n values, please refer to the CSS letter-spacing property.BCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "opacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The opacity attribute specifies the transparency of an object\n or of a group of objects, that is, the degree to which\n the background behind the element is overlaid.Note: As\n a presentation attribute, opacity can be used as a CSS\n property. See the css opacity property for more information.You\n can use this attribute with the following SVG elements:The\n uniform opacity setting to be applied across an entire\n object, as a <number>. Any values outside the range 0.0\n (fully transparent) to 1.0 (fully opaque) will be clamped\n to this range.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "paintOrder": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The paint-order attribute specifies the order that the fill,\n stroke, and markers of a given shape or text element are\n painted.Note: As a presentation attribute, paint-order\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:This value indicates that\n the fill will be painted first, then the stroke, and finally\n the markers.The order of these three keywords indicates\n the order in which the painting happens, from left to\n right. If any of the three painting components is omitted,\n they will be painted in their default order after the\n specified components. For example, using stroke is equivalent\n to stroke fill markers.The example would be rendered as\n follows:\n  \nThe stroke under effect could be achieved\n via the following CSS property:BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "pointerEvents": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The pointer-events attribute is a presentation attribute that\n allows defining whether or when an element may be the\n target of a mouse event.Note: As a presentation attribute\n pointer-events can be used as a CSS property.You can use\n this attribute with the following SVG elements:For a detailed\n explanation of each possible value, have a look at the\n CSS pointer-events documentation.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "requiredFeatures": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The requiredFeatures attribute\n takes a list of feature strings, with the individual strings\n separated by white space. It determines whether or not\n all of the named features are supported by the browser;\n if all of them are supported, the attribute evaluates\n to true end the element is rendered; otherwise, the attribute\n evaluates to false and the current element and its children\n are skipped and thus will not be rendered. This provides\n a way to design SVG that gracefully falls back when features\n aren't available.If the attribute is not present, then\n its implicit evaluated value is true. If a null string\n or empty string value is given to attribute requiredFeatures,\n the attribute is evaluate to false.requiredFeatures is\n often used in conjunction with the <switch> element. If\n requiredFeatures is used in other situations, it represents\n a simple switch on the given element whether to render\n the element or not.To detect availability of an SVG feature\n from script, there is the (also deprecated) DOMImplementation.hasFeature()\n method.You can use this attribute with the following SVG\n elements:This is a list of feature strings, separated\n using white space. Determines whether all of the named\n features are supported by the browser. See Feature strings\n below for a list of allowed values.The following are the\n feature strings for the requiredFeatures attribute. These\n same feature strings apply to the hasFeature method call\n that is part of the SVG DOM's support for the DOMImplementation\n interface. In some cases the feature strings map directly\n to a set of attributes, properties or elements, in others\n they represent some functionality of the browser. Note\n that the format and naming for feature strings changed\n from SVG 1.0 to SVG 1.1. The SVG 1.0 feature strings are\n not listed here but can be found in the SVG Specification.\n Some browser support SVG 1.0 Feature strings for compatibility\n reasons. However, the SVG 1.0 feature strings are considered\n deprecated.At least one of the following feature is supported:At\n least one of the following feature is supported:The browser\n supports all the following features:The browser supports\n all of the DOM interfaces and methods that correspond\n to the language features for http://www.w3.org/TR/SVG11/feature#SVG-static.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-static\n plus the feature http://www.w3.org/TR/SVG11/feature#Animation.The\n browser supports all of the DOM interfaces and methods\n that correspond to the language features for http://www.w3.org/TR/SVG11/feature#SVG-animation.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-animation\n plus the following features:The browser supports all of\n the DOM interfaces and methods that correspond to the\n language features for http://www.w3.org/TR/SVG11/feature#SVG-dynamic.The\n browser supports the id, xml:base, xml:lang and xml:space\n attributesThe browser supports <svg>, <g>, <defs>, <desc>,\n <title>, <metadata>, <symbol> and <use> elements.The browser\n supports <svg>, <g>, <defs>, <desc>, <title>, <metadata>\n and <use> elements.The browser supports the enable-background\n attributeThe browser supports the <switch> element, and\n the requiredFeatures, requiredExtensions, systemLanguage\n attributesThe browser supports the <image> element.The\n browser supports the <style> element.The browser supports\n the clip and overflow attributes.The browser supports\n the <rect>, <circle>, <line>, <polyline>, <polygon>, <ellipse>\n and <path> elements.The browser supports the <text>, <tspan>,\n <tref>, <textPath>, <altGlyph>, <altGlyphDef>, <altGlyphItem>\n and <glyphRef> elements.The browser supports the <text>\n elementThe browser supports the color, fill, fill-rule,\n stroke, stroke-dasharray, stroke-dashoffset, stroke-linecap,\n stroke-linejoin, stroke-miterlimit, stroke-width, color-interpolation\n and color-rendering attributesThe browser supports the\n color, fill, fill-rule, stroke, stroke-dasharray, stroke-dashoffset,\n stroke-linecap, stroke-linejoin, stroke-miterlimit, stroke-width\n and color-rendering attributesThe browser supports the\n opacity, stroke-opacity and fill-opacity attributesThe\n browser supports the display, image-rendering, pointer-events,\n shape-rendering, text-rendering and visibility attributesThe\n browser supports the display and visibility attributesThe\n browser supports the <marker> elementThe browser supports\n the <linearGradient>, <radialGradient> and <stop> elementsThe\n browser supports the <pattern> elementThe browser supports\n the <clipPath> element and the clip-path, clip-rule attributesThe\n browser supports the <clipPath> element and the clip-path\n attributeThe browser supports the <mask> elementThe browser\n supports the <filter>, <feBlend>, <feColorMatrix>, <feComponentTransfer>,\n <feComposite>, <feConvolveMatrix>, <feDiffuseLighting>,\n <feDisplacementMap>, <feFlood>, <feGaussianBlur>, <feImage>,\n <feMerge>, <feMergeNode>, <feMorphology>, <feOffset>,\n <feSpecularLighting>, <feTile>, <feDistantLight>, <fePointLight>,\n <feSpotLight>, <feFuncR>, <feFuncG>, <feFuncB> and <feFuncA>\n elementsThe browser supports the <filter>, <feBlend>,\n <feColorMatrix>, <feComponentTransfer>, <feComposite>,\n <feFlood>, <feGaussianBlur>, <feImage>, <feMerge>, <feMergeNode>,\n <feOffset>, <feTile>, <feFuncR>, <feFuncG>, <feFuncB>\n and <feFuncA> elementsThe browser supports the onunload,\n onabort, onerror, onresize, onscroll and onzoom attributesThe\n browser supports the onfocusin, onfocusout, onactivate,\n onclick, onmousedown, onmouseup, onmouseover, onmousemove,\n onmouseout and onload attributesThe browser supports the\n onbegin, onend, onrepeat and onload attributesThe browser\n supports the <cursor> elementThe browser supports the\n <a> elementThe browser supports the xlink:type, xlink:href,\n xlink:role, xlink:arcrole, xlink:title, xlink:show and\n xlink:actuate attributesThe browser supports the <view>\n elementThe browser supports the <script> elementThe browser\n supports the <animate>, <set>, <animateMotion>, <animateTransform>,\n <animateColor> and <mpath> elementsThe browser supports\n the <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <vkern>, <font-face-src>, <font-face-uri>, <font-face-format>\n and <font-face-name> elementsThe browser supports the\n <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <font-face-src> and <font-face-name> elementsThe browser\n supports the <foreignObject> elementSee also requiredFeatures.svgBCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "stroke": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "stroke color"
      },
      "strokeDasharray": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-dasharray attribute is a presentation attribute defining\n the pattern of dashes and gaps used to paint the outline\n of the shape;Note: As a presentation attribute, stroke-dasharray\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:A list of comma and/or\n white space separated <length>s and <percentage>s that\n specify the lengths of alternating dashes and gaps.If\n an odd number of values is provided, then the list of\n values is repeated to yield an even number of values.\n Thus, 5,3,2 is equivalent to 5,3,2,5,3,2.BCD tables only\n load in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "strokeDashoffset": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-dashoffset attribute is a presentation attribute defining\n an offset on the rendering of the associated dash array.Note:\n As a presentation attribute stroke-dashoffset can be used\n as a CSS property.You can use this attribute with the\n following SVG elements:The offset is usually expressed\n in user units resolved against the pathLength but if a\n <percentage> is used, the value is resolved as a percentage\n of the current viewport.BCD tables only load in the browser\n with JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "strokeLinecap": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"butt\"",
              "computed": false
            },
            {
              "value": "\"inherit\"",
              "computed": false
            },
            {
              "value": "\"round\"",
              "computed": false
            },
            {
              "value": "\"square\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The stroke-linecap attribute is a presentation attribute defining\n the shape to be used at the end of open subpaths when\n they are stroked.Note: As a presentation attribute stroke-linecap\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:The butt value indicates\n that the stroke for each subpath does not extend beyond\n its two endpoints. On a zero length subpath, the path\n will not be rendered at all.The round value indicates\n that at the end of each subpath the stroke will be extended\n by a half circle with a diameter equal to the stroke width.\n On a zero length subpath, the stroke consists of a full\n circle centered at the subpath's point.The square value\n indicates that at the end of each subpath the stroke will\n be extended by a rectangle with a width equal to half\n the width of the stroke and a height equal to the width\n of the stroke. On a zero length subpath, the stroke consists\n of a square with its width equal to the stroke width,\n centered at the subpath's point.BCD tables only load in\n the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "strokeLinejoin": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"bevel\"",
              "computed": false
            },
            {
              "value": "\"inherit\"",
              "computed": false
            },
            {
              "value": "\"miter\"",
              "computed": false
            },
            {
              "value": "\"round\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The stroke-linejoin attribute is a presentation attribute defining\n the shape to be used at the corners of paths when they\n are stroked.Note: As a presentation attribute stroke-linejoin\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:Note: The arcs value as\n been introduced in SVG2 and it isn't widely supported\n yet, see Browser compatibility below for details.The arcs\n value indicates that an arcs corner is to be used to join\n path segments. The arcs shape is formed by extending the\n outer edges of the stroke at the join point with arcs\n that have the same curvature as the outer edges at the\n join point.The bevel value indicates that a bevelled corner\n is to be used to join path segments.The miter value indicates\n that a sharp corner is to be used to join path segments.\n The corner is formed by extending the outer edges of the\n stroke at the tangents of the path segments until they\n intersect.Note: If the stroke-miterlimit is exceeded,\n the line join falls back to bevel.Note: the miter-clip\n value as been introduced in SVG2 and it isn't widely supported\n yet, see Browser compatibility below for details.The miter-clip\n value indicates that a sharp corner is to be used to join\n path segments. The corner is formed by extending the outer\n edges of the stroke at the tangents of the path segments\n until they intersect.If the stroke-miterlimit is exceeded,\n the miter is clipped at a distance equal to half the stroke-miterlimit\n value multiplied by the stroke width from the intersection\n of the path segments. This provides a better rendering\n than miter on very sharp join or in case of an animation.The\n round value indicates that a round corner is to be used\n to join path segments.BCD tables only load in the browser\n with JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "strokeMiterlimit": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-miterlimit attribute is a presentation attribute defining\n a limit on the ratio of the miter length to the stroke-width\n used to draw a miter join. When the limit is exceeded,\n the join is converted from a miter to a bevel.Note: As\n a presentation attribute stroke-miterlimit can be used\n as a CSS property.You can use this attribute with the\n following SVG elements:When two line segments meet at\n a sharp angle and miter joins have been specified for\n stroke-linejoin, it is possible for the miter to extend\n far beyond the thickness of the line stroking the path.\n The stroke-miterlimit ratio is used to define when the\n limit is exceeded, if so the join is converted from a\n miter to a bevel.The ratio of miter length (distance between\n the outer tip and the inner corner of the miter) to stroke-width\n is directly related to the angle (theta) between the segments\n in user space by the formula:\n  \n    \n      stroke-miterlimit\n\n      =\n      \n        \n          miterLength\n        \n\n        \n          stroke-width\n        \n      \n      =\n\n      \n        \n          1\n        \n        \n        \n  \n            sin\n            \n              (\n      \n        \n                \n                  \u03b8\n        \n        \n                \n                  2\n        \n        \n              \n              )\n            \n \n         \n        \n      \n    \n  \nFor example, a miter\n limit of 1.414 converts miters to bevels for theta less\n than 90 degrees, a limit of 4.0 converts them for theta\n less than approximately 29 degrees, and a limit of 10.0\n converts them for theta less than approximately 11.5 degrees.The\n value of stroke-miterlimit must be greater than or equal\n to 1.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "strokeOpacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-opacity attribute is a presentation attribute defining\n the opacity of the paint server (color, gradient, pattern,\n etc) applied to the stroke of a shape.Note: As a presentation\n attribute stroke-opacity can be used as a CSS property.You\n can use this attribute with the following SVG elements:Note:\n SVG2 introduces percentage values for stroke-opacity,\n however, it is not widely supported yet (See Browser compatibility\n below) as a consequence, it is best practices to set opacity\n with a value in the range [0-1].It's important to know\n that the stroke partially covers the fill of a shape,\n so a stroke with an opacity different than 1 will partially\n show the fill underneath. To avoid this effect, it is\n possible to apply a global opacity with the opacity attribute\n or to put the stroke behind the fill with the paint-order\n attribute.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "strokeWidth": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The stroke-width attribute is a presentation attribute defining\n the width of the stroke to be applied to the shape.You\n can use this attribute with the following SVG elements:Note:\n A percentage value is always computed as a percentage\n of the normalized viewBox diagonal length.BCD tables only\n load in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "systemLanguage": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The systemLanguage attribute represents a list of supported language\n tags. This list is matched against the language defined\n in the user preferences.You can use this attribute with\n the following SVG elements:The value is a set of comma-separated\n tokens, each of which must be a language tag, as defined\n in RFC 5646: Tags for Identifying Languages (also known\n as BCP 47).systemLanguage is often used in conjunction\n with the <switch> element. If the attribute is used in\n other situations, then it represents a simple switch on\n the given element whether to render the element or not.Note:\n If several alternative language objects are enclosed in\n a <switch> and none of them matches, this may lead to\n situations where no content is displayed. It is thus recommended\n to include a \"catch-all\" choice at the end of such a <switch>\n which is acceptable in all cases.The attribute evaluates\n to \"true\" if one of the language tags indicated by user\n preferences is a case-insensitive match or prefix (followed\n by a \"-\") of one of the language tags given in the value\n of this parameter. Otherwise it evaluates to \"false\".Note:\n The prefix matching rule does not imply that if a user\n understands a language with a certain tag, that the user\n will also understand all languages with the tag as prefix.If\n the attribute is not present, then it implicitly evaluates\n to \"true\". If a null string or empty string value is given,\n the attribute evaluates to \"false\".The prefix rule allows\n the use of prefix tags if this is the case.Multiple languages\n may be listed for content that is intended for multiple\n audiences. For example, content that is presented simultaneously\n in the original Maori and English versions, would call\n for:However, just because multiple languages are present\n within the object on which the systemLanguage test attribute\n is placed, this does not mean that it is intended for\n multiple linguistic audiences. An example would be a beginner's\n language primer, such as \"A First Lesson in Latin,\" which\n is clearly intended to be used by an English-literate\n audience. In this case, the attribute should only include\n en.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "textAnchor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The text-anchor attribute is used to align (start-, middle- or\n end-alignment) a string of pre-formatted text or auto-wrapped\n text where the wrapping area is determined from the inline-size\n property relative to a given point.This attribute is not\n applicable to other types of auto-wrapped text. For those\n cases you should use text-align. For multi-line text,\n the alignment takes place for each line.The text-anchor\n attribute is applied to each individual text chunk within\n a given <text> element. Each text chunk has an initial\n current text position, which represents the point in the\n user coordinate system resulting from (depending on context)\n application of the x and y attributes on the <text> element,\n any x or y attribute values on a <tspan>, <tref> or <altGlyph>\n element assigned explicitly to the first rendered character\n in a text chunk, or determination of the initial current\n text position for a <textPath> element.Note: As a presentation\n attribute, text-anchor can be used as a CSS property.You\n can use this attribute with the following SVG elements:The\n rendered characters are aligned such that the start of\n the text string is at the initial current text position.\n For an element with a direction property value of ltr\n (typical for most European languages), the left side of\n the text is rendered at the initial text position. For\n an element with a direction property value of rtl (typical\n for Arabic and Hebrew), the right side of the text is\n rendered at the initial text position. For an element\n with a vertical primary text direction (often typical\n for Asian text), the top side of the text is rendered\n at the initial text position.The rendered characters are\n aligned such that the middle of the text string is at\n the current text position. (For text on a path, conceptually\n the text string is first laid out in a straight line.\n The midpoint between the start of the text string and\n the end of the text string is determined. Then, the text\n string is mapped onto the path with this midpoint placed\n at the current text position.)The rendered characters\n are shifted such that the end of the resulting rendered\n text (final current text position before applying the\n text-anchor property) is at the initial current text position.\n For an element with a direction property value of ltr\n (typical for most European languages), the right side\n of the text is rendered at the initial text position.\n For an element with a direction property value of rtl\n (typical for Arabic and Hebrew), the left side of the\n text is rendered at the initial text position. For an\n element with a vertical primary text direction (often\n typical for Asian text), the bottom of the text is rendered\n at the initial text position.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "textDecoration": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The text-decoration attribute defines whether text is decorated\n with an underline, overline and/or strike-through. It\n is a shorthand for the text-decoration-line and text-decoration-style\n properties.The fill and stroke of the text decoration\n are given by the fill and stroke of the text at the point\n where the text decoration is declared.The paint order\n of the text decoration, i.e. the fill and stroke, is determined\n by the value of the paint-order attribute at the point\n where the text decoration is declared.Note: As a presentation\n attribute, text-decoration can be used as a CSS property.\n See the css text-decoration property for more information.You\n can use this attribute with the following SVG elements:For\n a description of the values, please refer to the CSS text-decoration\n property.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "textLength": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The textLength attribute, available on SVG <text> and <tspan>\n elements, lets you specify the width of the space into\n which the text will draw. The user agent will ensure that\n the text does not extend farther than that distance, using\n the method or methods specified by the lengthAdjust attribute.\n By default, only the spacing between characters is adjusted,\n but the glyph size can also be adjusted if you change\n lengthAdjust.By using textLength, you can ensure that\n your SVG text displays at the same width regardless of\n conditions including web fonts failing to load (or not\n having loaded yet).You can use this attribute with the\n following SVG elements:This value specifies the width\n of the space the text will be adjusted to occupy as absolute\n length or percentage.A numeric value outlines a length\n referring to the units of the current coordinate system.Let's\n create a simple example that presents text you can resize\n using an <input> element of type \"range\".Let's start with\n the SVG. It's pretty basic, with a 1000-by-300 pixel space\n mapped into a 10 centimeter by 3 centimeter box.First,\n a <rect> element is used to create and stroke a rectangle\n to contain the text. Then <text> is used to create the\n text element itself, with an id of \"hello\".The HTML is\n also simple, with only two displayed elements contained\n inside a grouping <div>:The <input> element, of type \"range\",\n is used to create the slider control the user will manipulate\n to change the width of the text. A <span> element of ID\n \"widthDisplay\" is provided to display the current width\n value.Finally, let's have a look at the JavaScript code.\n It starts by stashing references to the elements it will\n need to access, using Document.getElementById():After\n fetching the element references, an EventListener is established\n by calling addEventListener() on the slider control, to\n receive any input events which occur. These events will\n be sent any time the slider's value changes, even if the\n user hasn't stopped moving it, so we can responsively\n adjust the text width.When an \"input\" event occurs, we\n call newValueSpecifiedUnits() to set the value of textLength\n to the slider's new value, using the SVGLength interface's\n SVG_LENGTHTYPE_PX unit type to indicate that the value\n represents pixels. Note that we have to dive into textLength\n to get its baseVal property; textLength is stored as an\n SVGLength object, so we can't treat it like a plain number.After\n updating the text width, the contents of the widthDisplay\n box are updated with the new value as well, and we're\n finished.Here's what the example looks like. Try dragging\n the slider around to get a feel for what it does.BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: Jul 8, 2022, by\n MDN contributors"
      },
      "unicodeBidi": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The unicode-bidi attribute specifies how the accumulation of\n the background image is managed.Note: As a presentation\n attribute, unicode-bidi can be used as a CSS property.\n See the CSS unicode-bidi property for more information.You\n can use this attribute with the following SVG elements:For\n a description of the values, please refer to the CSS unicode-bidi\n property.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "vectorEffect": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The vector-effect property specifies the vector effect to use\n when drawing an object. Vector effects are applied before\n any of the other compositing operations, i.e. filters,\n masks and clips.Note: As a presentation attribute, vector-effect\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:This value specifies that\n no vector effect shall be applied, i.e. the default rendering\n behavior is used which is to first fill the geometry of\n a shape with a specified paint, then stroke the outline\n with a specified paint.This value modifies the way an\n object is stroked. Normally stroking involves calculating\n stroke outline of the shape's path in current user coordinate\n system and filling that outline with the stroke paint\n (color or gradient). The resulting visual effect of this\n value is that the stroke width is not dependent on the\n transformations of the element (including non-uniform\n scaling and shear transformations) and zoom level.This\n value specifies a special user coordinate system used\n by the element and its descendants. The scale of that\n user coordinate system does not change in spite of any\n transformation changes from a host coordinate space. However,\n it does not specify the suppression of rotation and skew.\n Also, it does not specify the origin of the user coordinate\n system. Since this value suppresses scaling of the user\n coordinate system, it also has the characteristics of\n non-scaling-stroke.This value specifies a special user\n coordinate system used by the element and its descendants.\n The rotation and skew of that user coordinate system is\n suppressed in spite of any transformation changes from\n a host coordinate space. However, it does not specify\n the suppression of scaling. Also, it does not specify\n the origin of user coordinate system.This value specifies\n a special user coordinate system used by the element and\n its descendants. The position of user coordinate system\n is fixed in spite of any transformation changes from a\n host coordinate space. However, it does not specify the\n suppression of rotation, skew and scaling. When this vector\n effect and the transform property are defined at the same\n time, that property is consumed for this effect.BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "visibility": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The visibility attribute lets you control the visibility of graphical\n elements. With a value of hidden or collapse the current\n graphics element is invisible.Note: If the visibility\n attribute is set to hidden on a text element, then the\n text is invisible but still takes up space in text layout\n calculations.Depending on the value of attribute pointer-events,\n graphics elements which have their visibility attribute\n set to hidden still might receive events.Note: As a presentation\n attribute, visibility can be used as a CSS property. See\n the css visibility property for more information.You can\n use this attribute with the following SVG elements:The\n following example toggles the CSS visibility of the SVG\n image path.This value indicates that the element will\n be painted.This value indicates that the element will\n not be painted. Though it is still part of the rendering\n tree, i.e. it may receive pointer events depending on\n the pointer-events attribute, may receive focus depending\n on the tabindex attribute, contributes to bounding box\n calculations and clipping paths, and does affect text\n layout.This value is equal to hidden.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "wordSpacing": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The word-spacing attribute specifies spacing behavior between\n words.If a <length> is provided without a unit identifier\n (e.g. an unqualified number such as 128), the browser\n processes the <length> as a width value in the current\n user coordinate system.If a <length> is provided with\n one of the unit identifiers (e.g. .25em or 1%), then the\n browser converts the <length> into a corresponding value\n in the current user coordinate system.Note: As a presentation\n attribute, word-spacing can be used as a CSS property.\n See the css word-spacing property for more information.You\n can use this attribute with the following SVG elements:For\n a description of the values, please refer to the CSS letter-spacing\n property.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "writingMode": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The writing-mode attribute specifies whether the initial inline-progression-direction\n for a <text> element shall be left-to-right, right-to-left,\n or top-to-bottom. The writing-mode attribute applies only\n to <text> elements; the attribute is ignored for <tspan>,\n <tref>, <altGlyph> and <textPath> sub-elements. (Note\n that the inline-progression-direction can change within\n a <text> element due to the Unicode bidirectional algorithm\n and properties direction and unicode-bidi.)Note: As a\n presentation attribute, writing-mode can be used as a\n CSS property. See the CSS writing-mode property for more\n information.You can use this attribute with the following\n SVG elements:This value defines a top-to-bottom block\n flow direction. Both the writing mode and the typographic\n mode are horizontal.This value defines a right-to-left\n block flow direction. Both the writing mode and the typographic\n mode are vertical.This value defines a left-to-right block\n flow direction. Both the writing mode and the typographic\n mode are vertical.BCD tables only load in the browser\n with JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/Use.react.js": {
    "description": "Use is a wrapper for the <use> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/use",
    "displayName": "Use",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "clipPath": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The clip-path presentation attribute defines or associates a\n clipping path with the element it is related to.Note:\n As a presentation attribute clip-path can be used as a\n CSS property.You can use this attribute with the following\n SVG elements:An extra information to tell how a <basic-shape>\n is applied to an element: fill-box indicates to use the\n object bounding box; stroke-box indicates to use the object\n bounding box extended with the stroke; view-box indicates\n to use the nearest SVG viewport as the reference box.Note:\n For more details on the clip-path syntax, see the CSS\n property clip-path reference page.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "colorInterpolation": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The color-interpolation attribute specifies the color space for\n gradient interpolations, color animations, and alpha compositing.Note:\n For filter effects, the color-interpolation-filters property\n controls which color space is used.The color-interpolation\n property chooses between color operations occurring in\n the sRGB color space or in a (light energy linear) linearized\n RGB color space. Having chosen the appropriate color space,\n component-wise linear interpolation is used.When a child\n element is blended into a background, the value of the\n color-interpolation property on the child determines the\n type of blending, not the value of the color-interpolation\n on the parent. For gradients which make use of the href\n or the deprecated xlink:href attribute to reference another\n gradient, the gradient uses the property's value from\n the gradient element which is directly referenced by the\n fill or stroke property. When animating colors, color\n interpolation is performed according to the value of the\n color-interpolation property on the element being animated.Note:\n As a presentation attribute, color-interpolation can be\n used as a CSS property.You can use this attribute with\n the following SVG elements:Indicates that the user agent\n can choose either the sRGB or linearRGB spaces for color\n interpolation. This option indicates that the author doesn't\n require that color interpolation occur in a particular\n color space.Indicates that color interpolation should\n occur in the sRGB color space.Indicates that color interpolation\n should occur in the linearized RGB color space as described\n in the sRGB specification.BCD tables only load in the\n browser with JavaScript enabled. Enable JavaScript to\n view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "mask": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The mask attribute is a presentation attribute mainly used to\n bind a given <mask> element with the element the attribute\n belongs to.Note: As a presentation attribute mask can\n be used as a CSS property.You can use this attribute with\n the following SVG elements:Since SVG2, the mask attribute\n is defined as a css property and is a shorthand for many\n other properties: mask-image, mask-mode, mask-repeat,\n mask-position, mask-clip, mask-origin, mask-size, and\n mask-composite.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "opacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The opacity attribute specifies the transparency of an object\n or of a group of objects, that is, the degree to which\n the background behind the element is overlaid.Note: As\n a presentation attribute, opacity can be used as a CSS\n property. See the css opacity property for more information.You\n can use this attribute with the following SVG elements:The\n uniform opacity setting to be applied across an entire\n object, as a <number>. Any values outside the range 0.0\n (fully transparent) to 1.0 (fully opaque) will be clamped\n to this range.BCD tables only load in the browser with\n JavaScript enabled. Enable JavaScript to view data.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "pointerEvents": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The pointer-events attribute is a presentation attribute that\n allows defining whether or when an element may be the\n target of a mouse event.Note: As a presentation attribute\n pointer-events can be used as a CSS property.You can use\n this attribute with the following SVG elements:For a detailed\n explanation of each possible value, have a look at the\n CSS pointer-events documentation.BCD tables only load\n in the browser with JavaScript enabled. Enable JavaScript\n to view data.Last modified: May 13, 2022, by MDN contributors"
      },
      "requiredFeatures": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The requiredFeatures attribute\n takes a list of feature strings, with the individual strings\n separated by white space. It determines whether or not\n all of the named features are supported by the browser;\n if all of them are supported, the attribute evaluates\n to true end the element is rendered; otherwise, the attribute\n evaluates to false and the current element and its children\n are skipped and thus will not be rendered. This provides\n a way to design SVG that gracefully falls back when features\n aren't available.If the attribute is not present, then\n its implicit evaluated value is true. If a null string\n or empty string value is given to attribute requiredFeatures,\n the attribute is evaluate to false.requiredFeatures is\n often used in conjunction with the <switch> element. If\n requiredFeatures is used in other situations, it represents\n a simple switch on the given element whether to render\n the element or not.To detect availability of an SVG feature\n from script, there is the (also deprecated) DOMImplementation.hasFeature()\n method.You can use this attribute with the following SVG\n elements:This is a list of feature strings, separated\n using white space. Determines whether all of the named\n features are supported by the browser. See Feature strings\n below for a list of allowed values.The following are the\n feature strings for the requiredFeatures attribute. These\n same feature strings apply to the hasFeature method call\n that is part of the SVG DOM's support for the DOMImplementation\n interface. In some cases the feature strings map directly\n to a set of attributes, properties or elements, in others\n they represent some functionality of the browser. Note\n that the format and naming for feature strings changed\n from SVG 1.0 to SVG 1.1. The SVG 1.0 feature strings are\n not listed here but can be found in the SVG Specification.\n Some browser support SVG 1.0 Feature strings for compatibility\n reasons. However, the SVG 1.0 feature strings are considered\n deprecated.At least one of the following feature is supported:At\n least one of the following feature is supported:The browser\n supports all the following features:The browser supports\n all of the DOM interfaces and methods that correspond\n to the language features for http://www.w3.org/TR/SVG11/feature#SVG-static.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-static\n plus the feature http://www.w3.org/TR/SVG11/feature#Animation.The\n browser supports all of the DOM interfaces and methods\n that correspond to the language features for http://www.w3.org/TR/SVG11/feature#SVG-animation.The\n browser supports all of the language features from http://www.w3.org/TR/SVG11/feature#SVG-animation\n plus the following features:The browser supports all of\n the DOM interfaces and methods that correspond to the\n language features for http://www.w3.org/TR/SVG11/feature#SVG-dynamic.The\n browser supports the id, xml:base, xml:lang and xml:space\n attributesThe browser supports <svg>, <g>, <defs>, <desc>,\n <title>, <metadata>, <symbol> and <use> elements.The browser\n supports <svg>, <g>, <defs>, <desc>, <title>, <metadata>\n and <use> elements.The browser supports the enable-background\n attributeThe browser supports the <switch> element, and\n the requiredFeatures, requiredExtensions, systemLanguage\n attributesThe browser supports the <image> element.The\n browser supports the <style> element.The browser supports\n the clip and overflow attributes.The browser supports\n the <rect>, <circle>, <line>, <polyline>, <polygon>, <ellipse>\n and <path> elements.The browser supports the <text>, <tspan>,\n <tref>, <textPath>, <altGlyph>, <altGlyphDef>, <altGlyphItem>\n and <glyphRef> elements.The browser supports the <text>\n elementThe browser supports the color, fill, fill-rule,\n stroke, stroke-dasharray, stroke-dashoffset, stroke-linecap,\n stroke-linejoin, stroke-miterlimit, stroke-width, color-interpolation\n and color-rendering attributesThe browser supports the\n color, fill, fill-rule, stroke, stroke-dasharray, stroke-dashoffset,\n stroke-linecap, stroke-linejoin, stroke-miterlimit, stroke-width\n and color-rendering attributesThe browser supports the\n opacity, stroke-opacity and fill-opacity attributesThe\n browser supports the display, image-rendering, pointer-events,\n shape-rendering, text-rendering and visibility attributesThe\n browser supports the display and visibility attributesThe\n browser supports the <marker> elementThe browser supports\n the <linearGradient>, <radialGradient> and <stop> elementsThe\n browser supports the <pattern> elementThe browser supports\n the <clipPath> element and the clip-path, clip-rule attributesThe\n browser supports the <clipPath> element and the clip-path\n attributeThe browser supports the <mask> elementThe browser\n supports the <filter>, <feBlend>, <feColorMatrix>, <feComponentTransfer>,\n <feComposite>, <feConvolveMatrix>, <feDiffuseLighting>,\n <feDisplacementMap>, <feFlood>, <feGaussianBlur>, <feImage>,\n <feMerge>, <feMergeNode>, <feMorphology>, <feOffset>,\n <feSpecularLighting>, <feTile>, <feDistantLight>, <fePointLight>,\n <feSpotLight>, <feFuncR>, <feFuncG>, <feFuncB> and <feFuncA>\n elementsThe browser supports the <filter>, <feBlend>,\n <feColorMatrix>, <feComponentTransfer>, <feComposite>,\n <feFlood>, <feGaussianBlur>, <feImage>, <feMerge>, <feMergeNode>,\n <feOffset>, <feTile>, <feFuncR>, <feFuncG>, <feFuncB>\n and <feFuncA> elementsThe browser supports the onunload,\n onabort, onerror, onresize, onscroll and onzoom attributesThe\n browser supports the onfocusin, onfocusout, onactivate,\n onclick, onmousedown, onmouseup, onmouseover, onmousemove,\n onmouseout and onload attributesThe browser supports the\n onbegin, onend, onrepeat and onload attributesThe browser\n supports the <cursor> elementThe browser supports the\n <a> elementThe browser supports the xlink:type, xlink:href,\n xlink:role, xlink:arcrole, xlink:title, xlink:show and\n xlink:actuate attributesThe browser supports the <view>\n elementThe browser supports the <script> elementThe browser\n supports the <animate>, <set>, <animateMotion>, <animateTransform>,\n <animateColor> and <mpath> elementsThe browser supports\n the <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <vkern>, <font-face-src>, <font-face-uri>, <font-face-format>\n and <font-face-name> elementsThe browser supports the\n <font>, <font-face>, <glyph>, <missing-glyph>, <hkern>,\n <font-face-src> and <font-face-name> elementsThe browser\n supports the <foreignObject> elementSee also requiredFeatures.svgBCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "systemLanguage": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The systemLanguage attribute represents a list of supported language\n tags. This list is matched against the language defined\n in the user preferences.You can use this attribute with\n the following SVG elements:The value is a set of comma-separated\n tokens, each of which must be a language tag, as defined\n in RFC 5646: Tags for Identifying Languages (also known\n as BCP 47).systemLanguage is often used in conjunction\n with the <switch> element. If the attribute is used in\n other situations, then it represents a simple switch on\n the given element whether to render the element or not.Note:\n If several alternative language objects are enclosed in\n a <switch> and none of them matches, this may lead to\n situations where no content is displayed. It is thus recommended\n to include a \"catch-all\" choice at the end of such a <switch>\n which is acceptable in all cases.The attribute evaluates\n to \"true\" if one of the language tags indicated by user\n preferences is a case-insensitive match or prefix (followed\n by a \"-\") of one of the language tags given in the value\n of this parameter. Otherwise it evaluates to \"false\".Note:\n The prefix matching rule does not imply that if a user\n understands a language with a certain tag, that the user\n will also understand all languages with the tag as prefix.If\n the attribute is not present, then it implicitly evaluates\n to \"true\". If a null string or empty string value is given,\n the attribute evaluates to \"false\".The prefix rule allows\n the use of prefix tags if this is the case.Multiple languages\n may be listed for content that is intended for multiple\n audiences. For example, content that is presented simultaneously\n in the original Maori and English versions, would call\n for:However, just because multiple languages are present\n within the object on which the systemLanguage test attribute\n is placed, this does not mean that it is intended for\n multiple linguistic audiences. An example would be a beginner's\n language primer, such as \"A First Lesson in Latin,\" which\n is clearly intended to be used by an English-literate\n audience. In this case, the attribute should only include\n en.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "vectorEffect": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The vector-effect property specifies the vector effect to use\n when drawing an object. Vector effects are applied before\n any of the other compositing operations, i.e. filters,\n masks and clips.Note: As a presentation attribute, vector-effect\n can be used as a CSS property.You can use this attribute\n with the following SVG elements:This value specifies that\n no vector effect shall be applied, i.e. the default rendering\n behavior is used which is to first fill the geometry of\n a shape with a specified paint, then stroke the outline\n with a specified paint.This value modifies the way an\n object is stroked. Normally stroking involves calculating\n stroke outline of the shape's path in current user coordinate\n system and filling that outline with the stroke paint\n (color or gradient). The resulting visual effect of this\n value is that the stroke width is not dependent on the\n transformations of the element (including non-uniform\n scaling and shear transformations) and zoom level.This\n value specifies a special user coordinate system used\n by the element and its descendants. The scale of that\n user coordinate system does not change in spite of any\n transformation changes from a host coordinate space. However,\n it does not specify the suppression of rotation and skew.\n Also, it does not specify the origin of the user coordinate\n system. Since this value suppresses scaling of the user\n coordinate system, it also has the characteristics of\n non-scaling-stroke.This value specifies a special user\n coordinate system used by the element and its descendants.\n The rotation and skew of that user coordinate system is\n suppressed in spite of any transformation changes from\n a host coordinate space. However, it does not specify\n the suppression of scaling. Also, it does not specify\n the origin of user coordinate system.This value specifies\n a special user coordinate system used by the element and\n its descendants. The position of user coordinate system\n is fixed in spite of any transformation changes from a\n host coordinate space. However, it does not specify the\n suppression of rotation, skew and scaling. When this vector\n effect and the transform property are defined at the same\n time, that property is consumed for this effect.BCD tables\n only load in the browser with JavaScript enabled. Enable\n JavaScript to view data.Last modified: May 13, 2022, by\n MDN contributors"
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "width"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  },
  "src/lib/components/View.react.js": {
    "description": "View is a wrapper for the <view> SVG element.\nFor detailed attribute info see:\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/view",
    "displayName": "View",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "preserveAspectRatio": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The preserveAspectRatio attribute indicates how an element with\n a viewBox providing a given aspect ratio must fit into\n a viewport with a different aspect ratio.Because the aspect\n ratio of an SVG image is defined by the viewBox attribute,\n if this attribute isn't set, the preserveAspectRatio attribute\n has no effect (with one exception, the <image> element,\n as described below).Its value is made of one or two keywords:\n A required alignment value and an optional \"meet or slice\"\n reference as described below:The alignment value indicates\n whether to force uniform scaling and, if so, the alignment\n method to use in case the aspect ratio of the viewBox\n doesn't match the aspect ratio of the viewport. The alignment\n value must be one of the following keywords:The meet or\n slice reference is optional and, if provided, must be\n one of the following keywords:You can use this attribute\n with the following SVG elements:For <feImage>, preserveAspectRatio\n defines how the referenced image should fit in the rectangle\n define by the <feImage> element.For <image>, preserveAspectRatio\n defines how the referenced image should fit in the rectangle\n define by the <image> element.For <marker>, preserveAspectRatio\n indicates if a uniform scaling must be performed to fit\n the element viewport.For <pattern>, preserveAspectRatio\n indicates if a uniform scaling must be performed to fit\n the element viewport.For <svg>, preserveAspectRatio indicates\n if a uniform scaling must be performed to fit the element\n viewport.For <symbol>, preserveAspectRatio indicates if\n a uniform scaling must be performed to fit the element\n viewport.For <view>, preserveAspectRatio indicates if\n a uniform scaling must be performed to fit the element\n viewport.Last modified: May 13, 2022, by MDN contributors"
      },
      "viewBox": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The viewBox attribute defines the position and dimension, in\n user space, of an SVG viewport.The value of the viewBox\n attribute is a list of four numbers: min-x, min-y, width\n and height. The numbers, which are separated by whitespace\n and/or a comma, specify a rectangle in user space which\n is mapped to the bounds of the viewport established for\n the associated SVG element (not the browser viewport).You\n can use this attribute with the following SVG elements:The\n exact effect of this attribute is influenced by the preserveAspectRatio\n attribute.Note: Values for width or height lower or equal\n to 0 disable rendering of the element.For <marker>, viewBox\n defines the position and dimension for the content of\n the <marker> element.For <pattern>, viewBox defines the\n position and dimension for the content of the pattern\n tile.For <svg>, viewBox defines the position and dimension\n for the content of the <svg> element.For <symbol>, viewBox\n defines the position and dimension for the content of\n the <symbol> element.For <view>, viewBox defines the position\n and dimension for the content of the <view> element.Last\n modified: May 13, 2022, by MDN contributors"
      },
      "viewTarget": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The viewTarget attribute\n indicates the target object associated with the view.You\n can use this attribute with the following SVG elements:This\n value specifies the name of the object associated with\n the view.BCD tables only load in the browser with JavaScript\n enabled. Enable JavaScript to view data.Last modified:\n May 13, 2022, by MDN contributors"
      },
      "zoomAndPan": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Deprecated: This feature is no longer recommended. Though some\n browsers might still support it, it may have already been\n removed from the relevant web standards, may be in the\n process of being dropped, or may only be kept for compatibility\n purposes. Avoid using it, and update existing code if\n possible; see the compatibility table at the bottom of\n this page to guide your decision. Be aware that this feature\n may cease to work at any time.The zoomAndPan attribute\n specifies whether the SVG document can be magnified and\n panned.Magnification in this context means the effect\n of a supplemental scale and translate transformation on\n the outermost SVG document fragment.Panning represents\n a translation (i.e., a shift) transformation on an SVG\n document fragment in response to a user interface action.You\n can use this attribute with the following SVG elements:BCD\n tables only load in the browser with JavaScript enabled.\n Enable JavaScript to view data.Last modified: May 13,\n 2022, by MDN contributors"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "transform": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Transformation to apply to the element"
      },
      "style": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          }
        },
        "required": false,
        "description": "CSS style to apply to the element"
      },
      "x": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "x position"
      },
      "y": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "y position"
      },
      "fill": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "fill color"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the element is clicked."
      }
    }
  }
}